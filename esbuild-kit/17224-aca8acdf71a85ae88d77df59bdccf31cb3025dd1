{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"removeAlphaVariables\",{enumerable:true,get:function(){return removeAlphaVariables}});function removeAlphaVariables(container,toRemove){container.walkDecls(decl=>{if(toRemove.includes(decl.prop)){decl.remove();return}for(let varName of toRemove){if(decl.value.includes(`/ var(${varName})`)){decl.value=decl.value.replace(`/ var(${varName})`,\"\")}}})}__name(removeAlphaVariables,\"removeAlphaVariables\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HASA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,OAAO,eAAe,QAAS,uBAAwB,CACnD,WAAY,KACZ,IAAK,UAAW,CACZ,OAAO,oBACX,CACJ,CAAC,EACD,SAAS,qBAAqB,UAAW,SAAU,CAC/C,UAAU,UAAW,MAAO,CACxB,GAAI,SAAS,SAAS,KAAK,IAAI,EAAG,CAC9B,KAAK,OAAO,EACZ,MACJ,CACA,QAAS,WAAW,SAAS,CACzB,GAAI,KAAK,MAAM,SAAS,SAAS,UAAU,EAAG,CAC1C,KAAK,MAAQ,KAAK,MAAM,QAAQ,SAAS,WAAY,EAAE,CAC3D,CACJ,CACJ,CAAC,CACL,CAZS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/util/removeAlphaVariables.js"],"sourcesContent":["/**\n * This function removes any uses of CSS variables used as an alpha channel\n *\n * This is required for selectors like `:visited` which do not allow\n * changes in opacity or external control using CSS variables.\n *\n * @param {import('postcss').Container} container\n * @param {string[]} toRemove\n */ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"removeAlphaVariables\", {\n    enumerable: true,\n    get: function() {\n        return removeAlphaVariables;\n    }\n});\nfunction removeAlphaVariables(container, toRemove) {\n    container.walkDecls((decl)=>{\n        if (toRemove.includes(decl.prop)) {\n            decl.remove();\n            return;\n        }\n        for (let varName of toRemove){\n            if (decl.value.includes(`/ var(${varName})`)) {\n                decl.value = decl.value.replace(`/ var(${varName})`, \"\");\n            }\n        }\n    });\n}\n"]}}