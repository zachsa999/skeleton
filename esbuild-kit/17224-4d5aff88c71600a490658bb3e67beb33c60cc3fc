{"code":"(()=>{\nvar intToCharMap=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");exports.encode=function(number){if(0<=number&&number<intToCharMap.length){return intToCharMap[number]}throw new TypeError(\"Must be between 0 and 63: \"+number)};exports.decode=function(charCode){var bigA=65;var bigZ=90;var littleA=97;var littleZ=122;var zero=48;var nine=57;var plus=43;var slash=47;var littleOffset=26;var numberOffset=52;if(bigA<=charCode&&charCode<=bigZ){return charCode-bigA}if(littleA<=charCode&&charCode<=littleZ){return charCode-littleA+littleOffset}if(zero<=charCode&&charCode<=nine){return charCode-zero+numberOffset}if(charCode==plus){return 62}if(charCode==slash){return 63}return-1};\n})()\n","warnings":[],"map":{"version":3,"mappings":";AAOA,IAAI,aAAe,mEAAmE,MAAM,EAAE,EAK9F,QAAQ,OAAS,SAAU,OAAQ,CACjC,GAAI,GAAK,QAAU,OAAS,aAAa,OAAQ,CAC/C,OAAO,aAAa,MAAM,CAC5B,CACA,MAAM,IAAI,UAAU,6BAA+B,MAAM,CAC3D,EAMA,QAAQ,OAAS,SAAU,SAAU,CACnC,IAAI,KAAO,GACX,IAAI,KAAO,GAEX,IAAI,QAAU,GACd,IAAI,QAAU,IAEd,IAAI,KAAO,GACX,IAAI,KAAO,GAEX,IAAI,KAAO,GACX,IAAI,MAAQ,GAEZ,IAAI,aAAe,GACnB,IAAI,aAAe,GAGnB,GAAI,MAAQ,UAAY,UAAY,KAAM,CACxC,OAAQ,SAAW,IACrB,CAGA,GAAI,SAAW,UAAY,UAAY,QAAS,CAC9C,OAAQ,SAAW,QAAU,YAC/B,CAGA,GAAI,MAAQ,UAAY,UAAY,KAAM,CACxC,OAAQ,SAAW,KAAO,YAC5B,CAGA,GAAI,UAAY,KAAM,CACpB,MAAO,GACT,CAGA,GAAI,UAAY,MAAO,CACrB,MAAO,GACT,CAGA,MAAO,EACT","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/source-map-js@1.0.2/node_modules/source-map-js/lib/base64.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n"]}}