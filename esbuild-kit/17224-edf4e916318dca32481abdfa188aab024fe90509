{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});var TokenType;(function(TokenType2){const PRECEDENCE_MASK=15;TokenType2[TokenType2[\"PRECEDENCE_MASK\"]=PRECEDENCE_MASK]=\"PRECEDENCE_MASK\";const IS_KEYWORD=1<<4;TokenType2[TokenType2[\"IS_KEYWORD\"]=IS_KEYWORD]=\"IS_KEYWORD\";const IS_ASSIGN=1<<5;TokenType2[TokenType2[\"IS_ASSIGN\"]=IS_ASSIGN]=\"IS_ASSIGN\";const IS_RIGHT_ASSOCIATIVE=1<<6;TokenType2[TokenType2[\"IS_RIGHT_ASSOCIATIVE\"]=IS_RIGHT_ASSOCIATIVE]=\"IS_RIGHT_ASSOCIATIVE\";const IS_PREFIX=1<<7;TokenType2[TokenType2[\"IS_PREFIX\"]=IS_PREFIX]=\"IS_PREFIX\";const IS_POSTFIX=1<<8;TokenType2[TokenType2[\"IS_POSTFIX\"]=IS_POSTFIX]=\"IS_POSTFIX\";const IS_EXPRESSION_START=1<<9;TokenType2[TokenType2[\"IS_EXPRESSION_START\"]=IS_EXPRESSION_START]=\"IS_EXPRESSION_START\";const num=512;TokenType2[TokenType2[\"num\"]=num]=\"num\";const bigint=1536;TokenType2[TokenType2[\"bigint\"]=bigint]=\"bigint\";const decimal=2560;TokenType2[TokenType2[\"decimal\"]=decimal]=\"decimal\";const regexp=3584;TokenType2[TokenType2[\"regexp\"]=regexp]=\"regexp\";const string=4608;TokenType2[TokenType2[\"string\"]=string]=\"string\";const name=5632;TokenType2[TokenType2[\"name\"]=name]=\"name\";const eof=6144;TokenType2[TokenType2[\"eof\"]=eof]=\"eof\";const bracketL=7680;TokenType2[TokenType2[\"bracketL\"]=bracketL]=\"bracketL\";const bracketR=8192;TokenType2[TokenType2[\"bracketR\"]=bracketR]=\"bracketR\";const braceL=9728;TokenType2[TokenType2[\"braceL\"]=braceL]=\"braceL\";const braceBarL=10752;TokenType2[TokenType2[\"braceBarL\"]=braceBarL]=\"braceBarL\";const braceR=11264;TokenType2[TokenType2[\"braceR\"]=braceR]=\"braceR\";const braceBarR=12288;TokenType2[TokenType2[\"braceBarR\"]=braceBarR]=\"braceBarR\";const parenL=13824;TokenType2[TokenType2[\"parenL\"]=parenL]=\"parenL\";const parenR=14336;TokenType2[TokenType2[\"parenR\"]=parenR]=\"parenR\";const comma=15360;TokenType2[TokenType2[\"comma\"]=comma]=\"comma\";const semi=16384;TokenType2[TokenType2[\"semi\"]=semi]=\"semi\";const colon=17408;TokenType2[TokenType2[\"colon\"]=colon]=\"colon\";const doubleColon=18432;TokenType2[TokenType2[\"doubleColon\"]=doubleColon]=\"doubleColon\";const dot=19456;TokenType2[TokenType2[\"dot\"]=dot]=\"dot\";const question=20480;TokenType2[TokenType2[\"question\"]=question]=\"question\";const questionDot=21504;TokenType2[TokenType2[\"questionDot\"]=questionDot]=\"questionDot\";const arrow=22528;TokenType2[TokenType2[\"arrow\"]=arrow]=\"arrow\";const template=23552;TokenType2[TokenType2[\"template\"]=template]=\"template\";const ellipsis=24576;TokenType2[TokenType2[\"ellipsis\"]=ellipsis]=\"ellipsis\";const backQuote=25600;TokenType2[TokenType2[\"backQuote\"]=backQuote]=\"backQuote\";const dollarBraceL=27136;TokenType2[TokenType2[\"dollarBraceL\"]=dollarBraceL]=\"dollarBraceL\";const at=27648;TokenType2[TokenType2[\"at\"]=at]=\"at\";const hash=29184;TokenType2[TokenType2[\"hash\"]=hash]=\"hash\";const eq=29728;TokenType2[TokenType2[\"eq\"]=eq]=\"eq\";const assign=30752;TokenType2[TokenType2[\"assign\"]=assign]=\"assign\";const preIncDec=32640;TokenType2[TokenType2[\"preIncDec\"]=preIncDec]=\"preIncDec\";const postIncDec=33664;TokenType2[TokenType2[\"postIncDec\"]=postIncDec]=\"postIncDec\";const bang=34432;TokenType2[TokenType2[\"bang\"]=bang]=\"bang\";const tilde=35456;TokenType2[TokenType2[\"tilde\"]=tilde]=\"tilde\";const pipeline=35841;TokenType2[TokenType2[\"pipeline\"]=pipeline]=\"pipeline\";const nullishCoalescing=36866;TokenType2[TokenType2[\"nullishCoalescing\"]=nullishCoalescing]=\"nullishCoalescing\";const logicalOR=37890;TokenType2[TokenType2[\"logicalOR\"]=logicalOR]=\"logicalOR\";const logicalAND=38915;TokenType2[TokenType2[\"logicalAND\"]=logicalAND]=\"logicalAND\";const bitwiseOR=39940;TokenType2[TokenType2[\"bitwiseOR\"]=bitwiseOR]=\"bitwiseOR\";const bitwiseXOR=40965;TokenType2[TokenType2[\"bitwiseXOR\"]=bitwiseXOR]=\"bitwiseXOR\";const bitwiseAND=41990;TokenType2[TokenType2[\"bitwiseAND\"]=bitwiseAND]=\"bitwiseAND\";const equality=43015;TokenType2[TokenType2[\"equality\"]=equality]=\"equality\";const lessThan=44040;TokenType2[TokenType2[\"lessThan\"]=lessThan]=\"lessThan\";const greaterThan=45064;TokenType2[TokenType2[\"greaterThan\"]=greaterThan]=\"greaterThan\";const relationalOrEqual=46088;TokenType2[TokenType2[\"relationalOrEqual\"]=relationalOrEqual]=\"relationalOrEqual\";const bitShiftL=47113;TokenType2[TokenType2[\"bitShiftL\"]=bitShiftL]=\"bitShiftL\";const bitShiftR=48137;TokenType2[TokenType2[\"bitShiftR\"]=bitShiftR]=\"bitShiftR\";const plus=49802;TokenType2[TokenType2[\"plus\"]=plus]=\"plus\";const minus=50826;TokenType2[TokenType2[\"minus\"]=minus]=\"minus\";const modulo=51723;TokenType2[TokenType2[\"modulo\"]=modulo]=\"modulo\";const star=52235;TokenType2[TokenType2[\"star\"]=star]=\"star\";const slash=53259;TokenType2[TokenType2[\"slash\"]=slash]=\"slash\";const exponent=54348;TokenType2[TokenType2[\"exponent\"]=exponent]=\"exponent\";const jsxName=55296;TokenType2[TokenType2[\"jsxName\"]=jsxName]=\"jsxName\";const jsxText=56320;TokenType2[TokenType2[\"jsxText\"]=jsxText]=\"jsxText\";const jsxEmptyText=57344;TokenType2[TokenType2[\"jsxEmptyText\"]=jsxEmptyText]=\"jsxEmptyText\";const jsxTagStart=58880;TokenType2[TokenType2[\"jsxTagStart\"]=jsxTagStart]=\"jsxTagStart\";const jsxTagEnd=59392;TokenType2[TokenType2[\"jsxTagEnd\"]=jsxTagEnd]=\"jsxTagEnd\";const typeParameterStart=60928;TokenType2[TokenType2[\"typeParameterStart\"]=typeParameterStart]=\"typeParameterStart\";const nonNullAssertion=61440;TokenType2[TokenType2[\"nonNullAssertion\"]=nonNullAssertion]=\"nonNullAssertion\";const _break=62480;TokenType2[TokenType2[\"_break\"]=_break]=\"_break\";const _case=63504;TokenType2[TokenType2[\"_case\"]=_case]=\"_case\";const _catch=64528;TokenType2[TokenType2[\"_catch\"]=_catch]=\"_catch\";const _continue=65552;TokenType2[TokenType2[\"_continue\"]=_continue]=\"_continue\";const _debugger=66576;TokenType2[TokenType2[\"_debugger\"]=_debugger]=\"_debugger\";const _default=67600;TokenType2[TokenType2[\"_default\"]=_default]=\"_default\";const _do=68624;TokenType2[TokenType2[\"_do\"]=_do]=\"_do\";const _else=69648;TokenType2[TokenType2[\"_else\"]=_else]=\"_else\";const _finally=70672;TokenType2[TokenType2[\"_finally\"]=_finally]=\"_finally\";const _for=71696;TokenType2[TokenType2[\"_for\"]=_for]=\"_for\";const _function=73232;TokenType2[TokenType2[\"_function\"]=_function]=\"_function\";const _if=73744;TokenType2[TokenType2[\"_if\"]=_if]=\"_if\";const _return=74768;TokenType2[TokenType2[\"_return\"]=_return]=\"_return\";const _switch=75792;TokenType2[TokenType2[\"_switch\"]=_switch]=\"_switch\";const _throw=77456;TokenType2[TokenType2[\"_throw\"]=_throw]=\"_throw\";const _try=77840;TokenType2[TokenType2[\"_try\"]=_try]=\"_try\";const _var=78864;TokenType2[TokenType2[\"_var\"]=_var]=\"_var\";const _let=79888;TokenType2[TokenType2[\"_let\"]=_let]=\"_let\";const _const=80912;TokenType2[TokenType2[\"_const\"]=_const]=\"_const\";const _while=81936;TokenType2[TokenType2[\"_while\"]=_while]=\"_while\";const _with=82960;TokenType2[TokenType2[\"_with\"]=_with]=\"_with\";const _new=84496;TokenType2[TokenType2[\"_new\"]=_new]=\"_new\";const _this=85520;TokenType2[TokenType2[\"_this\"]=_this]=\"_this\";const _super=86544;TokenType2[TokenType2[\"_super\"]=_super]=\"_super\";const _class=87568;TokenType2[TokenType2[\"_class\"]=_class]=\"_class\";const _extends=88080;TokenType2[TokenType2[\"_extends\"]=_extends]=\"_extends\";const _export=89104;TokenType2[TokenType2[\"_export\"]=_export]=\"_export\";const _import=90640;TokenType2[TokenType2[\"_import\"]=_import]=\"_import\";const _yield=91664;TokenType2[TokenType2[\"_yield\"]=_yield]=\"_yield\";const _null=92688;TokenType2[TokenType2[\"_null\"]=_null]=\"_null\";const _true=93712;TokenType2[TokenType2[\"_true\"]=_true]=\"_true\";const _false=94736;TokenType2[TokenType2[\"_false\"]=_false]=\"_false\";const _in=95256;TokenType2[TokenType2[\"_in\"]=_in]=\"_in\";const _instanceof=96280;TokenType2[TokenType2[\"_instanceof\"]=_instanceof]=\"_instanceof\";const _typeof=97936;TokenType2[TokenType2[\"_typeof\"]=_typeof]=\"_typeof\";const _void=98960;TokenType2[TokenType2[\"_void\"]=_void]=\"_void\";const _delete=99984;TokenType2[TokenType2[\"_delete\"]=_delete]=\"_delete\";const _async=100880;TokenType2[TokenType2[\"_async\"]=_async]=\"_async\";const _get=101904;TokenType2[TokenType2[\"_get\"]=_get]=\"_get\";const _set=102928;TokenType2[TokenType2[\"_set\"]=_set]=\"_set\";const _declare=103952;TokenType2[TokenType2[\"_declare\"]=_declare]=\"_declare\";const _readonly=104976;TokenType2[TokenType2[\"_readonly\"]=_readonly]=\"_readonly\";const _abstract=106e3;TokenType2[TokenType2[\"_abstract\"]=_abstract]=\"_abstract\";const _static=107024;TokenType2[TokenType2[\"_static\"]=_static]=\"_static\";const _public=107536;TokenType2[TokenType2[\"_public\"]=_public]=\"_public\";const _private=108560;TokenType2[TokenType2[\"_private\"]=_private]=\"_private\";const _protected=109584;TokenType2[TokenType2[\"_protected\"]=_protected]=\"_protected\";const _override=110608;TokenType2[TokenType2[\"_override\"]=_override]=\"_override\";const _as=112144;TokenType2[TokenType2[\"_as\"]=_as]=\"_as\";const _enum=113168;TokenType2[TokenType2[\"_enum\"]=_enum]=\"_enum\";const _type=114192;TokenType2[TokenType2[\"_type\"]=_type]=\"_type\";const _implements=115216;TokenType2[TokenType2[\"_implements\"]=_implements]=\"_implements\"})(TokenType||(exports.TokenType=TokenType={}));function formatTokenType(tokenType){switch(tokenType){case TokenType.num:return\"num\";case TokenType.bigint:return\"bigint\";case TokenType.decimal:return\"decimal\";case TokenType.regexp:return\"regexp\";case TokenType.string:return\"string\";case TokenType.name:return\"name\";case TokenType.eof:return\"eof\";case TokenType.bracketL:return\"[\";case TokenType.bracketR:return\"]\";case TokenType.braceL:return\"{\";case TokenType.braceBarL:return\"{|\";case TokenType.braceR:return\"}\";case TokenType.braceBarR:return\"|}\";case TokenType.parenL:return\"(\";case TokenType.parenR:return\")\";case TokenType.comma:return\",\";case TokenType.semi:return\";\";case TokenType.colon:return\":\";case TokenType.doubleColon:return\"::\";case TokenType.dot:return\".\";case TokenType.question:return\"?\";case TokenType.questionDot:return\"?.\";case TokenType.arrow:return\"=>\";case TokenType.template:return\"template\";case TokenType.ellipsis:return\"...\";case TokenType.backQuote:return\"`\";case TokenType.dollarBraceL:return\"${\";case TokenType.at:return\"@\";case TokenType.hash:return\"#\";case TokenType.eq:return\"=\";case TokenType.assign:return\"_=\";case TokenType.preIncDec:return\"++/--\";case TokenType.postIncDec:return\"++/--\";case TokenType.bang:return\"!\";case TokenType.tilde:return\"~\";case TokenType.pipeline:return\"|>\";case TokenType.nullishCoalescing:return\"??\";case TokenType.logicalOR:return\"||\";case TokenType.logicalAND:return\"&&\";case TokenType.bitwiseOR:return\"|\";case TokenType.bitwiseXOR:return\"^\";case TokenType.bitwiseAND:return\"&\";case TokenType.equality:return\"==/!=\";case TokenType.lessThan:return\"<\";case TokenType.greaterThan:return\">\";case TokenType.relationalOrEqual:return\"<=/>=\";case TokenType.bitShiftL:return\"<<\";case TokenType.bitShiftR:return\">>/>>>\";case TokenType.plus:return\"+\";case TokenType.minus:return\"-\";case TokenType.modulo:return\"%\";case TokenType.star:return\"*\";case TokenType.slash:return\"/\";case TokenType.exponent:return\"**\";case TokenType.jsxName:return\"jsxName\";case TokenType.jsxText:return\"jsxText\";case TokenType.jsxEmptyText:return\"jsxEmptyText\";case TokenType.jsxTagStart:return\"jsxTagStart\";case TokenType.jsxTagEnd:return\"jsxTagEnd\";case TokenType.typeParameterStart:return\"typeParameterStart\";case TokenType.nonNullAssertion:return\"nonNullAssertion\";case TokenType._break:return\"break\";case TokenType._case:return\"case\";case TokenType._catch:return\"catch\";case TokenType._continue:return\"continue\";case TokenType._debugger:return\"debugger\";case TokenType._default:return\"default\";case TokenType._do:return\"do\";case TokenType._else:return\"else\";case TokenType._finally:return\"finally\";case TokenType._for:return\"for\";case TokenType._function:return\"function\";case TokenType._if:return\"if\";case TokenType._return:return\"return\";case TokenType._switch:return\"switch\";case TokenType._throw:return\"throw\";case TokenType._try:return\"try\";case TokenType._var:return\"var\";case TokenType._let:return\"let\";case TokenType._const:return\"const\";case TokenType._while:return\"while\";case TokenType._with:return\"with\";case TokenType._new:return\"new\";case TokenType._this:return\"this\";case TokenType._super:return\"super\";case TokenType._class:return\"class\";case TokenType._extends:return\"extends\";case TokenType._export:return\"export\";case TokenType._import:return\"import\";case TokenType._yield:return\"yield\";case TokenType._null:return\"null\";case TokenType._true:return\"true\";case TokenType._false:return\"false\";case TokenType._in:return\"in\";case TokenType._instanceof:return\"instanceof\";case TokenType._typeof:return\"typeof\";case TokenType._void:return\"void\";case TokenType._delete:return\"delete\";case TokenType._async:return\"async\";case TokenType._get:return\"get\";case TokenType._set:return\"set\";case TokenType._declare:return\"declare\";case TokenType._readonly:return\"readonly\";case TokenType._abstract:return\"abstract\";case TokenType._static:return\"static\";case TokenType._public:return\"public\";case TokenType._private:return\"private\";case TokenType._protected:return\"protected\";case TokenType._override:return\"override\";case TokenType._as:return\"as\";case TokenType._enum:return\"enum\";case TokenType._type:return\"type\";case TokenType._implements:return\"implements\";default:return\"\"}}__name(formatTokenType,\"formatTokenType\");exports.formatTokenType=formatTokenType;\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":["TokenType"],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/sucrase@3.32.0/node_modules/sucrase/dist/parser/tokenizer/types.js"],"sourcesContent":["\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// Generated file, do not edit! Run \"yarn generate\" to re-generate this file.\n/* istanbul ignore file */\n/**\n * Enum of all token types, with bit fields to signify meaningful properties.\n */\nvar TokenType; (function (TokenType) {\n  // Precedence 0 means not an operator; otherwise it is a positive number up to 12.\n  const PRECEDENCE_MASK = 0xf; TokenType[TokenType[\"PRECEDENCE_MASK\"] = PRECEDENCE_MASK] = \"PRECEDENCE_MASK\";\n  const IS_KEYWORD = 1 << 4; TokenType[TokenType[\"IS_KEYWORD\"] = IS_KEYWORD] = \"IS_KEYWORD\";\n  const IS_ASSIGN = 1 << 5; TokenType[TokenType[\"IS_ASSIGN\"] = IS_ASSIGN] = \"IS_ASSIGN\";\n  const IS_RIGHT_ASSOCIATIVE = 1 << 6; TokenType[TokenType[\"IS_RIGHT_ASSOCIATIVE\"] = IS_RIGHT_ASSOCIATIVE] = \"IS_RIGHT_ASSOCIATIVE\";\n  const IS_PREFIX = 1 << 7; TokenType[TokenType[\"IS_PREFIX\"] = IS_PREFIX] = \"IS_PREFIX\";\n  const IS_POSTFIX = 1 << 8; TokenType[TokenType[\"IS_POSTFIX\"] = IS_POSTFIX] = \"IS_POSTFIX\";\n  const IS_EXPRESSION_START = 1 << 9; TokenType[TokenType[\"IS_EXPRESSION_START\"] = IS_EXPRESSION_START] = \"IS_EXPRESSION_START\";\n\n  const num = 512; TokenType[TokenType[\"num\"] = num] = \"num\"; // num startsExpr\n  const bigint = 1536; TokenType[TokenType[\"bigint\"] = bigint] = \"bigint\"; // bigint startsExpr\n  const decimal = 2560; TokenType[TokenType[\"decimal\"] = decimal] = \"decimal\"; // decimal startsExpr\n  const regexp = 3584; TokenType[TokenType[\"regexp\"] = regexp] = \"regexp\"; // regexp startsExpr\n  const string = 4608; TokenType[TokenType[\"string\"] = string] = \"string\"; // string startsExpr\n  const name = 5632; TokenType[TokenType[\"name\"] = name] = \"name\"; // name startsExpr\n  const eof = 6144; TokenType[TokenType[\"eof\"] = eof] = \"eof\"; // eof\n  const bracketL = 7680; TokenType[TokenType[\"bracketL\"] = bracketL] = \"bracketL\"; // [ startsExpr\n  const bracketR = 8192; TokenType[TokenType[\"bracketR\"] = bracketR] = \"bracketR\"; // ]\n  const braceL = 9728; TokenType[TokenType[\"braceL\"] = braceL] = \"braceL\"; // { startsExpr\n  const braceBarL = 10752; TokenType[TokenType[\"braceBarL\"] = braceBarL] = \"braceBarL\"; // {| startsExpr\n  const braceR = 11264; TokenType[TokenType[\"braceR\"] = braceR] = \"braceR\"; // }\n  const braceBarR = 12288; TokenType[TokenType[\"braceBarR\"] = braceBarR] = \"braceBarR\"; // |}\n  const parenL = 13824; TokenType[TokenType[\"parenL\"] = parenL] = \"parenL\"; // ( startsExpr\n  const parenR = 14336; TokenType[TokenType[\"parenR\"] = parenR] = \"parenR\"; // )\n  const comma = 15360; TokenType[TokenType[\"comma\"] = comma] = \"comma\"; // ,\n  const semi = 16384; TokenType[TokenType[\"semi\"] = semi] = \"semi\"; // ;\n  const colon = 17408; TokenType[TokenType[\"colon\"] = colon] = \"colon\"; // :\n  const doubleColon = 18432; TokenType[TokenType[\"doubleColon\"] = doubleColon] = \"doubleColon\"; // ::\n  const dot = 19456; TokenType[TokenType[\"dot\"] = dot] = \"dot\"; // .\n  const question = 20480; TokenType[TokenType[\"question\"] = question] = \"question\"; // ?\n  const questionDot = 21504; TokenType[TokenType[\"questionDot\"] = questionDot] = \"questionDot\"; // ?.\n  const arrow = 22528; TokenType[TokenType[\"arrow\"] = arrow] = \"arrow\"; // =>\n  const template = 23552; TokenType[TokenType[\"template\"] = template] = \"template\"; // template\n  const ellipsis = 24576; TokenType[TokenType[\"ellipsis\"] = ellipsis] = \"ellipsis\"; // ...\n  const backQuote = 25600; TokenType[TokenType[\"backQuote\"] = backQuote] = \"backQuote\"; // `\n  const dollarBraceL = 27136; TokenType[TokenType[\"dollarBraceL\"] = dollarBraceL] = \"dollarBraceL\"; // ${ startsExpr\n  const at = 27648; TokenType[TokenType[\"at\"] = at] = \"at\"; // @\n  const hash = 29184; TokenType[TokenType[\"hash\"] = hash] = \"hash\"; // # startsExpr\n  const eq = 29728; TokenType[TokenType[\"eq\"] = eq] = \"eq\"; // = isAssign\n  const assign = 30752; TokenType[TokenType[\"assign\"] = assign] = \"assign\"; // _= isAssign\n  const preIncDec = 32640; TokenType[TokenType[\"preIncDec\"] = preIncDec] = \"preIncDec\"; // ++/-- prefix postfix startsExpr\n  const postIncDec = 33664; TokenType[TokenType[\"postIncDec\"] = postIncDec] = \"postIncDec\"; // ++/-- prefix postfix startsExpr\n  const bang = 34432; TokenType[TokenType[\"bang\"] = bang] = \"bang\"; // ! prefix startsExpr\n  const tilde = 35456; TokenType[TokenType[\"tilde\"] = tilde] = \"tilde\"; // ~ prefix startsExpr\n  const pipeline = 35841; TokenType[TokenType[\"pipeline\"] = pipeline] = \"pipeline\"; // |> prec:1\n  const nullishCoalescing = 36866; TokenType[TokenType[\"nullishCoalescing\"] = nullishCoalescing] = \"nullishCoalescing\"; // ?? prec:2\n  const logicalOR = 37890; TokenType[TokenType[\"logicalOR\"] = logicalOR] = \"logicalOR\"; // || prec:2\n  const logicalAND = 38915; TokenType[TokenType[\"logicalAND\"] = logicalAND] = \"logicalAND\"; // && prec:3\n  const bitwiseOR = 39940; TokenType[TokenType[\"bitwiseOR\"] = bitwiseOR] = \"bitwiseOR\"; // | prec:4\n  const bitwiseXOR = 40965; TokenType[TokenType[\"bitwiseXOR\"] = bitwiseXOR] = \"bitwiseXOR\"; // ^ prec:5\n  const bitwiseAND = 41990; TokenType[TokenType[\"bitwiseAND\"] = bitwiseAND] = \"bitwiseAND\"; // & prec:6\n  const equality = 43015; TokenType[TokenType[\"equality\"] = equality] = \"equality\"; // ==/!= prec:7\n  const lessThan = 44040; TokenType[TokenType[\"lessThan\"] = lessThan] = \"lessThan\"; // < prec:8\n  const greaterThan = 45064; TokenType[TokenType[\"greaterThan\"] = greaterThan] = \"greaterThan\"; // > prec:8\n  const relationalOrEqual = 46088; TokenType[TokenType[\"relationalOrEqual\"] = relationalOrEqual] = \"relationalOrEqual\"; // <=/>= prec:8\n  const bitShiftL = 47113; TokenType[TokenType[\"bitShiftL\"] = bitShiftL] = \"bitShiftL\"; // << prec:9\n  const bitShiftR = 48137; TokenType[TokenType[\"bitShiftR\"] = bitShiftR] = \"bitShiftR\"; // >>/>>> prec:9\n  const plus = 49802; TokenType[TokenType[\"plus\"] = plus] = \"plus\"; // + prec:10 prefix startsExpr\n  const minus = 50826; TokenType[TokenType[\"minus\"] = minus] = \"minus\"; // - prec:10 prefix startsExpr\n  const modulo = 51723; TokenType[TokenType[\"modulo\"] = modulo] = \"modulo\"; // % prec:11 startsExpr\n  const star = 52235; TokenType[TokenType[\"star\"] = star] = \"star\"; // * prec:11\n  const slash = 53259; TokenType[TokenType[\"slash\"] = slash] = \"slash\"; // / prec:11\n  const exponent = 54348; TokenType[TokenType[\"exponent\"] = exponent] = \"exponent\"; // ** prec:12 rightAssociative\n  const jsxName = 55296; TokenType[TokenType[\"jsxName\"] = jsxName] = \"jsxName\"; // jsxName\n  const jsxText = 56320; TokenType[TokenType[\"jsxText\"] = jsxText] = \"jsxText\"; // jsxText\n  const jsxEmptyText = 57344; TokenType[TokenType[\"jsxEmptyText\"] = jsxEmptyText] = \"jsxEmptyText\"; // jsxEmptyText\n  const jsxTagStart = 58880; TokenType[TokenType[\"jsxTagStart\"] = jsxTagStart] = \"jsxTagStart\"; // jsxTagStart startsExpr\n  const jsxTagEnd = 59392; TokenType[TokenType[\"jsxTagEnd\"] = jsxTagEnd] = \"jsxTagEnd\"; // jsxTagEnd\n  const typeParameterStart = 60928; TokenType[TokenType[\"typeParameterStart\"] = typeParameterStart] = \"typeParameterStart\"; // typeParameterStart startsExpr\n  const nonNullAssertion = 61440; TokenType[TokenType[\"nonNullAssertion\"] = nonNullAssertion] = \"nonNullAssertion\"; // nonNullAssertion\n  const _break = 62480; TokenType[TokenType[\"_break\"] = _break] = \"_break\"; // break keyword\n  const _case = 63504; TokenType[TokenType[\"_case\"] = _case] = \"_case\"; // case keyword\n  const _catch = 64528; TokenType[TokenType[\"_catch\"] = _catch] = \"_catch\"; // catch keyword\n  const _continue = 65552; TokenType[TokenType[\"_continue\"] = _continue] = \"_continue\"; // continue keyword\n  const _debugger = 66576; TokenType[TokenType[\"_debugger\"] = _debugger] = \"_debugger\"; // debugger keyword\n  const _default = 67600; TokenType[TokenType[\"_default\"] = _default] = \"_default\"; // default keyword\n  const _do = 68624; TokenType[TokenType[\"_do\"] = _do] = \"_do\"; // do keyword\n  const _else = 69648; TokenType[TokenType[\"_else\"] = _else] = \"_else\"; // else keyword\n  const _finally = 70672; TokenType[TokenType[\"_finally\"] = _finally] = \"_finally\"; // finally keyword\n  const _for = 71696; TokenType[TokenType[\"_for\"] = _for] = \"_for\"; // for keyword\n  const _function = 73232; TokenType[TokenType[\"_function\"] = _function] = \"_function\"; // function keyword startsExpr\n  const _if = 73744; TokenType[TokenType[\"_if\"] = _if] = \"_if\"; // if keyword\n  const _return = 74768; TokenType[TokenType[\"_return\"] = _return] = \"_return\"; // return keyword\n  const _switch = 75792; TokenType[TokenType[\"_switch\"] = _switch] = \"_switch\"; // switch keyword\n  const _throw = 77456; TokenType[TokenType[\"_throw\"] = _throw] = \"_throw\"; // throw keyword prefix startsExpr\n  const _try = 77840; TokenType[TokenType[\"_try\"] = _try] = \"_try\"; // try keyword\n  const _var = 78864; TokenType[TokenType[\"_var\"] = _var] = \"_var\"; // var keyword\n  const _let = 79888; TokenType[TokenType[\"_let\"] = _let] = \"_let\"; // let keyword\n  const _const = 80912; TokenType[TokenType[\"_const\"] = _const] = \"_const\"; // const keyword\n  const _while = 81936; TokenType[TokenType[\"_while\"] = _while] = \"_while\"; // while keyword\n  const _with = 82960; TokenType[TokenType[\"_with\"] = _with] = \"_with\"; // with keyword\n  const _new = 84496; TokenType[TokenType[\"_new\"] = _new] = \"_new\"; // new keyword startsExpr\n  const _this = 85520; TokenType[TokenType[\"_this\"] = _this] = \"_this\"; // this keyword startsExpr\n  const _super = 86544; TokenType[TokenType[\"_super\"] = _super] = \"_super\"; // super keyword startsExpr\n  const _class = 87568; TokenType[TokenType[\"_class\"] = _class] = \"_class\"; // class keyword startsExpr\n  const _extends = 88080; TokenType[TokenType[\"_extends\"] = _extends] = \"_extends\"; // extends keyword\n  const _export = 89104; TokenType[TokenType[\"_export\"] = _export] = \"_export\"; // export keyword\n  const _import = 90640; TokenType[TokenType[\"_import\"] = _import] = \"_import\"; // import keyword startsExpr\n  const _yield = 91664; TokenType[TokenType[\"_yield\"] = _yield] = \"_yield\"; // yield keyword startsExpr\n  const _null = 92688; TokenType[TokenType[\"_null\"] = _null] = \"_null\"; // null keyword startsExpr\n  const _true = 93712; TokenType[TokenType[\"_true\"] = _true] = \"_true\"; // true keyword startsExpr\n  const _false = 94736; TokenType[TokenType[\"_false\"] = _false] = \"_false\"; // false keyword startsExpr\n  const _in = 95256; TokenType[TokenType[\"_in\"] = _in] = \"_in\"; // in prec:8 keyword\n  const _instanceof = 96280; TokenType[TokenType[\"_instanceof\"] = _instanceof] = \"_instanceof\"; // instanceof prec:8 keyword\n  const _typeof = 97936; TokenType[TokenType[\"_typeof\"] = _typeof] = \"_typeof\"; // typeof keyword prefix startsExpr\n  const _void = 98960; TokenType[TokenType[\"_void\"] = _void] = \"_void\"; // void keyword prefix startsExpr\n  const _delete = 99984; TokenType[TokenType[\"_delete\"] = _delete] = \"_delete\"; // delete keyword prefix startsExpr\n  const _async = 100880; TokenType[TokenType[\"_async\"] = _async] = \"_async\"; // async keyword startsExpr\n  const _get = 101904; TokenType[TokenType[\"_get\"] = _get] = \"_get\"; // get keyword startsExpr\n  const _set = 102928; TokenType[TokenType[\"_set\"] = _set] = \"_set\"; // set keyword startsExpr\n  const _declare = 103952; TokenType[TokenType[\"_declare\"] = _declare] = \"_declare\"; // declare keyword startsExpr\n  const _readonly = 104976; TokenType[TokenType[\"_readonly\"] = _readonly] = \"_readonly\"; // readonly keyword startsExpr\n  const _abstract = 106000; TokenType[TokenType[\"_abstract\"] = _abstract] = \"_abstract\"; // abstract keyword startsExpr\n  const _static = 107024; TokenType[TokenType[\"_static\"] = _static] = \"_static\"; // static keyword startsExpr\n  const _public = 107536; TokenType[TokenType[\"_public\"] = _public] = \"_public\"; // public keyword\n  const _private = 108560; TokenType[TokenType[\"_private\"] = _private] = \"_private\"; // private keyword\n  const _protected = 109584; TokenType[TokenType[\"_protected\"] = _protected] = \"_protected\"; // protected keyword\n  const _override = 110608; TokenType[TokenType[\"_override\"] = _override] = \"_override\"; // override keyword\n  const _as = 112144; TokenType[TokenType[\"_as\"] = _as] = \"_as\"; // as keyword startsExpr\n  const _enum = 113168; TokenType[TokenType[\"_enum\"] = _enum] = \"_enum\"; // enum keyword startsExpr\n  const _type = 114192; TokenType[TokenType[\"_type\"] = _type] = \"_type\"; // type keyword startsExpr\n  const _implements = 115216; TokenType[TokenType[\"_implements\"] = _implements] = \"_implements\"; // implements keyword startsExpr\n})(TokenType || (exports.TokenType = TokenType = {}));\n function formatTokenType(tokenType) {\n  switch (tokenType) {\n    case TokenType.num:\n      return \"num\";\n    case TokenType.bigint:\n      return \"bigint\";\n    case TokenType.decimal:\n      return \"decimal\";\n    case TokenType.regexp:\n      return \"regexp\";\n    case TokenType.string:\n      return \"string\";\n    case TokenType.name:\n      return \"name\";\n    case TokenType.eof:\n      return \"eof\";\n    case TokenType.bracketL:\n      return \"[\";\n    case TokenType.bracketR:\n      return \"]\";\n    case TokenType.braceL:\n      return \"{\";\n    case TokenType.braceBarL:\n      return \"{|\";\n    case TokenType.braceR:\n      return \"}\";\n    case TokenType.braceBarR:\n      return \"|}\";\n    case TokenType.parenL:\n      return \"(\";\n    case TokenType.parenR:\n      return \")\";\n    case TokenType.comma:\n      return \",\";\n    case TokenType.semi:\n      return \";\";\n    case TokenType.colon:\n      return \":\";\n    case TokenType.doubleColon:\n      return \"::\";\n    case TokenType.dot:\n      return \".\";\n    case TokenType.question:\n      return \"?\";\n    case TokenType.questionDot:\n      return \"?.\";\n    case TokenType.arrow:\n      return \"=>\";\n    case TokenType.template:\n      return \"template\";\n    case TokenType.ellipsis:\n      return \"...\";\n    case TokenType.backQuote:\n      return \"`\";\n    case TokenType.dollarBraceL:\n      return \"${\";\n    case TokenType.at:\n      return \"@\";\n    case TokenType.hash:\n      return \"#\";\n    case TokenType.eq:\n      return \"=\";\n    case TokenType.assign:\n      return \"_=\";\n    case TokenType.preIncDec:\n      return \"++/--\";\n    case TokenType.postIncDec:\n      return \"++/--\";\n    case TokenType.bang:\n      return \"!\";\n    case TokenType.tilde:\n      return \"~\";\n    case TokenType.pipeline:\n      return \"|>\";\n    case TokenType.nullishCoalescing:\n      return \"??\";\n    case TokenType.logicalOR:\n      return \"||\";\n    case TokenType.logicalAND:\n      return \"&&\";\n    case TokenType.bitwiseOR:\n      return \"|\";\n    case TokenType.bitwiseXOR:\n      return \"^\";\n    case TokenType.bitwiseAND:\n      return \"&\";\n    case TokenType.equality:\n      return \"==/!=\";\n    case TokenType.lessThan:\n      return \"<\";\n    case TokenType.greaterThan:\n      return \">\";\n    case TokenType.relationalOrEqual:\n      return \"<=/>=\";\n    case TokenType.bitShiftL:\n      return \"<<\";\n    case TokenType.bitShiftR:\n      return \">>/>>>\";\n    case TokenType.plus:\n      return \"+\";\n    case TokenType.minus:\n      return \"-\";\n    case TokenType.modulo:\n      return \"%\";\n    case TokenType.star:\n      return \"*\";\n    case TokenType.slash:\n      return \"/\";\n    case TokenType.exponent:\n      return \"**\";\n    case TokenType.jsxName:\n      return \"jsxName\";\n    case TokenType.jsxText:\n      return \"jsxText\";\n    case TokenType.jsxEmptyText:\n      return \"jsxEmptyText\";\n    case TokenType.jsxTagStart:\n      return \"jsxTagStart\";\n    case TokenType.jsxTagEnd:\n      return \"jsxTagEnd\";\n    case TokenType.typeParameterStart:\n      return \"typeParameterStart\";\n    case TokenType.nonNullAssertion:\n      return \"nonNullAssertion\";\n    case TokenType._break:\n      return \"break\";\n    case TokenType._case:\n      return \"case\";\n    case TokenType._catch:\n      return \"catch\";\n    case TokenType._continue:\n      return \"continue\";\n    case TokenType._debugger:\n      return \"debugger\";\n    case TokenType._default:\n      return \"default\";\n    case TokenType._do:\n      return \"do\";\n    case TokenType._else:\n      return \"else\";\n    case TokenType._finally:\n      return \"finally\";\n    case TokenType._for:\n      return \"for\";\n    case TokenType._function:\n      return \"function\";\n    case TokenType._if:\n      return \"if\";\n    case TokenType._return:\n      return \"return\";\n    case TokenType._switch:\n      return \"switch\";\n    case TokenType._throw:\n      return \"throw\";\n    case TokenType._try:\n      return \"try\";\n    case TokenType._var:\n      return \"var\";\n    case TokenType._let:\n      return \"let\";\n    case TokenType._const:\n      return \"const\";\n    case TokenType._while:\n      return \"while\";\n    case TokenType._with:\n      return \"with\";\n    case TokenType._new:\n      return \"new\";\n    case TokenType._this:\n      return \"this\";\n    case TokenType._super:\n      return \"super\";\n    case TokenType._class:\n      return \"class\";\n    case TokenType._extends:\n      return \"extends\";\n    case TokenType._export:\n      return \"export\";\n    case TokenType._import:\n      return \"import\";\n    case TokenType._yield:\n      return \"yield\";\n    case TokenType._null:\n      return \"null\";\n    case TokenType._true:\n      return \"true\";\n    case TokenType._false:\n      return \"false\";\n    case TokenType._in:\n      return \"in\";\n    case TokenType._instanceof:\n      return \"instanceof\";\n    case TokenType._typeof:\n      return \"typeof\";\n    case TokenType._void:\n      return \"void\";\n    case TokenType._delete:\n      return \"delete\";\n    case TokenType._async:\n      return \"async\";\n    case TokenType._get:\n      return \"get\";\n    case TokenType._set:\n      return \"set\";\n    case TokenType._declare:\n      return \"declare\";\n    case TokenType._readonly:\n      return \"readonly\";\n    case TokenType._abstract:\n      return \"abstract\";\n    case TokenType._static:\n      return \"static\";\n    case TokenType._public:\n      return \"public\";\n    case TokenType._private:\n      return \"private\";\n    case TokenType._protected:\n      return \"protected\";\n    case TokenType._override:\n      return \"override\";\n    case TokenType._as:\n      return \"as\";\n    case TokenType._enum:\n      return \"enum\";\n    case TokenType._type:\n      return \"type\";\n    case TokenType._implements:\n      return \"implements\";\n    default:\n      return \"\";\n  }\n} exports.formatTokenType = formatTokenType;\n"]}}