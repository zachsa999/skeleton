{"code":"(()=>{\nvar __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});function stringifyNode(node,custom){var type=node.type;var value=node.value;var buf;var customResult;if(custom&&(customResult=custom(node))!==void 0){return customResult}else if(type===\"word\"||type===\"space\"){return value}else if(type===\"string\"){buf=node.quote||\"\";return buf+value+(node.unclosed?\"\":buf)}else if(type===\"comment\"){return\"/*\"+value+(node.unclosed?\"\":\"*/\")}else if(type===\"div\"){return(node.before||\"\")+value+(node.after||\"\")}else if(Array.isArray(node.nodes)){buf=stringify(node.nodes,custom);if(type!==\"function\"){return buf}return value+\"(\"+(node.before||\"\")+buf+(node.after||\"\")+(node.unclosed?\"\":\")\")}return value}__name(stringifyNode,\"stringifyNode\");function stringify(nodes,custom){var result,i;if(Array.isArray(nodes)){result=\"\";for(i=nodes.length-1;~i;i-=1){result=stringifyNode(nodes[i],custom)+result}return result}return stringifyNode(nodes,custom)}__name(stringify,\"stringify\");module.exports=stringify;\n})()\n","warnings":[],"map":{"version":3,"mappings":";kHAAA,SAAS,cAAc,KAAM,OAAQ,CACnC,IAAI,KAAO,KAAK,KAChB,IAAI,MAAQ,KAAK,MACjB,IAAI,IACJ,IAAI,aAEJ,GAAI,SAAW,aAAe,OAAO,IAAI,KAAO,OAAW,CACzD,OAAO,YACT,SAAW,OAAS,QAAU,OAAS,QAAS,CAC9C,OAAO,KACT,SAAW,OAAS,SAAU,CAC5B,IAAM,KAAK,OAAS,GACpB,OAAO,IAAM,OAAS,KAAK,SAAW,GAAK,IAC7C,SAAW,OAAS,UAAW,CAC7B,MAAO,KAAO,OAAS,KAAK,SAAW,GAAK,KAC9C,SAAW,OAAS,MAAO,CACzB,OAAQ,KAAK,QAAU,IAAM,OAAS,KAAK,OAAS,GACtD,SAAW,MAAM,QAAQ,KAAK,KAAK,EAAG,CACpC,IAAM,UAAU,KAAK,MAAO,MAAM,EAClC,GAAI,OAAS,WAAY,CACvB,OAAO,GACT,CACA,OACE,MACA,KACC,KAAK,QAAU,IAChB,KACC,KAAK,OAAS,KACd,KAAK,SAAW,GAAK,IAE1B,CACA,OAAO,KACT,CAhCS,sCAkCT,SAAS,UAAU,MAAO,OAAQ,CAChC,IAAI,OAAQ,EAEZ,GAAI,MAAM,QAAQ,KAAK,EAAG,CACxB,OAAS,GACT,IAAK,EAAI,MAAM,OAAS,EAAG,CAAC,EAAG,GAAK,EAAG,CACrC,OAAS,cAAc,MAAM,CAAC,EAAG,MAAM,EAAI,MAC7C,CACA,OAAO,MACT,CACA,OAAO,cAAc,MAAO,MAAM,CACpC,CAXS,8BAaT,OAAO,QAAU","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/stringify.js"],"sourcesContent":["function stringifyNode(node, custom) {\n  var type = node.type;\n  var value = node.value;\n  var buf;\n  var customResult;\n\n  if (custom && (customResult = custom(node)) !== undefined) {\n    return customResult;\n  } else if (type === \"word\" || type === \"space\") {\n    return value;\n  } else if (type === \"string\") {\n    buf = node.quote || \"\";\n    return buf + value + (node.unclosed ? \"\" : buf);\n  } else if (type === \"comment\") {\n    return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n  } else if (type === \"div\") {\n    return (node.before || \"\") + value + (node.after || \"\");\n  } else if (Array.isArray(node.nodes)) {\n    buf = stringify(node.nodes, custom);\n    if (type !== \"function\") {\n      return buf;\n    }\n    return (\n      value +\n      \"(\" +\n      (node.before || \"\") +\n      buf +\n      (node.after || \"\") +\n      (node.unclosed ? \"\" : \")\")\n    );\n  }\n  return value;\n}\n\nfunction stringify(nodes, custom) {\n  var result, i;\n\n  if (Array.isArray(nodes)) {\n    result = \"\";\n    for (i = nodes.length - 1; ~i; i -= 1) {\n      result = stringifyNode(nodes[i], custom) + result;\n    }\n    return result;\n  }\n  return stringifyNode(nodes, custom);\n}\n\nmodule.exports = stringify;\n"]}}