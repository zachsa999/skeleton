{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}__name(_interopRequireDefault,\"_interopRequireDefault\");var _getIdentifierNames=require(\"./util/getIdentifierNames\");var _getIdentifierNames2=_interopRequireDefault(_getIdentifierNames);class NameManager{__init(){this.usedNames=new Set}constructor(code,tokens){;NameManager.prototype.__init.call(this);this.usedNames=new Set(_getIdentifierNames2.default.call(void 0,code,tokens))}claimFreeName(name){const newName=this.findFreeName(name);this.usedNames.add(newName);return newName}findFreeName(name){if(!this.usedNames.has(name)){return name}let suffixNum=2;while(this.usedNames.has(name+String(suffixNum))){suffixNum++}return name+String(suffixNum)}}__name(NameManager,\"NameManager\");exports.default=NameManager;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAAa,OAAO,eAAe,QAAS,aAAc,CAAC,MAAO,IAAI,CAAC,EAAG,SAAS,uBAAuB,IAAK,CAAE,OAAO,KAAO,IAAI,WAAa,IAAM,CAAE,QAAS,GAAI,CAAG,CAArF,wDACnF,IAAI,oBAAsB,QAAQ,2BAA2B,EAAG,IAAI,qBAAuB,uBAAuB,mBAAmB,EAEpI,MAAM,WAAY,CACf,QAAS,CAAC,KAAK,UAAY,IAAI,GAAK,CAEtC,YAAY,KAAM,OAAQ,CAAC,CAAC,YAAY,UAAU,OAAO,KAAK,IAAI,EAChE,KAAK,UAAY,IAAI,IAAI,qBAAqB,QAAQ,KAAK,OAAQ,KAAM,MAAM,CAAC,CAClF,CAEA,cAAc,KAAM,CAClB,MAAM,QAAU,KAAK,aAAa,IAAI,EACtC,KAAK,UAAU,IAAI,OAAO,EAC1B,OAAO,OACT,CAEA,aAAa,KAAM,CACjB,GAAI,CAAC,KAAK,UAAU,IAAI,IAAI,EAAG,CAC7B,OAAO,IACT,CACA,IAAI,UAAY,EAChB,MAAO,KAAK,UAAU,IAAI,KAAO,OAAO,SAAS,CAAC,EAAG,CACnD,WACF,CACA,OAAO,KAAO,OAAO,SAAS,CAChC,CACF,CAvBO,kCAuBL,QAAQ,QAAU","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/sucrase@3.32.0/node_modules/sucrase/dist/NameManager.js"],"sourcesContent":["\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nvar _getIdentifierNames = require('./util/getIdentifierNames'); var _getIdentifierNames2 = _interopRequireDefault(_getIdentifierNames);\n\n class NameManager {\n    __init() {this.usedNames = new Set()}\n\n  constructor(code, tokens) {;NameManager.prototype.__init.call(this);\n    this.usedNames = new Set(_getIdentifierNames2.default.call(void 0, code, tokens));\n  }\n\n  claimFreeName(name) {\n    const newName = this.findFreeName(name);\n    this.usedNames.add(newName);\n    return newName;\n  }\n\n  findFreeName(name) {\n    if (!this.usedNames.has(name)) {\n      return name;\n    }\n    let suffixNum = 2;\n    while (this.usedNames.has(name + String(suffixNum))) {\n      suffixNum++;\n    }\n    return name + String(suffixNum);\n  }\n} exports.default = NameManager;\n"]}}