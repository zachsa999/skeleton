{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});exports.removeDuplicateSlashes=exports.transform=void 0;const DOUBLE_SLASH_RE=/(?!^)\\/{2,}/g;function transform(patterns){return patterns.map(pattern=>removeDuplicateSlashes(pattern))}__name(transform,\"transform\");exports.transform=transform;function removeDuplicateSlashes(pattern){return pattern.replace(DOUBLE_SLASH_RE,\"/\")}__name(removeDuplicateSlashes,\"removeDuplicateSlashes\");exports.removeDuplicateSlashes=removeDuplicateSlashes;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CAAE,MAAO,IAAK,CAAC,EAC5D,QAAQ,uBAAyB,QAAQ,UAAY,OAMrD,MAAM,gBAAkB,eACxB,SAAS,UAAU,SAAU,CACzB,OAAO,SAAS,IAAK,SAAY,uBAAuB,OAAO,CAAC,CACpE,CAFS,8BAGT,QAAQ,UAAY,UAKpB,SAAS,uBAAuB,QAAS,CACrC,OAAO,QAAQ,QAAQ,gBAAiB,GAAG,CAC/C,CAFS,wDAGT,QAAQ,uBAAyB","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/managers/patterns.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.removeDuplicateSlashes = exports.transform = void 0;\r\n/**\r\n * Matches a sequence of two or more consecutive slashes, excluding the first two slashes at the beginning of the string.\r\n * The latter is due to the presence of the device path at the beginning of the UNC path.\r\n * @todo rewrite to negative lookbehind with the next major release.\r\n */\r\nconst DOUBLE_SLASH_RE = /(?!^)\\/{2,}/g;\r\nfunction transform(patterns) {\r\n    return patterns.map((pattern) => removeDuplicateSlashes(pattern));\r\n}\r\nexports.transform = transform;\r\n/**\r\n * This package only works with forward slashes as a path separator.\r\n * Because of this, we cannot use the standard `path.normalize` method, because on Windows platform it will use of backslashes.\r\n */\r\nfunction removeDuplicateSlashes(pattern) {\r\n    return pattern.replace(DOUBLE_SLASH_RE, '/');\r\n}\r\nexports.removeDuplicateSlashes = removeDuplicateSlashes;\r\n"]}}