{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const path=require(\"path\");let sugarss;module.exports=__name(function processContent(result,content,filename,options,postcss){const{plugins}=options;const ext=path.extname(filename);const parserList=[];if(ext===\".sss\"){if(!sugarss){try{sugarss=require(\"sugarss\")}catch{}}if(sugarss)return runPostcss(postcss,content,filename,plugins,[sugarss])}if(result.opts.syntax?.parse){parserList.push(result.opts.syntax.parse)}if(result.opts.parser)parserList.push(result.opts.parser);parserList.push(null);return runPostcss(postcss,content,filename,plugins,parserList)},\"processContent\");function runPostcss(postcss,content,filename,plugins,parsers,index){if(!index)index=0;return postcss(plugins).process(content,{from:filename,parser:parsers[index]}).catch(err=>{index++;if(index===parsers.length)throw err;return runPostcss(postcss,content,filename,plugins,parsers,index)})}__name(runPostcss,\"runPostcss\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAGA,MAAM,KAAO,QAAQ,MAAM,EAG3B,IAAI,QAEJ,OAAO,QAAU,gBAAS,eACxB,OACA,QACA,SACA,QACA,QACA,CACA,KAAM,CAAE,OAAQ,EAAI,QACpB,MAAM,IAAM,KAAK,QAAQ,QAAQ,EAEjC,MAAM,WAAa,CAAC,EAGpB,GAAI,MAAQ,OAAQ,CAClB,GAAI,CAAC,QAAS,CACZ,GAAI,CACF,QAAU,QAAQ,SAAS,CAC7B,MAAE,CAAO,CACX,CACA,GAAI,QACF,OAAO,WAAW,QAAS,QAAS,SAAU,QAAS,CAAC,OAAO,CAAC,CACpE,CAGA,GAAI,OAAO,KAAK,QAAQ,MAAO,CAC7B,WAAW,KAAK,OAAO,KAAK,OAAO,KAAK,CAC1C,CAGA,GAAI,OAAO,KAAK,OAAQ,WAAW,KAAK,OAAO,KAAK,MAAM,EAE1D,WAAW,KAAK,IAAI,EAEpB,OAAO,WAAW,QAAS,QAAS,SAAU,QAAS,UAAU,CACnE,EAlCiB,kBAoCjB,SAAS,WAAW,QAAS,QAAS,SAAU,QAAS,QAAS,MAAO,CACvE,GAAI,CAAC,MAAO,MAAQ,EACpB,OAAO,QAAQ,OAAO,EACnB,QAAQ,QAAS,CAChB,KAAM,SACN,OAAQ,QAAQ,KAAK,CACvB,CAAC,EACA,MAAM,KAAO,CAEZ,QAEA,GAAI,QAAU,QAAQ,OAAQ,MAAM,IACpC,OAAO,WAAW,QAAS,QAAS,SAAU,QAAS,QAAS,KAAK,CACvE,CAAC,CACL,CAdS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/postcss-import@15.1.0_postcss@8.4.24/node_modules/postcss-import/lib/process-content.js"],"sourcesContent":["\"use strict\"\n\n// builtin tooling\nconst path = require(\"path\")\n\n// placeholder tooling\nlet sugarss\n\nmodule.exports = function processContent(\n  result,\n  content,\n  filename,\n  options,\n  postcss\n) {\n  const { plugins } = options\n  const ext = path.extname(filename)\n\n  const parserList = []\n\n  // SugarSS support:\n  if (ext === \".sss\") {\n    if (!sugarss) {\n      try {\n        sugarss = require(\"sugarss\")\n      } catch {} // Ignore\n    }\n    if (sugarss)\n      return runPostcss(postcss, content, filename, plugins, [sugarss])\n  }\n\n  // Syntax support:\n  if (result.opts.syntax?.parse) {\n    parserList.push(result.opts.syntax.parse)\n  }\n\n  // Parser support:\n  if (result.opts.parser) parserList.push(result.opts.parser)\n  // Try the default as a last resort:\n  parserList.push(null)\n\n  return runPostcss(postcss, content, filename, plugins, parserList)\n}\n\nfunction runPostcss(postcss, content, filename, plugins, parsers, index) {\n  if (!index) index = 0\n  return postcss(plugins)\n    .process(content, {\n      from: filename,\n      parser: parsers[index],\n    })\n    .catch(err => {\n      // If there's an error, try the next parser\n      index++\n      // If there are no parsers left, throw it\n      if (index === parsers.length) throw err\n      return runPostcss(postcss, content, filename, plugins, parsers, index)\n    })\n}\n"]}}