{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const utils=require(\"./utils\");const{CHAR_ASTERISK,CHAR_AT,CHAR_BACKWARD_SLASH,CHAR_COMMA,CHAR_DOT,CHAR_EXCLAMATION_MARK,CHAR_FORWARD_SLASH,CHAR_LEFT_CURLY_BRACE,CHAR_LEFT_PARENTHESES,CHAR_LEFT_SQUARE_BRACKET,CHAR_PLUS,CHAR_QUESTION_MARK,CHAR_RIGHT_CURLY_BRACE,CHAR_RIGHT_PARENTHESES,CHAR_RIGHT_SQUARE_BRACKET}=require(\"./constants\");const isPathSeparator=__name(code=>{return code===CHAR_FORWARD_SLASH||code===CHAR_BACKWARD_SLASH},\"isPathSeparator\");const depth=__name(token=>{if(token.isPrefix!==true){token.depth=token.isGlobstar?Infinity:1}},\"depth\");const scan=__name((input,options)=>{const opts=options||{};const length=input.length-1;const scanToEnd=opts.parts===true||opts.scanToEnd===true;const slashes=[];const tokens=[];const parts=[];let str=input;let index=-1;let start=0;let lastIndex=0;let isBrace=false;let isBracket=false;let isGlob=false;let isExtglob=false;let isGlobstar=false;let braceEscaped=false;let backslashes=false;let negated=false;let negatedExtglob=false;let finished=false;let braces=0;let prev;let code;let token={value:\"\",depth:0,isGlob:false};const eos=__name(()=>index>=length,\"eos\");const peek=__name(()=>str.charCodeAt(index+1),\"peek\");const advance=__name(()=>{prev=code;return str.charCodeAt(++index)},\"advance\");while(index<length){code=advance();let next;if(code===CHAR_BACKWARD_SLASH){backslashes=token.backslashes=true;code=advance();if(code===CHAR_LEFT_CURLY_BRACE){braceEscaped=true}continue}if(braceEscaped===true||code===CHAR_LEFT_CURLY_BRACE){braces++;while(eos()!==true&&(code=advance())){if(code===CHAR_BACKWARD_SLASH){backslashes=token.backslashes=true;advance();continue}if(code===CHAR_LEFT_CURLY_BRACE){braces++;continue}if(braceEscaped!==true&&code===CHAR_DOT&&(code=advance())===CHAR_DOT){isBrace=token.isBrace=true;isGlob=token.isGlob=true;finished=true;if(scanToEnd===true){continue}break}if(braceEscaped!==true&&code===CHAR_COMMA){isBrace=token.isBrace=true;isGlob=token.isGlob=true;finished=true;if(scanToEnd===true){continue}break}if(code===CHAR_RIGHT_CURLY_BRACE){braces--;if(braces===0){braceEscaped=false;isBrace=token.isBrace=true;finished=true;break}}}if(scanToEnd===true){continue}break}if(code===CHAR_FORWARD_SLASH){slashes.push(index);tokens.push(token);token={value:\"\",depth:0,isGlob:false};if(finished===true)continue;if(prev===CHAR_DOT&&index===start+1){start+=2;continue}lastIndex=index+1;continue}if(opts.noext!==true){const isExtglobChar=code===CHAR_PLUS||code===CHAR_AT||code===CHAR_ASTERISK||code===CHAR_QUESTION_MARK||code===CHAR_EXCLAMATION_MARK;if(isExtglobChar===true&&peek()===CHAR_LEFT_PARENTHESES){isGlob=token.isGlob=true;isExtglob=token.isExtglob=true;finished=true;if(code===CHAR_EXCLAMATION_MARK&&index===start){negatedExtglob=true}if(scanToEnd===true){while(eos()!==true&&(code=advance())){if(code===CHAR_BACKWARD_SLASH){backslashes=token.backslashes=true;code=advance();continue}if(code===CHAR_RIGHT_PARENTHESES){isGlob=token.isGlob=true;finished=true;break}}continue}break}}if(code===CHAR_ASTERISK){if(prev===CHAR_ASTERISK)isGlobstar=token.isGlobstar=true;isGlob=token.isGlob=true;finished=true;if(scanToEnd===true){continue}break}if(code===CHAR_QUESTION_MARK){isGlob=token.isGlob=true;finished=true;if(scanToEnd===true){continue}break}if(code===CHAR_LEFT_SQUARE_BRACKET){while(eos()!==true&&(next=advance())){if(next===CHAR_BACKWARD_SLASH){backslashes=token.backslashes=true;advance();continue}if(next===CHAR_RIGHT_SQUARE_BRACKET){isBracket=token.isBracket=true;isGlob=token.isGlob=true;finished=true;break}}if(scanToEnd===true){continue}break}if(opts.nonegate!==true&&code===CHAR_EXCLAMATION_MARK&&index===start){negated=token.negated=true;start++;continue}if(opts.noparen!==true&&code===CHAR_LEFT_PARENTHESES){isGlob=token.isGlob=true;if(scanToEnd===true){while(eos()!==true&&(code=advance())){if(code===CHAR_LEFT_PARENTHESES){backslashes=token.backslashes=true;code=advance();continue}if(code===CHAR_RIGHT_PARENTHESES){finished=true;break}}continue}break}if(isGlob===true){finished=true;if(scanToEnd===true){continue}break}}if(opts.noext===true){isExtglob=false;isGlob=false}let base=str;let prefix=\"\";let glob=\"\";if(start>0){prefix=str.slice(0,start);str=str.slice(start);lastIndex-=start}if(base&&isGlob===true&&lastIndex>0){base=str.slice(0,lastIndex);glob=str.slice(lastIndex)}else if(isGlob===true){base=\"\";glob=str}else{base=str}if(base&&base!==\"\"&&base!==\"/\"&&base!==str){if(isPathSeparator(base.charCodeAt(base.length-1))){base=base.slice(0,-1)}}if(opts.unescape===true){if(glob)glob=utils.removeBackslashes(glob);if(base&&backslashes===true){base=utils.removeBackslashes(base)}}const state={prefix,input,start,base,glob,isBrace,isBracket,isGlob,isExtglob,isGlobstar,negated,negatedExtglob};if(opts.tokens===true){state.maxDepth=0;if(!isPathSeparator(code)){tokens.push(token)}state.tokens=tokens}if(opts.parts===true||opts.tokens===true){let prevIndex;for(let idx=0;idx<slashes.length;idx++){const n=prevIndex?prevIndex+1:start;const i=slashes[idx];const value=input.slice(n,i);if(opts.tokens){if(idx===0&&start!==0){tokens[idx].isPrefix=true;tokens[idx].value=prefix}else{tokens[idx].value=value}depth(tokens[idx]);state.maxDepth+=tokens[idx].depth}if(idx!==0||value!==\"\"){parts.push(value)}prevIndex=i}if(prevIndex&&prevIndex+1<input.length){const value=input.slice(prevIndex+1);parts.push(value);if(opts.tokens){tokens[tokens.length-1].value=value;depth(tokens[tokens.length-1]);state.maxDepth+=tokens[tokens.length-1].depth}}state.slashes=slashes;state.parts=parts}return state},\"scan\");module.exports=scan;\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js"],"sourcesContent":["'use strict';\n\nconst utils = require('./utils');\nconst {\n  CHAR_ASTERISK,             /* * */\n  CHAR_AT,                   /* @ */\n  CHAR_BACKWARD_SLASH,       /* \\ */\n  CHAR_COMMA,                /* , */\n  CHAR_DOT,                  /* . */\n  CHAR_EXCLAMATION_MARK,     /* ! */\n  CHAR_FORWARD_SLASH,        /* / */\n  CHAR_LEFT_CURLY_BRACE,     /* { */\n  CHAR_LEFT_PARENTHESES,     /* ( */\n  CHAR_LEFT_SQUARE_BRACKET,  /* [ */\n  CHAR_PLUS,                 /* + */\n  CHAR_QUESTION_MARK,        /* ? */\n  CHAR_RIGHT_CURLY_BRACE,    /* } */\n  CHAR_RIGHT_PARENTHESES,    /* ) */\n  CHAR_RIGHT_SQUARE_BRACKET  /* ] */\n} = require('./constants');\n\nconst isPathSeparator = code => {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nconst depth = token => {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n\n/**\n * Quickly scans a glob pattern and returns an object with a handful of\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\n * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\n *\n * ```js\n * const pm = require('picomatch');\n * console.log(pm.scan('foo/bar/*.js'));\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an object with tokens and regex source string.\n * @api public\n */\n\nconst scan = (input, options) => {\n  const opts = options || {};\n\n  const length = input.length - 1;\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  const slashes = [];\n  const tokens = [];\n  const parts = [];\n\n  let str = input;\n  let index = -1;\n  let start = 0;\n  let lastIndex = 0;\n  let isBrace = false;\n  let isBracket = false;\n  let isGlob = false;\n  let isExtglob = false;\n  let isGlobstar = false;\n  let braceEscaped = false;\n  let backslashes = false;\n  let negated = false;\n  let negatedExtglob = false;\n  let finished = false;\n  let braces = 0;\n  let prev;\n  let code;\n  let token = { value: '', depth: 0, isGlob: false };\n\n  const eos = () => index >= length;\n  const peek = () => str.charCodeAt(index + 1);\n  const advance = () => {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    let next;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = { value: '', depth: 0, isGlob: false };\n\n      if (finished === true) continue;\n      if (prev === CHAR_DOT && index === (start + 1)) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      const isExtglobChar = code === CHAR_PLUS\n        || code === CHAR_AT\n        || code === CHAR_ASTERISK\n        || code === CHAR_QUESTION_MARK\n        || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\n          negatedExtglob = true;\n        }\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n          continue;\n        }\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n        continue;\n      }\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  let base = str;\n  let prefix = '';\n  let glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0, start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0, lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0, -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils.removeBackslashes(base);\n    }\n  }\n\n  const state = {\n    prefix,\n    input,\n    start,\n    base,\n    glob,\n    isBrace,\n    isBracket,\n    isGlob,\n    isExtglob,\n    isGlobstar,\n    negated,\n    negatedExtglob\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    let prevIndex;\n\n    for (let idx = 0; idx < slashes.length; idx++) {\n      const n = prevIndex ? prevIndex + 1 : start;\n      const i = slashes[idx];\n      const value = input.slice(n, i);\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      const value = input.slice(prevIndex + 1);\n      parts.push(value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nmodule.exports = scan;\n"]}}