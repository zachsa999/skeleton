{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});let pico=require(\"picocolors\");let terminalHighlight=require(\"./terminal-highlight\");class CssSyntaxError extends Error{constructor(message,line,column,source,file,plugin){super(message);this.name=\"CssSyntaxError\";this.reason=message;if(file){this.file=file}if(source){this.source=source}if(plugin){this.plugin=plugin}if(typeof line!==\"undefined\"&&typeof column!==\"undefined\"){if(typeof line===\"number\"){this.line=line;this.column=column}else{this.line=line.line;this.column=line.column;this.endLine=column.line;this.endColumn=column.column}}this.setMessage();if(Error.captureStackTrace){Error.captureStackTrace(this,CssSyntaxError)}}setMessage(){this.message=this.plugin?this.plugin+\": \":\"\";this.message+=this.file?this.file:\"<css input>\";if(typeof this.line!==\"undefined\"){this.message+=\":\"+this.line+\":\"+this.column}this.message+=\": \"+this.reason}showSourceCode(color){if(!this.source)return\"\";let css=this.source;if(color==null)color=pico.isColorSupported;if(terminalHighlight){if(color)css=terminalHighlight(css)}let lines=css.split(/\\r?\\n/);let start=Math.max(this.line-3,0);let end=Math.min(this.line+2,lines.length);let maxWidth=String(end).length;let mark,aside;if(color){let{bold,red,gray}=pico.createColors(true);mark=__name(text=>bold(red(text)),\"mark\");aside=__name(text=>gray(text),\"aside\")}else{mark=aside=__name(str=>str,\"aside\")}return lines.slice(start,end).map((line,index)=>{let number=start+1+index;let gutter=\" \"+(\" \"+number).slice(-maxWidth)+\" | \";if(number===this.line){let spacing=aside(gutter.replace(/\\d/g,\" \"))+line.slice(0,this.column-1).replace(/[^\\t]/g,\" \");return mark(\">\")+aside(gutter)+line+\"\\n \"+spacing+mark(\"^\")}return\" \"+aside(gutter)+line}).join(\"\\n\")}toString(){let code=this.showSourceCode();if(code){code=\"\\n\\n\"+code+\"\\n\"}return this.name+\": \"+this.message+code}}__name(CssSyntaxError,\"CssSyntaxError\");module.exports=CssSyntaxError;CssSyntaxError.default=CssSyntaxError;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,IAAI,KAAO,QAAQ,YAAY,EAE/B,IAAI,kBAAoB,QAAQ,sBAAsB,EAEtD,MAAM,uBAAuB,KAAM,CACjC,YAAY,QAAS,KAAM,OAAQ,OAAQ,KAAM,OAAQ,CACvD,MAAM,OAAO,EACb,KAAK,KAAO,iBACZ,KAAK,OAAS,QAEd,GAAI,KAAM,CACR,KAAK,KAAO,IACd,CACA,GAAI,OAAQ,CACV,KAAK,OAAS,MAChB,CACA,GAAI,OAAQ,CACV,KAAK,OAAS,MAChB,CACA,GAAI,OAAO,OAAS,aAAe,OAAO,SAAW,YAAa,CAChE,GAAI,OAAO,OAAS,SAAU,CAC5B,KAAK,KAAO,KACZ,KAAK,OAAS,MAChB,KAAO,CACL,KAAK,KAAO,KAAK,KACjB,KAAK,OAAS,KAAK,OACnB,KAAK,QAAU,OAAO,KACtB,KAAK,UAAY,OAAO,MAC1B,CACF,CAEA,KAAK,WAAW,EAEhB,GAAI,MAAM,kBAAmB,CAC3B,MAAM,kBAAkB,KAAM,cAAc,CAC9C,CACF,CAEA,YAAa,CACX,KAAK,QAAU,KAAK,OAAS,KAAK,OAAS,KAAO,GAClD,KAAK,SAAW,KAAK,KAAO,KAAK,KAAO,cACxC,GAAI,OAAO,KAAK,OAAS,YAAa,CACpC,KAAK,SAAW,IAAM,KAAK,KAAO,IAAM,KAAK,MAC/C,CACA,KAAK,SAAW,KAAO,KAAK,MAC9B,CAEA,eAAe,MAAO,CACpB,GAAI,CAAC,KAAK,OAAQ,MAAO,GAEzB,IAAI,IAAM,KAAK,OACf,GAAI,OAAS,KAAM,MAAQ,KAAK,iBAChC,GAAI,kBAAmB,CACrB,GAAI,MAAO,IAAM,kBAAkB,GAAG,CACxC,CAEA,IAAI,MAAQ,IAAI,MAAM,OAAO,EAC7B,IAAI,MAAQ,KAAK,IAAI,KAAK,KAAO,EAAG,CAAC,EACrC,IAAI,IAAM,KAAK,IAAI,KAAK,KAAO,EAAG,MAAM,MAAM,EAE9C,IAAI,SAAW,OAAO,GAAG,EAAE,OAE3B,IAAI,KAAM,MACV,GAAI,MAAO,CACT,GAAI,CAAE,KAAM,IAAK,IAAK,EAAI,KAAK,aAAa,IAAI,EAChD,KAAO,aAAQ,KAAK,IAAI,IAAI,CAAC,EAAtB,QACP,MAAQ,aAAQ,KAAK,IAAI,EAAjB,QACV,KAAO,CACL,KAAO,MAAQ,YAAO,IAAP,QACjB,CAEA,OAAO,MACJ,MAAM,MAAO,GAAG,EAChB,IAAI,CAAC,KAAM,QAAU,CACpB,IAAI,OAAS,MAAQ,EAAI,MACzB,IAAI,OAAS,KAAO,IAAM,QAAQ,MAAM,CAAC,QAAQ,EAAI,MACrD,GAAI,SAAW,KAAK,KAAM,CACxB,IAAI,QACF,MAAM,OAAO,QAAQ,MAAO,GAAG,CAAC,EAChC,KAAK,MAAM,EAAG,KAAK,OAAS,CAAC,EAAE,QAAQ,SAAU,GAAG,EACtD,OAAO,KAAK,GAAG,EAAI,MAAM,MAAM,EAAI,KAAO,MAAQ,QAAU,KAAK,GAAG,CACtE,CACA,MAAO,IAAM,MAAM,MAAM,EAAI,IAC/B,CAAC,EACA,KAAK,IAAI,CACd,CAEA,UAAW,CACT,IAAI,KAAO,KAAK,eAAe,EAC/B,GAAI,KAAM,CACR,KAAO,OAAS,KAAO,IACzB,CACA,OAAO,KAAK,KAAO,KAAO,KAAK,QAAU,IAC3C,CACF,CA1FM,wCA4FN,OAAO,QAAU,eACjB,eAAe,QAAU","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/postcss@8.4.24/node_modules/postcss/lib/css-syntax-error.js"],"sourcesContent":["'use strict'\n\nlet pico = require('picocolors')\n\nlet terminalHighlight = require('./terminal-highlight')\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = pico.isColorSupported\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      let { bold, red, gray } = pico.createColors(true)\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n"]}}