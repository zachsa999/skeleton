{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});exports.readdir=exports.readdirWithFileTypes=exports.read=void 0;const fsStat=require(\"@nodelib/fs.stat\");const rpl=require(\"run-parallel\");const constants_1=require(\"../constants\");const utils=require(\"../utils\");const common=require(\"./common\");function read(directory,settings,callback){if(!settings.stats&&constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES){readdirWithFileTypes(directory,settings,callback);return}readdir(directory,settings,callback)}__name(read,\"read\");exports.read=read;function readdirWithFileTypes(directory,settings,callback){settings.fs.readdir(directory,{withFileTypes:true},(readdirError,dirents)=>{if(readdirError!==null){callFailureCallback(callback,readdirError);return}const entries=dirents.map(dirent=>({dirent,name:dirent.name,path:common.joinPathSegments(directory,dirent.name,settings.pathSegmentSeparator)}));if(!settings.followSymbolicLinks){callSuccessCallback(callback,entries);return}const tasks=entries.map(entry=>makeRplTaskEntry(entry,settings));rpl(tasks,(rplError,rplEntries)=>{if(rplError!==null){callFailureCallback(callback,rplError);return}callSuccessCallback(callback,rplEntries)})})}__name(readdirWithFileTypes,\"readdirWithFileTypes\");exports.readdirWithFileTypes=readdirWithFileTypes;function makeRplTaskEntry(entry,settings){return done=>{if(!entry.dirent.isSymbolicLink()){done(null,entry);return}settings.fs.stat(entry.path,(statError,stats)=>{if(statError!==null){if(settings.throwErrorOnBrokenSymbolicLink){done(statError);return}done(null,entry);return}entry.dirent=utils.fs.createDirentFromStats(entry.name,stats);done(null,entry)})}}__name(makeRplTaskEntry,\"makeRplTaskEntry\");function readdir(directory,settings,callback){settings.fs.readdir(directory,(readdirError,names)=>{if(readdirError!==null){callFailureCallback(callback,readdirError);return}const tasks=names.map(name=>{const path=common.joinPathSegments(directory,name,settings.pathSegmentSeparator);return done=>{fsStat.stat(path,settings.fsStatSettings,(error,stats)=>{if(error!==null){done(error);return}const entry={name,path,dirent:utils.fs.createDirentFromStats(name,stats)};if(settings.stats){entry.stats=stats}done(null,entry)})}});rpl(tasks,(rplError,entries)=>{if(rplError!==null){callFailureCallback(callback,rplError);return}callSuccessCallback(callback,entries)})})}__name(readdir,\"readdir\");exports.readdir=readdir;function callFailureCallback(callback,error){callback(error)}__name(callFailureCallback,\"callFailureCallback\");function callSuccessCallback(callback,result){callback(null,result)}__name(callSuccessCallback,\"callSuccessCallback\");\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst rpl = require(\"run-parallel\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings, callback) {\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n        readdirWithFileTypes(directory, settings, callback);\n        return;\n    }\n    readdir(directory, settings, callback);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings, callback) {\n    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {\n        if (readdirError !== null) {\n            callFailureCallback(callback, readdirError);\n            return;\n        }\n        const entries = dirents.map((dirent) => ({\n            dirent,\n            name: dirent.name,\n            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n        }));\n        if (!settings.followSymbolicLinks) {\n            callSuccessCallback(callback, entries);\n            return;\n        }\n        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));\n        rpl(tasks, (rplError, rplEntries) => {\n            if (rplError !== null) {\n                callFailureCallback(callback, rplError);\n                return;\n            }\n            callSuccessCallback(callback, rplEntries);\n        });\n    });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction makeRplTaskEntry(entry, settings) {\n    return (done) => {\n        if (!entry.dirent.isSymbolicLink()) {\n            done(null, entry);\n            return;\n        }\n        settings.fs.stat(entry.path, (statError, stats) => {\n            if (statError !== null) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    done(statError);\n                    return;\n                }\n                done(null, entry);\n                return;\n            }\n            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n            done(null, entry);\n        });\n    };\n}\nfunction readdir(directory, settings, callback) {\n    settings.fs.readdir(directory, (readdirError, names) => {\n        if (readdirError !== null) {\n            callFailureCallback(callback, readdirError);\n            return;\n        }\n        const tasks = names.map((name) => {\n            const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n            return (done) => {\n                fsStat.stat(path, settings.fsStatSettings, (error, stats) => {\n                    if (error !== null) {\n                        done(error);\n                        return;\n                    }\n                    const entry = {\n                        name,\n                        path,\n                        dirent: utils.fs.createDirentFromStats(name, stats)\n                    };\n                    if (settings.stats) {\n                        entry.stats = stats;\n                    }\n                    done(null, entry);\n                });\n            };\n        });\n        rpl(tasks, (rplError, entries) => {\n            if (rplError !== null) {\n                callFailureCallback(callback, rplError);\n                return;\n            }\n            callSuccessCallback(callback, entries);\n        });\n    });\n}\nexports.readdir = readdir;\nfunction callFailureCallback(callback, error) {\n    callback(error);\n}\nfunction callSuccessCallback(callback, result) {\n    callback(null, result);\n}\n"]}}