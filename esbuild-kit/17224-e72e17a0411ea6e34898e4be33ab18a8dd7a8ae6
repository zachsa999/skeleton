{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"default\",{enumerable:true,get:function(){return isSyntacticallyValidPropertyValue}});let matchingBrackets=new Map([[\"{\",\"}\"],[\"[\",\"]\"],[\"(\",\")\"]]);let inverseMatchingBrackets=new Map(Array.from(matchingBrackets.entries()).map(([k,v])=>[v,k]));let quotes=new Set(['\"',\"'\",\"`\"]);function isSyntacticallyValidPropertyValue(value){let stack=[];let inQuotes=false;for(let i=0;i<value.length;i++){let char=value[i];if(char===\":\"&&!inQuotes&&stack.length===0){return false}if(quotes.has(char)&&value[i-1]!==\"\\\\\"){inQuotes=!inQuotes}if(inQuotes)continue;if(value[i-1]===\"\\\\\")continue;if(matchingBrackets.has(char)){stack.push(char)}else if(inverseMatchingBrackets.has(char)){let inverse=inverseMatchingBrackets.get(char);if(stack.length<=0){return false}if(stack.pop()!==inverse){return false}}}if(stack.length>0){return false}return true}__name(isSyntacticallyValidPropertyValue,\"isSyntacticallyValidPropertyValue\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,OAAO,eAAe,QAMtB,UAAW,CACP,WAAY,KACZ,IAAK,UAAW,CACZ,OAAO,iCACX,CACJ,CAAC,EACD,IAAI,iBAAmB,IAAI,IAAI,CAC3B,CACI,IACA,GACJ,EACA,CACI,IACA,GACJ,EACA,CACI,IACA,GACJ,CACJ,CAAC,EACD,IAAI,wBAA0B,IAAI,IAAI,MAAM,KAAK,iBAAiB,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC,EAAG,CAAC,IAAI,CACnF,EACA,CACJ,CAAC,CAAC,EACN,IAAI,OAAS,IAAI,IAAI,CACjB,IACA,IACA,GACJ,CAAC,EACD,SAAS,kCAAkC,MAAO,CAC9C,IAAI,MAAQ,CAAC,EACb,IAAI,SAAW,MACf,QAAQ,EAAI,EAAG,EAAI,MAAM,OAAQ,IAAI,CACjC,IAAI,KAAO,MAAM,CAAC,EAClB,GAAI,OAAS,KAAO,CAAC,UAAY,MAAM,SAAW,EAAG,CACjD,MAAO,MACX,CAEA,GAAI,OAAO,IAAI,IAAI,GAAK,MAAM,EAAI,CAAC,IAAM,KAAM,CAC3C,SAAW,CAAC,QAChB,CACA,GAAI,SAAU,SACd,GAAI,MAAM,EAAI,CAAC,IAAM,KAAM,SAC3B,GAAI,iBAAiB,IAAI,IAAI,EAAG,CAC5B,MAAM,KAAK,IAAI,CACnB,SAAW,wBAAwB,IAAI,IAAI,EAAG,CAC1C,IAAI,QAAU,wBAAwB,IAAI,IAAI,EAE9C,GAAI,MAAM,QAAU,EAAG,CACnB,MAAO,MACX,CAEA,GAAI,MAAM,IAAI,IAAM,QAAS,CACzB,MAAO,MACX,CACJ,CACJ,CAEA,GAAI,MAAM,OAAS,EAAG,CAClB,MAAO,MACX,CAEA,MAAO,KACX,CAlCS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/util/isSyntacticallyValidPropertyValue.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, // Arbitrary values must contain balanced brackets (), [] and {}. Escaped\n// values don't count, and brackets inside quotes also don't count.\n//\n// E.g.: w-[this-is]w-[weird-and-invalid]\n// E.g.: w-[this-is\\\\]w-\\\\[weird-but-valid]\n// E.g.: content-['this-is-also-valid]-weirdly-enough']\n\"default\", {\n    enumerable: true,\n    get: function() {\n        return isSyntacticallyValidPropertyValue;\n    }\n});\nlet matchingBrackets = new Map([\n    [\n        \"{\",\n        \"}\"\n    ],\n    [\n        \"[\",\n        \"]\"\n    ],\n    [\n        \"(\",\n        \")\"\n    ]\n]);\nlet inverseMatchingBrackets = new Map(Array.from(matchingBrackets.entries()).map(([k, v])=>[\n        v,\n        k\n    ]));\nlet quotes = new Set([\n    '\"',\n    \"'\",\n    \"`\"\n]);\nfunction isSyntacticallyValidPropertyValue(value) {\n    let stack = [];\n    let inQuotes = false;\n    for(let i = 0; i < value.length; i++){\n        let char = value[i];\n        if (char === \":\" && !inQuotes && stack.length === 0) {\n            return false;\n        }\n        // Non-escaped quotes allow us to \"allow\" anything in between\n        if (quotes.has(char) && value[i - 1] !== \"\\\\\") {\n            inQuotes = !inQuotes;\n        }\n        if (inQuotes) continue;\n        if (value[i - 1] === \"\\\\\") continue; // Escaped\n        if (matchingBrackets.has(char)) {\n            stack.push(char);\n        } else if (inverseMatchingBrackets.has(char)) {\n            let inverse = inverseMatchingBrackets.get(char);\n            // Nothing to pop from, therefore it is unbalanced\n            if (stack.length <= 0) {\n                return false;\n            }\n            // Popped value must match the inverse value, otherwise it is unbalanced\n            if (stack.pop() !== inverse) {\n                return false;\n            }\n        }\n    }\n    // If there is still something on the stack, it is also unbalanced\n    if (stack.length > 0) {\n        return false;\n    }\n    // All good, totally balanced!\n    return true;\n}\n"]}}