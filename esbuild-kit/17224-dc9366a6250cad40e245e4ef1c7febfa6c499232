{"code":"(()=>{\nvar __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});function SortTemplate(comparator){function swap(ary,x,y){var temp=ary[x];ary[x]=ary[y];ary[y]=temp}__name(swap,\"swap\");function randomIntInRange(low,high){return Math.round(low+Math.random()*(high-low))}__name(randomIntInRange,\"randomIntInRange\");function doQuickSort(ary,comparator2,p,r){if(p<r){var pivotIndex=randomIntInRange(p,r);var i=p-1;swap(ary,pivotIndex,r);var pivot=ary[r];for(var j=p;j<r;j++){if(comparator2(ary[j],pivot,false)<=0){i+=1;swap(ary,i,j)}}swap(ary,i+1,j);var q=i+1;doQuickSort(ary,comparator2,p,q-1);doQuickSort(ary,comparator2,q+1,r)}}__name(doQuickSort,\"doQuickSort\");return doQuickSort}__name(SortTemplate,\"SortTemplate\");function cloneSort(comparator){let template=SortTemplate.toString();let templateFn=new Function(`return ${template}`)();return templateFn(comparator)}__name(cloneSort,\"cloneSort\");let sortCache=new WeakMap;exports.quickSort=function(ary,comparator,start=0){let doQuickSort=sortCache.get(comparator);if(doQuickSort===void 0){doQuickSort=cloneSort(comparator);sortCache.set(comparator,doQuickSort)}doQuickSort(ary,comparator,start,ary.length-1)};\n})()\n","warnings":[],"map":{"version":3,"mappings":";kHAiBA,SAAS,aAAa,WAAY,CAYlC,SAAS,KAAK,IAAK,EAAG,EAAG,CACvB,IAAI,KAAO,IAAI,CAAC,EAChB,IAAI,CAAC,EAAI,IAAI,CAAC,EACd,IAAI,CAAC,EAAI,IACX,CAJS,oBAcT,SAAS,iBAAiB,IAAK,KAAM,CACnC,OAAO,KAAK,MAAM,IAAO,KAAK,OAAO,GAAK,KAAO,IAAK,CACxD,CAFS,4CAgBT,SAAS,YAAY,IAAKA,YAAY,EAAG,EAAG,CAK1C,GAAI,EAAI,EAAG,CAYT,IAAI,WAAa,iBAAiB,EAAG,CAAC,EACtC,IAAI,EAAI,EAAI,EAEZ,KAAK,IAAK,WAAY,CAAC,EACvB,IAAI,MAAQ,IAAI,CAAC,EAQjB,QAAS,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,GAAIA,YAAW,IAAI,CAAC,EAAG,MAAO,KAAK,GAAK,EAAG,CACzC,GAAK,EACL,KAAK,IAAK,EAAG,CAAC,CAChB,CACF,CAEA,KAAK,IAAK,EAAI,EAAG,CAAC,EAClB,IAAI,EAAI,EAAI,EAIZ,YAAY,IAAKA,YAAY,EAAG,EAAI,CAAC,EACrC,YAAY,IAAKA,YAAY,EAAI,EAAG,CAAC,CACvC,CACF,CA5CS,kCA8CP,OAAO,WACT,CAzFS,oCA2FT,SAAS,UAAU,WAAY,CAC7B,IAAI,SAAW,aAAa,SAAS,EACrC,IAAI,WAAa,IAAI,SAAS,UAAU,UAAU,EAAE,EACpD,OAAO,WAAW,UAAU,CAC9B,CAJS,8BAeT,IAAI,UAAY,IAAI,QACpB,QAAQ,UAAY,SAAU,IAAK,WAAY,MAAQ,EAAG,CACxD,IAAI,YAAc,UAAU,IAAI,UAAU,EAC1C,GAAI,cAAgB,OAAQ,CAC1B,YAAc,UAAU,UAAU,EAClC,UAAU,IAAI,WAAY,WAAW,CACvC,CACA,YAAY,IAAK,WAAY,MAAO,IAAI,OAAS,CAAC,CACpD","names":["comparator"],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/source-map-js@1.0.2/node_modules/source-map-js/lib/quick-sort.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\nfunction SortTemplate(comparator) {\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot, false) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n  return doQuickSort;\n}\n\nfunction cloneSort(comparator) {\n  let template = SortTemplate.toString();\n  let templateFn = new Function(`return ${template}`)();\n  return templateFn(comparator);\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\n\nlet sortCache = new WeakMap();\nexports.quickSort = function (ary, comparator, start = 0) {\n  let doQuickSort = sortCache.get(comparator);\n  if (doQuickSort === void 0) {\n    doQuickSort = cloneSort(comparator);\n    sortCache.set(comparator, doQuickSort);\n  }\n  doQuickSort(ary, comparator, start, ary.length - 1);\n};\n"]}}