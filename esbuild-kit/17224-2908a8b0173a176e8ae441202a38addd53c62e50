{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});let{isClean,my}=require(\"./symbols\");let MapGenerator=require(\"./map-generator\");let stringify=require(\"./stringify\");let Container=require(\"./container\");let Document=require(\"./document\");let warnOnce=require(\"./warn-once\");let Result=require(\"./result\");let parse=require(\"./parse\");let Root=require(\"./root\");const TYPE_TO_CLASS_NAME={document:\"Document\",root:\"Root\",atrule:\"AtRule\",rule:\"Rule\",decl:\"Declaration\",comment:\"Comment\"};const PLUGIN_PROPS={postcssPlugin:true,prepare:true,Once:true,Document:true,Root:true,Declaration:true,Rule:true,AtRule:true,Comment:true,DeclarationExit:true,RuleExit:true,AtRuleExit:true,CommentExit:true,RootExit:true,DocumentExit:true,OnceExit:true};const NOT_VISITORS={postcssPlugin:true,prepare:true,Once:true};const CHILDREN=0;function isPromise(obj){return typeof obj===\"object\"&&typeof obj.then===\"function\"}__name(isPromise,\"isPromise\");function getEvents(node){let key=false;let type=TYPE_TO_CLASS_NAME[node.type];if(node.type===\"decl\"){key=node.prop.toLowerCase()}else if(node.type===\"atrule\"){key=node.name.toLowerCase()}if(key&&node.append){return[type,type+\"-\"+key,CHILDREN,type+\"Exit\",type+\"Exit-\"+key]}else if(key){return[type,type+\"-\"+key,type+\"Exit\",type+\"Exit-\"+key]}else if(node.append){return[type,CHILDREN,type+\"Exit\"]}else{return[type,type+\"Exit\"]}}__name(getEvents,\"getEvents\");function toStack(node){let events;if(node.type===\"document\"){events=[\"Document\",CHILDREN,\"DocumentExit\"]}else if(node.type===\"root\"){events=[\"Root\",CHILDREN,\"RootExit\"]}else{events=getEvents(node)}return{node,events,eventIndex:0,visitors:[],visitorIndex:0,iterator:0}}__name(toStack,\"toStack\");function cleanMarks(node){node[isClean]=false;if(node.nodes)node.nodes.forEach(i=>cleanMarks(i));return node}__name(cleanMarks,\"cleanMarks\");let postcss={};class LazyResult{constructor(processor,css,opts){this.stringified=false;this.processed=false;let root;if(typeof css===\"object\"&&css!==null&&(css.type===\"root\"||css.type===\"document\")){root=cleanMarks(css)}else if(css instanceof LazyResult||css instanceof Result){root=cleanMarks(css.root);if(css.map){if(typeof opts.map===\"undefined\")opts.map={};if(!opts.map.inline)opts.map.inline=false;opts.map.prev=css.map}}else{let parser=parse;if(opts.syntax)parser=opts.syntax.parse;if(opts.parser)parser=opts.parser;if(parser.parse)parser=parser.parse;try{root=parser(css,opts)}catch(error){this.processed=true;this.error=error}if(root&&!root[my]){Container.rebuild(root)}}this.result=new Result(processor,root,opts);this.helpers={...postcss,result:this.result,postcss};this.plugins=this.processor.plugins.map(plugin=>{if(typeof plugin===\"object\"&&plugin.prepare){return{...plugin,...plugin.prepare(this.result)}}else{return plugin}})}get[Symbol.toStringTag](){return\"LazyResult\"}get processor(){return this.result.processor}get opts(){return this.result.opts}get css(){return this.stringify().css}get content(){return this.stringify().content}get map(){return this.stringify().map}get root(){return this.sync().root}get messages(){return this.sync().messages}warnings(){return this.sync().warnings()}toString(){return this.css}then(onFulfilled,onRejected){if(process.env.NODE_ENV!==\"production\"){if(!(\"from\"in this.opts)){warnOnce(\"Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning.\")}}return this.async().then(onFulfilled,onRejected)}catch(onRejected){return this.async().catch(onRejected)}finally(onFinally){return this.async().then(onFinally,onFinally)}async(){if(this.error)return Promise.reject(this.error);if(this.processed)return Promise.resolve(this.result);if(!this.processing){this.processing=this.runAsync()}return this.processing}sync(){if(this.error)throw this.error;if(this.processed)return this.result;this.processed=true;if(this.processing){throw this.getAsyncError()}for(let plugin of this.plugins){let promise=this.runOnRoot(plugin);if(isPromise(promise)){throw this.getAsyncError()}}this.prepareVisitors();if(this.hasListener){let root=this.result.root;while(!root[isClean]){root[isClean]=true;this.walkSync(root)}if(this.listeners.OnceExit){if(root.type===\"document\"){for(let subRoot of root.nodes){this.visitSync(this.listeners.OnceExit,subRoot)}}else{this.visitSync(this.listeners.OnceExit,root)}}}return this.result}stringify(){if(this.error)throw this.error;if(this.stringified)return this.result;this.stringified=true;this.sync();let opts=this.result.opts;let str=stringify;if(opts.syntax)str=opts.syntax.stringify;if(opts.stringifier)str=opts.stringifier;if(str.stringify)str=str.stringify;let map=new MapGenerator(str,this.result.root,this.result.opts);let data=map.generate();this.result.css=data[0];this.result.map=data[1];return this.result}walkSync(node){node[isClean]=true;let events=getEvents(node);for(let event of events){if(event===CHILDREN){if(node.nodes){node.each(child=>{if(!child[isClean])this.walkSync(child)})}}else{let visitors=this.listeners[event];if(visitors){if(this.visitSync(visitors,node.toProxy()))return}}}}visitSync(visitors,node){for(let[plugin,visitor]of visitors){this.result.lastPlugin=plugin;let promise;try{promise=visitor(node,this.helpers)}catch(e){throw this.handleError(e,node.proxyOf)}if(node.type!==\"root\"&&node.type!==\"document\"&&!node.parent){return true}if(isPromise(promise)){throw this.getAsyncError()}}}runOnRoot(plugin){this.result.lastPlugin=plugin;try{if(typeof plugin===\"object\"&&plugin.Once){if(this.result.root.type===\"document\"){let roots=this.result.root.nodes.map(root=>plugin.Once(root,this.helpers));if(isPromise(roots[0])){return Promise.all(roots)}return roots}return plugin.Once(this.result.root,this.helpers)}else if(typeof plugin===\"function\"){return plugin(this.result.root,this.result)}}catch(error){throw this.handleError(error)}}getAsyncError(){throw new Error(\"Use process(css).then(cb) to work with async plugins\")}handleError(error,node){let plugin=this.result.lastPlugin;try{if(node)node.addToError(error);this.error=error;if(error.name===\"CssSyntaxError\"&&!error.plugin){error.plugin=plugin.postcssPlugin;error.setMessage()}else if(plugin.postcssVersion){if(process.env.NODE_ENV!==\"production\"){let pluginName=plugin.postcssPlugin;let pluginVer=plugin.postcssVersion;let runtimeVer=this.result.processor.version;let a=pluginVer.split(\".\");let b=runtimeVer.split(\".\");if(a[0]!==b[0]||parseInt(a[1])>parseInt(b[1])){console.error(\"Unknown error from PostCSS plugin. Your current PostCSS version is \"+runtimeVer+\", but \"+pluginName+\" uses \"+pluginVer+\". Perhaps this is the source of the error below.\")}}}}catch(err){if(console&&console.error)console.error(err)}return error}async runAsync(){this.plugin=0;for(let i=0;i<this.plugins.length;i++){let plugin=this.plugins[i];let promise=this.runOnRoot(plugin);if(isPromise(promise)){try{await promise}catch(error){throw this.handleError(error)}}}this.prepareVisitors();if(this.hasListener){let root=this.result.root;while(!root[isClean]){root[isClean]=true;let stack=[toStack(root)];while(stack.length>0){let promise=this.visitTick(stack);if(isPromise(promise)){try{await promise}catch(e){let node=stack[stack.length-1].node;throw this.handleError(e,node)}}}}if(this.listeners.OnceExit){for(let[plugin,visitor]of this.listeners.OnceExit){this.result.lastPlugin=plugin;try{if(root.type===\"document\"){let roots=root.nodes.map(subRoot=>visitor(subRoot,this.helpers));await Promise.all(roots)}else{await visitor(root,this.helpers)}}catch(e){throw this.handleError(e)}}}}this.processed=true;return this.stringify()}prepareVisitors(){this.listeners={};let add=__name((plugin,type,cb)=>{if(!this.listeners[type])this.listeners[type]=[];this.listeners[type].push([plugin,cb])},\"add\");for(let plugin of this.plugins){if(typeof plugin===\"object\"){for(let event in plugin){if(!PLUGIN_PROPS[event]&&/^[A-Z]/.test(event)){throw new Error(`Unknown event ${event} in ${plugin.postcssPlugin}. Try to update PostCSS (${this.processor.version} now).`)}if(!NOT_VISITORS[event]){if(typeof plugin[event]===\"object\"){for(let filter in plugin[event]){if(filter===\"*\"){add(plugin,event,plugin[event][filter])}else{add(plugin,event+\"-\"+filter.toLowerCase(),plugin[event][filter])}}}else if(typeof plugin[event]===\"function\"){add(plugin,event,plugin[event])}}}}}this.hasListener=Object.keys(this.listeners).length>0}visitTick(stack){let visit=stack[stack.length-1];let{node,visitors}=visit;if(node.type!==\"root\"&&node.type!==\"document\"&&!node.parent){stack.pop();return}if(visitors.length>0&&visit.visitorIndex<visitors.length){let[plugin,visitor]=visitors[visit.visitorIndex];visit.visitorIndex+=1;if(visit.visitorIndex===visitors.length){visit.visitors=[];visit.visitorIndex=0}this.result.lastPlugin=plugin;try{return visitor(node.toProxy(),this.helpers)}catch(e){throw this.handleError(e,node)}}if(visit.iterator!==0){let iterator=visit.iterator;let child;while(child=node.nodes[node.indexes[iterator]]){node.indexes[iterator]+=1;if(!child[isClean]){child[isClean]=true;stack.push(toStack(child));return}}visit.iterator=0;delete node.indexes[iterator]}let events=visit.events;while(visit.eventIndex<events.length){let event=events[visit.eventIndex];visit.eventIndex+=1;if(event===CHILDREN){if(node.nodes&&node.nodes.length){node[isClean]=true;visit.iterator=node.getIterator()}return}else if(this.listeners[event]){visit.visitors=this.listeners[event];return}}stack.pop()}}__name(LazyResult,\"LazyResult\");LazyResult.registerPostcss=dependant=>{postcss=dependant};module.exports=LazyResult;LazyResult.default=LazyResult;Root.registerLazyResult(LazyResult);Document.registerLazyResult(LazyResult);\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/postcss@8.4.24/node_modules/postcss/lib/lazy-result.js"],"sourcesContent":["'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet Container = require('./container')\nlet Document = require('./document')\nlet warnOnce = require('./warn-once')\nlet Result = require('./result')\nlet parse = require('./parse')\nlet Root = require('./root')\n\nconst TYPE_TO_CLASS_NAME = {\n  document: 'Document',\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Document: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  DocumentExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  toString() {\n    return this.css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (let subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          let roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            // eslint-disable-next-line no-console\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              let roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)\n"]}}