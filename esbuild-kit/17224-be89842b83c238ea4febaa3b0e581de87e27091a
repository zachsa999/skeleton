{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});const async_1=require(\"../readers/async\");const provider_1=require(\"./provider\");class ProviderAsync extends provider_1.default{constructor(){super(...arguments);this._reader=new async_1.default(this._settings)}async read(task){const root=this._getRootDirectory(task);const options=this._getReaderOptions(task);const entries=await this.api(root,task,options);return entries.map(entry=>options.transform(entry))}api(root,task,options){if(task.dynamic){return this._reader.dynamic(root,options)}return this._reader.static(task.patterns,options)}}__name(ProviderAsync,\"ProviderAsync\");exports.default=ProviderAsync;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CAAE,MAAO,IAAK,CAAC,EAC5D,MAAM,QAAU,QAAQ,kBAAkB,EAC1C,MAAM,WAAa,QAAQ,YAAY,EACvC,MAAM,sBAAsB,WAAW,OAAQ,CAC3C,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,QAAU,IAAI,QAAQ,QAAQ,KAAK,SAAS,CACrD,CACA,MAAM,KAAK,KAAM,CACb,MAAM,KAAO,KAAK,kBAAkB,IAAI,EACxC,MAAM,QAAU,KAAK,kBAAkB,IAAI,EAC3C,MAAM,QAAU,MAAM,KAAK,IAAI,KAAM,KAAM,OAAO,EAClD,OAAO,QAAQ,IAAK,OAAU,QAAQ,UAAU,KAAK,CAAC,CAC1D,CACA,IAAI,KAAM,KAAM,QAAS,CACrB,GAAI,KAAK,QAAS,CACd,OAAO,KAAK,QAAQ,QAAQ,KAAM,OAAO,CAC7C,CACA,OAAO,KAAK,QAAQ,OAAO,KAAK,SAAU,OAAO,CACrD,CACJ,CAjBM,sCAkBN,QAAQ,QAAU","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/async.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst async_1 = require(\"../readers/async\");\r\nconst provider_1 = require(\"./provider\");\r\nclass ProviderAsync extends provider_1.default {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._reader = new async_1.default(this._settings);\r\n    }\r\n    async read(task) {\r\n        const root = this._getRootDirectory(task);\r\n        const options = this._getReaderOptions(task);\r\n        const entries = await this.api(root, task, options);\r\n        return entries.map((entry) => options.transform(entry));\r\n    }\r\n    api(root, task, options) {\r\n        if (task.dynamic) {\r\n            return this._reader.dynamic(root, options);\r\n        }\r\n        return this._reader.static(task.patterns, options);\r\n    }\r\n}\r\nexports.default = ProviderAsync;\r\n"]}}