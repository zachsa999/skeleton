{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"findAtConfigPath\",{enumerable:true,get:function(){return findAtConfigPath}});const _fs=_interop_require_default(require(\"fs\"));const _path=_interop_require_default(require(\"path\"));function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}__name(_interop_require_default,\"_interop_require_default\");function findAtConfigPath(root,result){let configPath=null;let relativeTo=null;root.walkAtRules(\"config\",rule=>{var _rule_source;var _rule_source_input_file,_ref;relativeTo=(_ref=(_rule_source_input_file=(_rule_source=rule.source)===null||_rule_source===void 0?void 0:_rule_source.input.file)!==null&&_rule_source_input_file!==void 0?_rule_source_input_file:result.opts.from)!==null&&_ref!==void 0?_ref:null;if(relativeTo===null){throw rule.error(\"The `@config` directive cannot be used without setting `from` in your PostCSS config.\")}if(configPath){throw rule.error(\"Only one `@config` directive is allowed per file.\")}let matches=rule.params.match(/(['\"])(.*?)\\1/);if(!matches){throw rule.error(\"A path is required when using the `@config` directive.\")}let inputPath=matches[2];if(_path.default.isAbsolute(inputPath)){throw rule.error(\"The `@config` directive cannot be used with an absolute path.\")}configPath=_path.default.resolve(_path.default.dirname(relativeTo),inputPath);if(!_fs.default.existsSync(configPath)){throw rule.error(`The config file at \"${inputPath}\" does not exist. Make sure the path is correct and the file exists.`)}rule.remove()});return configPath?configPath:null}__name(findAtConfigPath,\"findAtConfigPath\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,OAAO,eAAe,QAAS,mBAAoB,CAC/C,WAAY,KACZ,IAAK,UAAW,CACZ,OAAO,gBACX,CACJ,CAAC,EACD,MAAM,IAAoB,yBAAyB,QAAQ,IAAI,CAAC,EAChE,MAAM,MAAsB,yBAAyB,QAAQ,MAAM,CAAC,EACpE,SAAS,yBAAyB,IAAK,CACnC,OAAO,KAAO,IAAI,WAAa,IAAM,CACjC,QAAS,GACb,CACJ,CAJS,4DAKT,SAAS,iBAAiB,KAAM,OAAQ,CACpC,IAAI,WAAa,KACjB,IAAI,WAAa,KACjB,KAAK,YAAY,SAAW,MAAO,CAC/B,IAAI,aACJ,IAAI,wBAAyB,KAC7B,YAAc,MAAQ,yBAA2B,aAAe,KAAK,UAAY,MAAQ,eAAiB,OAAS,OAAS,aAAa,MAAM,QAAU,MAAQ,0BAA4B,OAAS,wBAA0B,OAAO,KAAK,QAAU,MAAQ,OAAS,OAAS,KAAO,KACvR,GAAI,aAAe,KAAM,CACrB,MAAM,KAAK,MAAM,uFAAuF,CAC5G,CACA,GAAI,WAAY,CACZ,MAAM,KAAK,MAAM,mDAAmD,CACxE,CACA,IAAI,QAAU,KAAK,OAAO,MAAM,eAAe,EAC/C,GAAI,CAAC,QAAS,CACV,MAAM,KAAK,MAAM,wDAAwD,CAC7E,CACA,IAAI,UAAY,QAAQ,CAAC,EACzB,GAAI,MAAM,QAAQ,WAAW,SAAS,EAAG,CACrC,MAAM,KAAK,MAAM,+DAA+D,CACpF,CACA,WAAa,MAAM,QAAQ,QAAQ,MAAM,QAAQ,QAAQ,UAAU,EAAG,SAAS,EAC/E,GAAI,CAAC,IAAI,QAAQ,WAAW,UAAU,EAAG,CACrC,MAAM,KAAK,MAAM,uBAAuB,+EAA+E,CAC3H,CACA,KAAK,OAAO,CAChB,CAAC,EACD,OAAO,WAAa,WAAa,IACrC,CA5BS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/lib/findAtConfigPath.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"findAtConfigPath\", {\n    enumerable: true,\n    get: function() {\n        return findAtConfigPath;\n    }\n});\nconst _fs = /*#__PURE__*/ _interop_require_default(require(\"fs\"));\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction findAtConfigPath(root, result) {\n    let configPath = null;\n    let relativeTo = null;\n    root.walkAtRules(\"config\", (rule)=>{\n        var _rule_source;\n        var _rule_source_input_file, _ref;\n        relativeTo = (_ref = (_rule_source_input_file = (_rule_source = rule.source) === null || _rule_source === void 0 ? void 0 : _rule_source.input.file) !== null && _rule_source_input_file !== void 0 ? _rule_source_input_file : result.opts.from) !== null && _ref !== void 0 ? _ref : null;\n        if (relativeTo === null) {\n            throw rule.error(\"The `@config` directive cannot be used without setting `from` in your PostCSS config.\");\n        }\n        if (configPath) {\n            throw rule.error(\"Only one `@config` directive is allowed per file.\");\n        }\n        let matches = rule.params.match(/(['\"])(.*?)\\1/);\n        if (!matches) {\n            throw rule.error(\"A path is required when using the `@config` directive.\");\n        }\n        let inputPath = matches[2];\n        if (_path.default.isAbsolute(inputPath)) {\n            throw rule.error(\"The `@config` directive cannot be used with an absolute path.\");\n        }\n        configPath = _path.default.resolve(_path.default.dirname(relativeTo), inputPath);\n        if (!_fs.default.existsSync(configPath)) {\n            throw rule.error(`The config file at \"${inputPath}\" does not exist. Make sure the path is correct and the file exists.`);\n        }\n        rule.remove();\n    });\n    return configPath ? configPath : null;\n}\n"]}}