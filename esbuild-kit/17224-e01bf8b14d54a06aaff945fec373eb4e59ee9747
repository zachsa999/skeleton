{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});const _setupTrackingContext=_interop_require_default(require(\"./lib/setupTrackingContext\"));const _processTailwindFeatures=_interop_require_default(require(\"./processTailwindFeatures\"));const _sharedState=require(\"./lib/sharedState\");const _findAtConfigPath=require(\"./lib/findAtConfigPath\");function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}__name(_interop_require_default,\"_interop_require_default\");module.exports=__name(function tailwindcss(configOrPath){return{postcssPlugin:\"tailwindcss\",plugins:[_sharedState.env.DEBUG&&function(root){console.log(\"\\n\");console.time(\"JIT TOTAL\");return root},function(root,result){var _findAtConfigPath1;configOrPath=(_findAtConfigPath1=(0,_findAtConfigPath.findAtConfigPath)(root,result))!==null&&_findAtConfigPath1!==void 0?_findAtConfigPath1:configOrPath;let context=(0,_setupTrackingContext.default)(configOrPath);if(root.type===\"document\"){let roots=root.nodes.filter(node=>node.type===\"root\");for(const root2 of roots){if(root2.type===\"root\"){(0,_processTailwindFeatures.default)(context)(root2,result)}}return}(0,_processTailwindFeatures.default)(context)(root,result)},false,_sharedState.env.DEBUG&&function(root){console.timeEnd(\"JIT TOTAL\");console.log(\"\\n\");return root}].filter(Boolean)}},\"tailwindcss\");module.exports.postcss=true;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,MAAM,sBAAsC,yBAAyB,QAAQ,4BAA4B,CAAC,EAC1G,MAAM,yBAAyC,yBAAyB,QAAQ,2BAA2B,CAAC,EAC5G,MAAM,aAAe,QAAQ,mBAAmB,EAChD,MAAM,kBAAoB,QAAQ,wBAAwB,EAC1D,SAAS,yBAAyB,IAAK,CACnC,OAAO,KAAO,IAAI,WAAa,IAAM,CACjC,QAAS,GACb,CACJ,CAJS,4DAKT,OAAO,QAAU,gBAAS,YAAY,aAAc,CAChD,MAAO,CACH,cAAe,cACf,QAAS,CACL,aAAa,IAAI,OAAS,SAAS,KAAM,CACrC,QAAQ,IAAI,IAAI,EAChB,QAAQ,KAAK,WAAW,EACxB,OAAO,IACX,EACA,SAAS,KAAM,OAAQ,CACnB,IAAI,mBAGJ,cAAgB,oBAAsB,EAAG,kBAAkB,kBAAkB,KAAM,MAAM,KAAO,MAAQ,qBAAuB,OAAS,mBAAqB,aAC7J,IAAI,SAAW,EAAG,sBAAsB,SAAS,YAAY,EAC7D,GAAI,KAAK,OAAS,WAAY,CAC1B,IAAI,MAAQ,KAAK,MAAM,OAAQ,MAAO,KAAK,OAAS,MAAM,EAC1D,UAAWA,SAAQ,MAAM,CACrB,GAAIA,MAAK,OAAS,OAAQ,EACrB,EAAG,yBAAyB,SAAS,OAAO,EAAEA,MAAM,MAAM,CAC/D,CACJ,CACA,MACJ,EACC,EAAG,yBAAyB,SAAS,OAAO,EAAE,KAAM,MAAM,CAC/D,EACA,MAkDA,aAAa,IAAI,OAAS,SAAS,KAAM,CACrC,QAAQ,QAAQ,WAAW,EAC3B,QAAQ,IAAI,IAAI,EAChB,OAAO,IACX,CACJ,EAAE,OAAO,OAAO,CACpB,CACJ,EAnFiB,eAoFjB,OAAO,QAAQ,QAAU","names":["root"],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/plugin.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nconst _setupTrackingContext = /*#__PURE__*/ _interop_require_default(require(\"./lib/setupTrackingContext\"));\nconst _processTailwindFeatures = /*#__PURE__*/ _interop_require_default(require(\"./processTailwindFeatures\"));\nconst _sharedState = require(\"./lib/sharedState\");\nconst _findAtConfigPath = require(\"./lib/findAtConfigPath\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nmodule.exports = function tailwindcss(configOrPath) {\n    return {\n        postcssPlugin: \"tailwindcss\",\n        plugins: [\n            _sharedState.env.DEBUG && function(root) {\n                console.log(\"\\n\");\n                console.time(\"JIT TOTAL\");\n                return root;\n            },\n            function(root, result) {\n                var _findAtConfigPath1;\n                // Use the path for the `@config` directive if it exists, otherwise use the\n                // path for the file being processed\n                configOrPath = (_findAtConfigPath1 = (0, _findAtConfigPath.findAtConfigPath)(root, result)) !== null && _findAtConfigPath1 !== void 0 ? _findAtConfigPath1 : configOrPath;\n                let context = (0, _setupTrackingContext.default)(configOrPath);\n                if (root.type === \"document\") {\n                    let roots = root.nodes.filter((node)=>node.type === \"root\");\n                    for (const root of roots){\n                        if (root.type === \"root\") {\n                            (0, _processTailwindFeatures.default)(context)(root, result);\n                        }\n                    }\n                    return;\n                }\n                (0, _processTailwindFeatures.default)(context)(root, result);\n            },\n            false && function lightningCssPlugin(_root, result) {\n                let postcss = require(\"postcss\");\n                let lightningcss = require(\"lightningcss\");\n                let browserslist = require(\"browserslist\");\n                try {\n                    let transformed = lightningcss.transform({\n                        filename: result.opts.from,\n                        code: Buffer.from(result.root.toString()),\n                        minify: false,\n                        sourceMap: !!result.map,\n                        inputSourceMap: result.map ? result.map.toString() : undefined,\n                        targets: typeof process !== \"undefined\" && process.env.JEST_WORKER_ID ? {\n                            chrome: 106 << 16\n                        } : lightningcss.browserslistToTargets(browserslist(require(\"../package.json\").browserslist)),\n                        drafts: {\n                            nesting: true,\n                            customMedia: true\n                        }\n                    });\n                    var _result_map;\n                    result.map = Object.assign((_result_map = result.map) !== null && _result_map !== void 0 ? _result_map : {}, {\n                        toJSON () {\n                            return transformed.map.toJSON();\n                        },\n                        toString () {\n                            return transformed.map.toString();\n                        }\n                    });\n                    result.root = postcss.parse(transformed.code.toString(\"utf8\"));\n                } catch (err) {\n                    if (typeof process !== \"undefined\" && process.env.JEST_WORKER_ID) {\n                        let lines = err.source.split(\"\\n\");\n                        err = new Error([\n                            \"Error formatting using Lightning CSS:\",\n                            \"\",\n                            ...[\n                                \"```css\",\n                                ...lines.slice(Math.max(err.loc.line - 3, 0), err.loc.line),\n                                \" \".repeat(err.loc.column - 1) + \"^-- \" + err.toString(),\n                                ...lines.slice(err.loc.line, err.loc.line + 2),\n                                \"```\"\n                            ]\n                        ].join(\"\\n\"));\n                    }\n                    if (Error.captureStackTrace) {\n                        Error.captureStackTrace(err, lightningCssPlugin);\n                    }\n                    throw err;\n                }\n            },\n            _sharedState.env.DEBUG && function(root) {\n                console.timeEnd(\"JIT TOTAL\");\n                console.log(\"\\n\");\n                return root;\n            }\n        ].filter(Boolean)\n    };\n};\nmodule.exports.postcss = true;\n"]}}