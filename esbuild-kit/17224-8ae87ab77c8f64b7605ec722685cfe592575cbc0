{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"default\",{enumerable:true,get:function(){return _default}});const _postcssselectorparser=_interop_require_default(require(\"postcss-selector-parser\"));function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}__name(_interop_require_default,\"_interop_require_default\");function _default(prefix,selector,prependNegative=false){if(prefix===\"\"){return selector}let ast=typeof selector===\"string\"?(0,_postcssselectorparser.default)().astSync(selector):selector;ast.walkClasses(classSelector=>{let baseClass=classSelector.value;let shouldPlaceNegativeBeforePrefix=prependNegative&&baseClass.startsWith(\"-\");classSelector.value=shouldPlaceNegativeBeforePrefix?`-${prefix}${baseClass.slice(1)}`:`${prefix}${baseClass}`});return typeof selector===\"string\"?ast.toString():ast}__name(_default,\"_default\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,OAAO,eAAe,QAWlB,UAAW,CACX,WAAY,KACZ,IAAK,UAAW,CACZ,OAAO,QACX,CACJ,CAAC,EACD,MAAM,uBAAuC,yBAAyB,QAAQ,yBAAyB,CAAC,EACxG,SAAS,yBAAyB,IAAK,CACnC,OAAO,KAAO,IAAI,WAAa,IAAM,CACjC,QAAS,GACb,CACJ,CAJS,4DAKT,SAAS,SAAS,OAAQ,SAAU,gBAAkB,MAAO,CACzD,GAAI,SAAW,GAAI,CACf,OAAO,QACX,CACA,IAAI,IAAM,OAAO,WAAa,UAAY,EAAG,uBAAuB,SAAS,EAAE,QAAQ,QAAQ,EAAI,SACnG,IAAI,YAAa,eAAgB,CAC7B,IAAI,UAAY,cAAc,MAC9B,IAAI,gCAAkC,iBAAmB,UAAU,WAAW,GAAG,EACjF,cAAc,MAAQ,gCAAkC,IAAI,SAAS,UAAU,MAAM,CAAC,IAAM,GAAG,SAAS,WAC5G,CAAC,EACD,OAAO,OAAO,WAAa,SAAW,IAAI,SAAS,EAAI,GAC3D,CAXS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/util/prefixSelector.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, /**\n * @template {string | import('postcss-selector-parser').Root} T\n *\n * Prefix all classes in the selector with the given prefix\n *\n * It can take either a string or a selector AST and will return the same type\n *\n * @param {string} prefix\n * @param {T} selector\n * @param {boolean} prependNegative\n * @returns {T}\n */ \"default\", {\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n});\nconst _postcssselectorparser = /*#__PURE__*/ _interop_require_default(require(\"postcss-selector-parser\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _default(prefix, selector, prependNegative = false) {\n    if (prefix === \"\") {\n        return selector;\n    }\n    let ast = typeof selector === \"string\" ? (0, _postcssselectorparser.default)().astSync(selector) : selector;\n    ast.walkClasses((classSelector)=>{\n        let baseClass = classSelector.value;\n        let shouldPlaceNegativeBeforePrefix = prependNegative && baseClass.startsWith(\"-\");\n        classSelector.value = shouldPlaceNegativeBeforePrefix ? `-${prefix}${baseClass.slice(1)}` : `${prefix}${baseClass}`;\n    });\n    return typeof selector === \"string\" ? ast.toString() : ast;\n}\n"]}}