{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});const utils=require(\"../../utils\");class EntryFilter{constructor(_settings,_micromatchOptions){this._settings=_settings;this._micromatchOptions=_micromatchOptions;this.index=new Map}getFilter(positive,negative){const positiveRe=utils.pattern.convertPatternsToRe(positive,this._micromatchOptions);const negativeRe=utils.pattern.convertPatternsToRe(negative,this._micromatchOptions);return entry=>this._filter(entry,positiveRe,negativeRe)}_filter(entry,positiveRe,negativeRe){if(this._settings.unique&&this._isDuplicateEntry(entry)){return false}if(this._onlyFileFilter(entry)||this._onlyDirectoryFilter(entry)){return false}if(this._isSkippedByAbsoluteNegativePatterns(entry.path,negativeRe)){return false}const filepath=this._settings.baseNameMatch?entry.name:entry.path;const isDirectory=entry.dirent.isDirectory();const isMatched=this._isMatchToPatterns(filepath,positiveRe,isDirectory)&&!this._isMatchToPatterns(entry.path,negativeRe,isDirectory);if(this._settings.unique&&isMatched){this._createIndexRecord(entry)}return isMatched}_isDuplicateEntry(entry){return this.index.has(entry.path)}_createIndexRecord(entry){this.index.set(entry.path,void 0)}_onlyFileFilter(entry){return this._settings.onlyFiles&&!entry.dirent.isFile()}_onlyDirectoryFilter(entry){return this._settings.onlyDirectories&&!entry.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(entryPath,patternsRe){if(!this._settings.absolute){return false}const fullpath=utils.path.makeAbsolute(this._settings.cwd,entryPath);return utils.pattern.matchAny(fullpath,patternsRe)}_isMatchToPatterns(entryPath,patternsRe,isDirectory){const filepath=utils.path.removeLeadingDotSegment(entryPath);const isMatched=utils.pattern.matchAny(filepath,patternsRe);if(!isMatched&&isDirectory){return utils.pattern.matchAny(filepath+\"/\",patternsRe)}return isMatched}}__name(EntryFilter,\"EntryFilter\");exports.default=EntryFilter;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CAAE,MAAO,IAAK,CAAC,EAC5D,MAAM,MAAQ,QAAQ,aAAa,EACnC,MAAM,WAAY,CACd,YAAY,UAAW,mBAAoB,CACvC,KAAK,UAAY,UACjB,KAAK,mBAAqB,mBAC1B,KAAK,MAAQ,IAAI,GACrB,CACA,UAAU,SAAU,SAAU,CAC1B,MAAM,WAAa,MAAM,QAAQ,oBAAoB,SAAU,KAAK,kBAAkB,EACtF,MAAM,WAAa,MAAM,QAAQ,oBAAoB,SAAU,KAAK,kBAAkB,EACtF,OAAQ,OAAU,KAAK,QAAQ,MAAO,WAAY,UAAU,CAChE,CACA,QAAQ,MAAO,WAAY,WAAY,CACnC,GAAI,KAAK,UAAU,QAAU,KAAK,kBAAkB,KAAK,EAAG,CACxD,MAAO,MACX,CACA,GAAI,KAAK,gBAAgB,KAAK,GAAK,KAAK,qBAAqB,KAAK,EAAG,CACjE,MAAO,MACX,CACA,GAAI,KAAK,qCAAqC,MAAM,KAAM,UAAU,EAAG,CACnE,MAAO,MACX,CACA,MAAM,SAAW,KAAK,UAAU,cAAgB,MAAM,KAAO,MAAM,KACnE,MAAM,YAAc,MAAM,OAAO,YAAY,EAC7C,MAAM,UAAY,KAAK,mBAAmB,SAAU,WAAY,WAAW,GAAK,CAAC,KAAK,mBAAmB,MAAM,KAAM,WAAY,WAAW,EAC5I,GAAI,KAAK,UAAU,QAAU,UAAW,CACpC,KAAK,mBAAmB,KAAK,CACjC,CACA,OAAO,SACX,CACA,kBAAkB,MAAO,CACrB,OAAO,KAAK,MAAM,IAAI,MAAM,IAAI,CACpC,CACA,mBAAmB,MAAO,CACtB,KAAK,MAAM,IAAI,MAAM,KAAM,MAAS,CACxC,CACA,gBAAgB,MAAO,CACnB,OAAO,KAAK,UAAU,WAAa,CAAC,MAAM,OAAO,OAAO,CAC5D,CACA,qBAAqB,MAAO,CACxB,OAAO,KAAK,UAAU,iBAAmB,CAAC,MAAM,OAAO,YAAY,CACvE,CACA,qCAAqC,UAAW,WAAY,CACxD,GAAI,CAAC,KAAK,UAAU,SAAU,CAC1B,MAAO,MACX,CACA,MAAM,SAAW,MAAM,KAAK,aAAa,KAAK,UAAU,IAAK,SAAS,EACtE,OAAO,MAAM,QAAQ,SAAS,SAAU,UAAU,CACtD,CACA,mBAAmB,UAAW,WAAY,YAAa,CACnD,MAAM,SAAW,MAAM,KAAK,wBAAwB,SAAS,EAE7D,MAAM,UAAY,MAAM,QAAQ,SAAS,SAAU,UAAU,EAG7D,GAAI,CAAC,WAAa,YAAa,CAC3B,OAAO,MAAM,QAAQ,SAAS,SAAW,IAAK,UAAU,CAC5D,CACA,OAAO,SACX,CACJ,CA3DM,kCA4DN,QAAQ,QAAU","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/filters/entry.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../../utils\");\r\nclass EntryFilter {\r\n    constructor(_settings, _micromatchOptions) {\r\n        this._settings = _settings;\r\n        this._micromatchOptions = _micromatchOptions;\r\n        this.index = new Map();\r\n    }\r\n    getFilter(positive, negative) {\r\n        const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);\r\n        const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);\r\n        return (entry) => this._filter(entry, positiveRe, negativeRe);\r\n    }\r\n    _filter(entry, positiveRe, negativeRe) {\r\n        if (this._settings.unique && this._isDuplicateEntry(entry)) {\r\n            return false;\r\n        }\r\n        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {\r\n            return false;\r\n        }\r\n        if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {\r\n            return false;\r\n        }\r\n        const filepath = this._settings.baseNameMatch ? entry.name : entry.path;\r\n        const isDirectory = entry.dirent.isDirectory();\r\n        const isMatched = this._isMatchToPatterns(filepath, positiveRe, isDirectory) && !this._isMatchToPatterns(entry.path, negativeRe, isDirectory);\r\n        if (this._settings.unique && isMatched) {\r\n            this._createIndexRecord(entry);\r\n        }\r\n        return isMatched;\r\n    }\r\n    _isDuplicateEntry(entry) {\r\n        return this.index.has(entry.path);\r\n    }\r\n    _createIndexRecord(entry) {\r\n        this.index.set(entry.path, undefined);\r\n    }\r\n    _onlyFileFilter(entry) {\r\n        return this._settings.onlyFiles && !entry.dirent.isFile();\r\n    }\r\n    _onlyDirectoryFilter(entry) {\r\n        return this._settings.onlyDirectories && !entry.dirent.isDirectory();\r\n    }\r\n    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {\r\n        if (!this._settings.absolute) {\r\n            return false;\r\n        }\r\n        const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);\r\n        return utils.pattern.matchAny(fullpath, patternsRe);\r\n    }\r\n    _isMatchToPatterns(entryPath, patternsRe, isDirectory) {\r\n        const filepath = utils.path.removeLeadingDotSegment(entryPath);\r\n        // Trying to match files and directories by patterns.\r\n        const isMatched = utils.pattern.matchAny(filepath, patternsRe);\r\n        // A pattern with a trailling slash can be used for directory matching.\r\n        // To apply such pattern, we need to add a tralling slash to the path.\r\n        if (!isMatched && isDirectory) {\r\n            return utils.pattern.matchAny(filepath + '/', patternsRe);\r\n        }\r\n        return isMatched;\r\n    }\r\n}\r\nexports.default = EntryFilter;\r\n"]}}