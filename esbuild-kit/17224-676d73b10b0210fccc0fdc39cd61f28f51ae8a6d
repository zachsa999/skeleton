{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const resolve=require(\"resolve\");const moduleDirectories=[\"web_modules\",\"node_modules\"];function resolveModule(id,opts){return new Promise((res,rej)=>{resolve(id,opts,(err,path)=>err?rej(err):res(path))})}__name(resolveModule,\"resolveModule\");module.exports=function(id,base,options){const paths=options.path;const resolveOpts={basedir:base,moduleDirectory:moduleDirectories.concat(options.addModulesDirectories),paths,extensions:[\".css\"],packageFilter:__name(function processPackage(pkg){if(pkg.style)pkg.main=pkg.style;else if(!pkg.main||!/\\.css$/.test(pkg.main))pkg.main=\"index.css\";return pkg},\"processPackage\"),preserveSymlinks:false};return resolveModule(`./${id}`,resolveOpts).catch(()=>resolveModule(id,resolveOpts)).catch(()=>{if(paths.indexOf(base)===-1)paths.unshift(base);throw new Error(`Failed to find '${id}'\n  in [\n    ${paths.join(\",\\n        \")}\n  ]`)})};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAGA,MAAM,QAAU,QAAQ,SAAS,EAEjC,MAAM,kBAAoB,CAAC,cAAe,cAAc,EAExD,SAAS,cAAc,GAAI,KAAM,CAC/B,OAAO,IAAI,QAAQ,CAAC,IAAK,MAAQ,CAC/B,QAAQ,GAAI,KAAM,CAAC,IAAK,OAAU,IAAM,IAAI,GAAG,EAAI,IAAI,IAAI,CAAE,CAC/D,CAAC,CACH,CAJS,sCAMT,OAAO,QAAU,SAAU,GAAI,KAAM,QAAS,CAC5C,MAAM,MAAQ,QAAQ,KAEtB,MAAM,YAAc,CAClB,QAAS,KACT,gBAAiB,kBAAkB,OAAO,QAAQ,qBAAqB,EACvE,MACA,WAAY,CAAC,MAAM,EACnB,cAAe,gBAAS,eAAe,IAAK,CAC1C,GAAI,IAAI,MAAO,IAAI,KAAO,IAAI,cACrB,CAAC,IAAI,MAAQ,CAAC,SAAS,KAAK,IAAI,IAAI,EAAG,IAAI,KAAO,YAC3D,OAAO,GACT,EAJe,kBAKf,iBAAkB,KACpB,EAEA,OAAO,cAAc,KAAK,KAAM,WAAW,EACxC,MAAM,IAAM,cAAc,GAAI,WAAW,CAAC,EAC1C,MAAM,IAAM,CACX,GAAI,MAAM,QAAQ,IAAI,IAAM,GAAI,MAAM,QAAQ,IAAI,EAElD,MAAM,IAAI,MACR,mBAAmB;AAAA;AAAA,MAErB,MAAM,KAAK,aAAa;AAAA,IAExB,CACF,CAAC,CACL","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/postcss-import@15.1.0_postcss@8.4.24/node_modules/postcss-import/lib/resolve-id.js"],"sourcesContent":["\"use strict\"\n\n// external tooling\nconst resolve = require(\"resolve\")\n\nconst moduleDirectories = [\"web_modules\", \"node_modules\"]\n\nfunction resolveModule(id, opts) {\n  return new Promise((res, rej) => {\n    resolve(id, opts, (err, path) => (err ? rej(err) : res(path)))\n  })\n}\n\nmodule.exports = function (id, base, options) {\n  const paths = options.path\n\n  const resolveOpts = {\n    basedir: base,\n    moduleDirectory: moduleDirectories.concat(options.addModulesDirectories),\n    paths,\n    extensions: [\".css\"],\n    packageFilter: function processPackage(pkg) {\n      if (pkg.style) pkg.main = pkg.style\n      else if (!pkg.main || !/\\.css$/.test(pkg.main)) pkg.main = \"index.css\"\n      return pkg\n    },\n    preserveSymlinks: false,\n  }\n\n  return resolveModule(`./${id}`, resolveOpts)\n    .catch(() => resolveModule(id, resolveOpts))\n    .catch(() => {\n      if (paths.indexOf(base) === -1) paths.unshift(base)\n\n      throw new Error(\n        `Failed to find '${id}'\n  in [\n    ${paths.join(\",\\n        \")}\n  ]`\n      )\n    })\n}\n"]}}