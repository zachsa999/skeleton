{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"default\",{enumerable:true,get:function(){return normalizeTailwindDirectives}});const _log=_interop_require_default(require(\"../util/log\"));function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}__name(_interop_require_default,\"_interop_require_default\");function normalizeTailwindDirectives(root){let tailwindDirectives=new Set;let layerDirectives=new Set;let applyDirectives=new Set;root.walkAtRules(atRule=>{if(atRule.name===\"apply\"){applyDirectives.add(atRule)}if(atRule.name===\"import\"){if(atRule.params==='\"tailwindcss/base\"'||atRule.params===\"'tailwindcss/base'\"){atRule.name=\"tailwind\";atRule.params=\"base\"}else if(atRule.params==='\"tailwindcss/components\"'||atRule.params===\"'tailwindcss/components'\"){atRule.name=\"tailwind\";atRule.params=\"components\"}else if(atRule.params==='\"tailwindcss/utilities\"'||atRule.params===\"'tailwindcss/utilities'\"){atRule.name=\"tailwind\";atRule.params=\"utilities\"}else if(atRule.params==='\"tailwindcss/screens\"'||atRule.params===\"'tailwindcss/screens'\"||atRule.params==='\"tailwindcss/variants\"'||atRule.params===\"'tailwindcss/variants'\"){atRule.name=\"tailwind\";atRule.params=\"variants\"}}if(atRule.name===\"tailwind\"){if(atRule.params===\"screens\"){atRule.params=\"variants\"}tailwindDirectives.add(atRule.params)}if([\"layer\",\"responsive\",\"variants\"].includes(atRule.name)){if([\"responsive\",\"variants\"].includes(atRule.name)){_log.default.warn(`${atRule.name}-at-rule-deprecated`,[`The \\`@${atRule.name}\\` directive has been deprecated in Tailwind CSS v3.0.`,`Use \\`@layer utilities\\` or \\`@layer components\\` instead.`,\"https://tailwindcss.com/docs/upgrade-guide#replace-variants-with-layer\"])}layerDirectives.add(atRule)}});if(!tailwindDirectives.has(\"base\")||!tailwindDirectives.has(\"components\")||!tailwindDirectives.has(\"utilities\")){for(let rule of layerDirectives){if(rule.name===\"layer\"&&[\"base\",\"components\",\"utilities\"].includes(rule.params)){if(!tailwindDirectives.has(rule.params)){throw rule.error(`\\`@layer ${rule.params}\\` is used but no matching \\`@tailwind ${rule.params}\\` directive is present.`)}}else if(rule.name===\"responsive\"){if(!tailwindDirectives.has(\"utilities\")){throw rule.error(\"`@responsive` is used but `@tailwind utilities` is missing.\")}}else if(rule.name===\"variants\"){if(!tailwindDirectives.has(\"utilities\")){throw rule.error(\"`@variants` is used but `@tailwind utilities` is missing.\")}}}}return{tailwindDirectives,applyDirectives}}__name(normalizeTailwindDirectives,\"normalizeTailwindDirectives\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,OAAO,eAAe,QAAS,UAAW,CACtC,WAAY,KACZ,IAAK,UAAW,CACZ,OAAO,2BACX,CACJ,CAAC,EACD,MAAM,KAAqB,yBAAyB,QAAQ,aAAa,CAAC,EAC1E,SAAS,yBAAyB,IAAK,CACnC,OAAO,KAAO,IAAI,WAAa,IAAM,CACjC,QAAS,GACb,CACJ,CAJS,4DAKT,SAAS,4BAA4B,KAAM,CACvC,IAAI,mBAAqB,IAAI,IAC7B,IAAI,gBAAkB,IAAI,IAC1B,IAAI,gBAAkB,IAAI,IAC1B,KAAK,YAAa,QAAS,CACvB,GAAI,OAAO,OAAS,QAAS,CACzB,gBAAgB,IAAI,MAAM,CAC9B,CACA,GAAI,OAAO,OAAS,SAAU,CAC1B,GAAI,OAAO,SAAW,sBAAwB,OAAO,SAAW,qBAAsB,CAClF,OAAO,KAAO,WACd,OAAO,OAAS,MACpB,SAAW,OAAO,SAAW,4BAA8B,OAAO,SAAW,2BAA4B,CACrG,OAAO,KAAO,WACd,OAAO,OAAS,YACpB,SAAW,OAAO,SAAW,2BAA6B,OAAO,SAAW,0BAA2B,CACnG,OAAO,KAAO,WACd,OAAO,OAAS,WACpB,SAAW,OAAO,SAAW,yBAA2B,OAAO,SAAW,yBAA2B,OAAO,SAAW,0BAA4B,OAAO,SAAW,yBAA0B,CAC3L,OAAO,KAAO,WACd,OAAO,OAAS,UACpB,CACJ,CACA,GAAI,OAAO,OAAS,WAAY,CAC5B,GAAI,OAAO,SAAW,UAAW,CAC7B,OAAO,OAAS,UACpB,CACA,mBAAmB,IAAI,OAAO,MAAM,CACxC,CACA,GAAI,CACA,QACA,aACA,UACJ,EAAE,SAAS,OAAO,IAAI,EAAG,CACrB,GAAI,CACA,aACA,UACJ,EAAE,SAAS,OAAO,IAAI,EAAG,CACrB,KAAK,QAAQ,KAAK,GAAG,OAAO,0BAA2B,CACnD,UAAU,OAAO,6DACjB,6DACA,wEACJ,CAAC,CACL,CACA,gBAAgB,IAAI,MAAM,CAC9B,CACJ,CAAC,EACD,GAAI,CAAC,mBAAmB,IAAI,MAAM,GAAK,CAAC,mBAAmB,IAAI,YAAY,GAAK,CAAC,mBAAmB,IAAI,WAAW,EAAG,CAClH,QAAS,QAAQ,gBAAgB,CAC7B,GAAI,KAAK,OAAS,SAAW,CACzB,OACA,aACA,WACJ,EAAE,SAAS,KAAK,MAAM,EAAG,CACrB,GAAI,CAAC,mBAAmB,IAAI,KAAK,MAAM,EAAG,CACtC,MAAM,KAAK,MAAM,YAAY,KAAK,gDAAgD,KAAK,gCAAgC,CAC3H,CACJ,SAAW,KAAK,OAAS,aAAc,CACnC,GAAI,CAAC,mBAAmB,IAAI,WAAW,EAAG,CACtC,MAAM,KAAK,MAAM,6DAA6D,CAClF,CACJ,SAAW,KAAK,OAAS,WAAY,CACjC,GAAI,CAAC,mBAAmB,IAAI,WAAW,EAAG,CACtC,MAAM,KAAK,MAAM,2DAA2D,CAChF,CACJ,CACJ,CACJ,CACA,MAAO,CACH,mBACA,eACJ,CACJ,CAxES","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/lib/normalizeTailwindDirectives.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return normalizeTailwindDirectives;\n    }\n});\nconst _log = /*#__PURE__*/ _interop_require_default(require(\"../util/log\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction normalizeTailwindDirectives(root) {\n    let tailwindDirectives = new Set();\n    let layerDirectives = new Set();\n    let applyDirectives = new Set();\n    root.walkAtRules((atRule)=>{\n        if (atRule.name === \"apply\") {\n            applyDirectives.add(atRule);\n        }\n        if (atRule.name === \"import\") {\n            if (atRule.params === '\"tailwindcss/base\"' || atRule.params === \"'tailwindcss/base'\") {\n                atRule.name = \"tailwind\";\n                atRule.params = \"base\";\n            } else if (atRule.params === '\"tailwindcss/components\"' || atRule.params === \"'tailwindcss/components'\") {\n                atRule.name = \"tailwind\";\n                atRule.params = \"components\";\n            } else if (atRule.params === '\"tailwindcss/utilities\"' || atRule.params === \"'tailwindcss/utilities'\") {\n                atRule.name = \"tailwind\";\n                atRule.params = \"utilities\";\n            } else if (atRule.params === '\"tailwindcss/screens\"' || atRule.params === \"'tailwindcss/screens'\" || atRule.params === '\"tailwindcss/variants\"' || atRule.params === \"'tailwindcss/variants'\") {\n                atRule.name = \"tailwind\";\n                atRule.params = \"variants\";\n            }\n        }\n        if (atRule.name === \"tailwind\") {\n            if (atRule.params === \"screens\") {\n                atRule.params = \"variants\";\n            }\n            tailwindDirectives.add(atRule.params);\n        }\n        if ([\n            \"layer\",\n            \"responsive\",\n            \"variants\"\n        ].includes(atRule.name)) {\n            if ([\n                \"responsive\",\n                \"variants\"\n            ].includes(atRule.name)) {\n                _log.default.warn(`${atRule.name}-at-rule-deprecated`, [\n                    `The \\`@${atRule.name}\\` directive has been deprecated in Tailwind CSS v3.0.`,\n                    `Use \\`@layer utilities\\` or \\`@layer components\\` instead.`,\n                    \"https://tailwindcss.com/docs/upgrade-guide#replace-variants-with-layer\"\n                ]);\n            }\n            layerDirectives.add(atRule);\n        }\n    });\n    if (!tailwindDirectives.has(\"base\") || !tailwindDirectives.has(\"components\") || !tailwindDirectives.has(\"utilities\")) {\n        for (let rule of layerDirectives){\n            if (rule.name === \"layer\" && [\n                \"base\",\n                \"components\",\n                \"utilities\"\n            ].includes(rule.params)) {\n                if (!tailwindDirectives.has(rule.params)) {\n                    throw rule.error(`\\`@layer ${rule.params}\\` is used but no matching \\`@tailwind ${rule.params}\\` directive is present.`);\n                }\n            } else if (rule.name === \"responsive\") {\n                if (!tailwindDirectives.has(\"utilities\")) {\n                    throw rule.error(\"`@responsive` is used but `@tailwind utilities` is missing.\");\n                }\n            } else if (rule.name === \"variants\") {\n                if (!tailwindDirectives.has(\"utilities\")) {\n                    throw rule.error(\"`@variants` is used but `@tailwind utilities` is missing.\");\n                }\n            }\n        }\n    }\n    return {\n        tailwindDirectives,\n        applyDirectives\n    };\n}\n"]}}