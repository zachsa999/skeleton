{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"default\",{enumerable:true,get:function(){return getAllConfigs}});const _configfull=_interop_require_default(require(\"../../stubs/config.full.js\"));const _featureFlags=require(\"../featureFlags\");function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}__name(_interop_require_default,\"_interop_require_default\");function getAllConfigs(config){var _config_presets;const configs=((_config_presets=config===null||config===void 0?void 0:config.presets)!==null&&_config_presets!==void 0?_config_presets:[_configfull.default]).slice().reverse().flatMap(preset=>getAllConfigs(preset instanceof Function?preset():preset));const features={respectDefaultRingColorOpacity:{theme:{ringColor:({theme})=>({DEFAULT:\"#3b82f67f\",...theme(\"colors\")})}},disableColorOpacityUtilitiesByDefault:{corePlugins:{backgroundOpacity:false,borderOpacity:false,divideOpacity:false,placeholderOpacity:false,ringOpacity:false,textOpacity:false}}};const experimentals=Object.keys(features).filter(feature=>(0,_featureFlags.flagEnabled)(config,feature)).map(feature=>features[feature]);return[config,...experimentals,...configs]}__name(getAllConfigs,\"getAllConfigs\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,OAAO,eAAe,QAAS,UAAW,CACtC,WAAY,KACZ,IAAK,UAAW,CACZ,OAAO,aACX,CACJ,CAAC,EACD,MAAM,YAA4B,yBAAyB,QAAQ,4BAA4B,CAAC,EAChG,MAAM,cAAgB,QAAQ,iBAAiB,EAC/C,SAAS,yBAAyB,IAAK,CACnC,OAAO,KAAO,IAAI,WAAa,IAAM,CACjC,QAAS,GACb,CACJ,CAJS,4DAKT,SAAS,cAAc,OAAQ,CAC3B,IAAI,gBACJ,MAAM,UAAY,gBAAkB,SAAW,MAAQ,SAAW,OAAS,OAAS,OAAO,WAAa,MAAQ,kBAAoB,OAAS,gBAAkB,CAC3J,YAAY,OAChB,GAAG,MAAM,EAAE,QAAQ,EAAE,QAAS,QAAS,cAAc,kBAAkB,SAAW,OAAO,EAAI,MAAM,CAAC,EACpG,MAAM,SAAW,CAEb,+BAAgC,CAC5B,MAAO,CACH,UAAW,CAAC,CAAE,KAAO,KAAK,CAClB,QAAS,YACT,GAAG,MAAM,QAAQ,CACrB,EACR,CACJ,EACA,sCAAuC,CACnC,YAAa,CACT,kBAAmB,MACnB,cAAe,MACf,cAAe,MACf,mBAAoB,MACpB,YAAa,MACb,YAAa,KACjB,CACJ,CACJ,EACA,MAAM,cAAgB,OAAO,KAAK,QAAQ,EAAE,OAAQ,UAAW,EAAG,cAAc,aAAa,OAAQ,OAAO,CAAC,EAAE,IAAK,SAAU,SAAS,OAAO,CAAC,EAC/I,MAAO,CACH,OACA,GAAG,cACH,GAAG,OACP,CACJ,CAhCS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/util/getAllConfigs.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return getAllConfigs;\n    }\n});\nconst _configfull = /*#__PURE__*/ _interop_require_default(require(\"../../stubs/config.full.js\"));\nconst _featureFlags = require(\"../featureFlags\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction getAllConfigs(config) {\n    var _config_presets;\n    const configs = ((_config_presets = config === null || config === void 0 ? void 0 : config.presets) !== null && _config_presets !== void 0 ? _config_presets : [\n        _configfull.default\n    ]).slice().reverse().flatMap((preset)=>getAllConfigs(preset instanceof Function ? preset() : preset));\n    const features = {\n        // Add experimental configs here...\n        respectDefaultRingColorOpacity: {\n            theme: {\n                ringColor: ({ theme  })=>({\n                        DEFAULT: \"#3b82f67f\",\n                        ...theme(\"colors\")\n                    })\n            }\n        },\n        disableColorOpacityUtilitiesByDefault: {\n            corePlugins: {\n                backgroundOpacity: false,\n                borderOpacity: false,\n                divideOpacity: false,\n                placeholderOpacity: false,\n                ringOpacity: false,\n                textOpacity: false\n            }\n        }\n    };\n    const experimentals = Object.keys(features).filter((feature)=>(0, _featureFlags.flagEnabled)(config, feature)).map((feature)=>features[feature]);\n    return [\n        config,\n        ...experimentals,\n        ...configs\n    ];\n}\n"]}}