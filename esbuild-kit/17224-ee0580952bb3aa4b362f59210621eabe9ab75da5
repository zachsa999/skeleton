{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}__name(_interopRequireDefault,\"_interopRequireDefault\");var _types=require(\"../parser/tokenizer/types\");var _Transformer=require(\"./Transformer\");var _Transformer2=_interopRequireDefault(_Transformer);class OptionalCatchBindingTransformer extends _Transformer2.default{constructor(tokens,nameManager){super();this.tokens=tokens;this.nameManager=nameManager;;}process(){if(this.tokens.matches2(_types.TokenType._catch,_types.TokenType.braceL)){this.tokens.copyToken();this.tokens.appendCode(` (${this.nameManager.claimFreeName(\"e\")})`);return true}return false}}__name(OptionalCatchBindingTransformer,\"OptionalCatchBindingTransformer\");exports.default=OptionalCatchBindingTransformer;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAAa,OAAO,eAAe,QAAS,aAAc,CAAC,MAAO,IAAI,CAAC,EAAG,SAAS,uBAAuB,IAAK,CAAE,OAAO,KAAO,IAAI,WAAa,IAAM,CAAE,QAAS,GAAI,CAAG,CAArF,wDACnF,IAAI,OAAS,QAAQ,2BAA2B,EAEhD,IAAI,aAAe,QAAQ,eAAe,EAAG,IAAI,cAAgB,uBAAuB,YAAY,EAEnG,MAAM,wCAAwC,cAAc,OAAQ,CACnE,YAAa,OAAS,YAAa,CACjC,MAAM,EAAE,KAAK,OAAS,OAAO,KAAK,YAAc,YAAY,CAC9D,CAEA,SAAU,CACR,GAAI,KAAK,OAAO,SAAS,OAAO,UAAU,OAAQ,OAAO,UAAU,MAAM,EAAG,CAC1E,KAAK,OAAO,UAAU,EACtB,KAAK,OAAO,WAAW,KAAK,KAAK,YAAY,cAAc,GAAG,IAAI,EAClE,MAAO,KACT,CACA,MAAO,MACT,CACF,CAbO,0EAaL,QAAQ,QAAU","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/sucrase@3.32.0/node_modules/sucrase/dist/transformers/OptionalCatchBindingTransformer.js"],"sourcesContent":["\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nvar _types = require('../parser/tokenizer/types');\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n class OptionalCatchBindingTransformer extends _Transformer2.default {\n  constructor( tokens,  nameManager) {\n    super();this.tokens = tokens;this.nameManager = nameManager;;\n  }\n\n  process() {\n    if (this.tokens.matches2(_types.TokenType._catch, _types.TokenType.braceL)) {\n      this.tokens.copyToken();\n      this.tokens.appendCode(` (${this.nameManager.claimFreeName(\"e\")})`);\n      return true;\n    }\n    return false;\n  }\n} exports.default = OptionalCatchBindingTransformer;\n"]}}