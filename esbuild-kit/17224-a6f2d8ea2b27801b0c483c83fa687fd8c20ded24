{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});function _export(target,all){for(var name in all)Object.defineProperty(target,name,{enumerable:true,get:all[name]})}__name(_export,\"_export\");_export(exports,{withAlphaValue:function(){return withAlphaValue},default:function(){return withAlphaVariable}});const _color=require(\"./color\");function withAlphaValue(color,alphaValue,defaultValue){if(typeof color===\"function\"){return color({opacityValue:alphaValue})}let parsed=(0,_color.parseColor)(color,{loose:true});if(parsed===null){return defaultValue}return(0,_color.formatColor)({...parsed,alpha:alphaValue})}__name(withAlphaValue,\"withAlphaValue\");function withAlphaVariable({color,property,variable}){let properties=[].concat(property);if(typeof color===\"function\"){return{[variable]:\"1\",...Object.fromEntries(properties.map(p=>{return[p,color({opacityVariable:variable,opacityValue:`var(${variable})`})]}))}}const parsed=(0,_color.parseColor)(color);if(parsed===null){return Object.fromEntries(properties.map(p=>[p,color]))}if(parsed.alpha!==void 0){return Object.fromEntries(properties.map(p=>[p,color]))}return{[variable]:\"1\",...Object.fromEntries(properties.map(p=>{return[p,(0,_color.formatColor)({...parsed,alpha:`var(${variable})`})]}))}}__name(withAlphaVariable,\"withAlphaVariable\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,SAAS,QAAQ,OAAQ,IAAK,CAC1B,QAAQ,QAAQ,IAAI,OAAO,eAAe,OAAQ,KAAM,CACpD,WAAY,KACZ,IAAK,IAAI,IAAI,CACjB,CAAC,CACL,CALS,0BAMT,QAAQ,QAAS,CACb,eAAgB,UAAW,CACvB,OAAO,cACX,EACA,QAAS,UAAW,CAChB,OAAO,iBACX,CACJ,CAAC,EACD,MAAM,OAAS,QAAQ,SAAS,EAChC,SAAS,eAAe,MAAO,WAAY,aAAc,CACrD,GAAI,OAAO,QAAU,WAAY,CAC7B,OAAO,MAAM,CACT,aAAc,UAClB,CAAC,CACL,CACA,IAAI,QAAU,EAAG,OAAO,YAAY,MAAO,CACvC,MAAO,IACX,CAAC,EACD,GAAI,SAAW,KAAM,CACjB,OAAO,YACX,CACA,OAAQ,EAAG,OAAO,aAAa,CAC3B,GAAG,OACH,MAAO,UACX,CAAC,CACL,CAhBS,wCAiBT,SAAS,kBAAkB,CAAE,MAAQ,SAAW,QAAU,EAAG,CACzD,IAAI,WAAa,CAAC,EAAE,OAAO,QAAQ,EACnC,GAAI,OAAO,QAAU,WAAY,CAC7B,MAAO,CACH,CAAC,QAAQ,EAAG,IACZ,GAAG,OAAO,YAAY,WAAW,IAAK,GAAI,CACtC,MAAO,CACH,EACA,MAAM,CACF,gBAAiB,SACjB,aAAc,OAAO,WACzB,CAAC,CACL,CACJ,CAAC,CAAC,CACN,CACJ,CACA,MAAM,QAAU,EAAG,OAAO,YAAY,KAAK,EAC3C,GAAI,SAAW,KAAM,CACjB,OAAO,OAAO,YAAY,WAAW,IAAK,GAAI,CACtC,EACA,KACJ,CAAC,CAAC,CACV,CACA,GAAI,OAAO,QAAU,OAAW,CAE5B,OAAO,OAAO,YAAY,WAAW,IAAK,GAAI,CACtC,EACA,KACJ,CAAC,CAAC,CACV,CACA,MAAO,CACH,CAAC,QAAQ,EAAG,IACZ,GAAG,OAAO,YAAY,WAAW,IAAK,GAAI,CACtC,MAAO,CACH,GACC,EAAG,OAAO,aAAa,CACpB,GAAG,OACH,MAAO,OAAO,WAClB,CAAC,CACL,CACJ,CAAC,CAAC,CACN,CACJ,CA1CS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/util/withAlphaVariable.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    withAlphaValue: function() {\n        return withAlphaValue;\n    },\n    default: function() {\n        return withAlphaVariable;\n    }\n});\nconst _color = require(\"./color\");\nfunction withAlphaValue(color, alphaValue, defaultValue) {\n    if (typeof color === \"function\") {\n        return color({\n            opacityValue: alphaValue\n        });\n    }\n    let parsed = (0, _color.parseColor)(color, {\n        loose: true\n    });\n    if (parsed === null) {\n        return defaultValue;\n    }\n    return (0, _color.formatColor)({\n        ...parsed,\n        alpha: alphaValue\n    });\n}\nfunction withAlphaVariable({ color , property , variable  }) {\n    let properties = [].concat(property);\n    if (typeof color === \"function\") {\n        return {\n            [variable]: \"1\",\n            ...Object.fromEntries(properties.map((p)=>{\n                return [\n                    p,\n                    color({\n                        opacityVariable: variable,\n                        opacityValue: `var(${variable})`\n                    })\n                ];\n            }))\n        };\n    }\n    const parsed = (0, _color.parseColor)(color);\n    if (parsed === null) {\n        return Object.fromEntries(properties.map((p)=>[\n                p,\n                color\n            ]));\n    }\n    if (parsed.alpha !== undefined) {\n        // Has an alpha value, return color as-is\n        return Object.fromEntries(properties.map((p)=>[\n                p,\n                color\n            ]));\n    }\n    return {\n        [variable]: \"1\",\n        ...Object.fromEntries(properties.map((p)=>{\n            return [\n                p,\n                (0, _color.formatColor)({\n                    ...parsed,\n                    alpha: `var(${variable})`\n                })\n            ];\n        }))\n    };\n}\n"]}}