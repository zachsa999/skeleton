{"code":"(()=>{\nvar __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});(function(global,factory){typeof exports===\"object\"&&typeof module!==\"undefined\"?factory(exports):typeof define===\"function\"&&define.amd?define([\"exports\"],factory):(global=typeof globalThis!==\"undefined\"?globalThis:global||self,factory(global.setArray={}))})(exports,function(exports2){\"use strict\";exports2.get=void 0;exports2.put=void 0;exports2.pop=void 0;class SetArray{constructor(){this._indexes={__proto__:null};this.array=[]}}__name(SetArray,\"SetArray\");(()=>{exports2.get=(strarr,key)=>strarr._indexes[key];exports2.put=(strarr,key)=>{const index=exports2.get(strarr,key);if(index!==void 0)return index;const{array,_indexes:indexes}=strarr;return indexes[key]=array.push(key)-1};exports2.pop=strarr=>{const{array,_indexes:indexes}=strarr;if(array.length===0)return;const last=array.pop();indexes[last]=void 0}})();exports2.SetArray=SetArray;Object.defineProperty(exports2,\"__esModule\",{value:true})});\n})()\n","warnings":[],"map":{"version":3,"mappings":";mHAAC,SAAU,OAAQ,QAAS,CACxB,OAAO,UAAY,UAAY,OAAO,SAAW,YAAc,QAAQ,OAAO,EAC9E,OAAO,SAAW,YAAc,OAAO,IAAM,OAAO,CAAC,SAAS,EAAG,OAAO,GACvE,OAAS,OAAO,aAAe,YAAc,WAAa,QAAU,KAAM,QAAQ,OAAO,SAAW,CAAC,CAAC,EAC3G,GAAG,QAAO,SAAUA,SAAS,CAAE,aAK3BA,SAAQ,IAAM,OAKdA,SAAQ,IAAM,OAIdA,SAAQ,IAAM,OASd,MAAM,QAAS,CACX,aAAc,CACV,KAAK,SAAW,CAAE,UAAW,IAAK,EAClC,KAAK,MAAQ,CAAC,CAClB,CACJ,CALM,6BAML,IAAM,CACHA,SAAQ,IAAM,CAAC,OAAQ,MAAQ,OAAO,SAAS,GAAG,EAClDA,SAAQ,IAAM,CAAC,OAAQ,MAAQ,CAE3B,MAAM,MAAQA,SAAQ,IAAI,OAAQ,GAAG,EACrC,GAAI,QAAU,OACV,OAAO,MACX,KAAM,CAAE,MAAO,SAAU,OAAQ,EAAI,OACrC,OAAQ,QAAQ,GAAG,EAAI,MAAM,KAAK,GAAG,EAAI,CAC7C,EACAA,SAAQ,IAAO,QAAW,CACtB,KAAM,CAAE,MAAO,SAAU,OAAQ,EAAI,OACrC,GAAI,MAAM,SAAW,EACjB,OACJ,MAAM,KAAO,MAAM,IAAI,EACvB,QAAQ,IAAI,EAAI,MACpB,CACJ,GAAG,EAEHA,SAAQ,SAAW,SAEnB,OAAO,eAAeA,SAAS,aAAc,CAAE,MAAO,IAAK,CAAC,CAEhE,CAAE","names":["exports"],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/@jridgewell+set-array@1.1.2/node_modules/@jridgewell/set-array/dist/set-array.umd.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.setArray = {}));\n})(this, (function (exports) { 'use strict';\n\n    /**\n     * Gets the index associated with `key` in the backing array, if it is already present.\n     */\n    exports.get = void 0;\n    /**\n     * Puts `key` into the backing array, if it is not already present. Returns\n     * the index of the `key` in the backing array.\n     */\n    exports.put = void 0;\n    /**\n     * Pops the last added item out of the SetArray.\n     */\n    exports.pop = void 0;\n    /**\n     * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the\n     * index of the `key` in the backing array.\n     *\n     * This is designed to allow synchronizing a second array with the contents of the backing array,\n     * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,\n     * and there are never duplicates.\n     */\n    class SetArray {\n        constructor() {\n            this._indexes = { __proto__: null };\n            this.array = [];\n        }\n    }\n    (() => {\n        exports.get = (strarr, key) => strarr._indexes[key];\n        exports.put = (strarr, key) => {\n            // The key may or may not be present. If it is present, it's a number.\n            const index = exports.get(strarr, key);\n            if (index !== undefined)\n                return index;\n            const { array, _indexes: indexes } = strarr;\n            return (indexes[key] = array.push(key) - 1);\n        };\n        exports.pop = (strarr) => {\n            const { array, _indexes: indexes } = strarr;\n            if (array.length === 0)\n                return;\n            const last = array.pop();\n            indexes[last] = undefined;\n        };\n    })();\n\n    exports.SetArray = SetArray;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=set-array.umd.js.map\n"]}}