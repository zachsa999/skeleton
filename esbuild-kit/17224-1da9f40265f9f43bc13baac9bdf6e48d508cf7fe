{"code":"(()=>{\nvar __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});(function(global,factory){typeof exports===\"object\"&&typeof module!==\"undefined\"?factory(exports):typeof define===\"function\"&&define.amd?define([\"exports\"],factory):(global=typeof globalThis!==\"undefined\"?globalThis:global||self,factory(global.sourcemapCodec={}))})(exports,function(exports2){\"use strict\";const comma=\",\".charCodeAt(0);const semicolon=\";\".charCodeAt(0);const chars=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";const intToChar=new Uint8Array(64);const charToInt=new Uint8Array(128);for(let i=0;i<chars.length;i++){const c=chars.charCodeAt(i);intToChar[i]=c;charToInt[c]=i}const td=typeof TextDecoder!==\"undefined\"?new TextDecoder:typeof Buffer!==\"undefined\"?{decode(buf){const out=Buffer.from(buf.buffer,buf.byteOffset,buf.byteLength);return out.toString()}}:{decode(buf){let out=\"\";for(let i=0;i<buf.length;i++){out+=String.fromCharCode(buf[i])}return out}};function decode(mappings){const state=new Int32Array(5);const decoded=[];let index=0;do{const semi=indexOf(mappings,index);const line=[];let sorted=true;let lastCol=0;state[0]=0;for(let i=index;i<semi;i++){let seg;i=decodeInteger(mappings,i,state,0);const col=state[0];if(col<lastCol)sorted=false;lastCol=col;if(hasMoreVlq(mappings,i,semi)){i=decodeInteger(mappings,i,state,1);i=decodeInteger(mappings,i,state,2);i=decodeInteger(mappings,i,state,3);if(hasMoreVlq(mappings,i,semi)){i=decodeInteger(mappings,i,state,4);seg=[col,state[1],state[2],state[3],state[4]]}else{seg=[col,state[1],state[2],state[3]]}}else{seg=[col]}line.push(seg)}if(!sorted)sort(line);decoded.push(line);index=semi+1}while(index<=mappings.length);return decoded}__name(decode,\"decode\");function indexOf(mappings,index){const idx=mappings.indexOf(\";\",index);return idx===-1?mappings.length:idx}__name(indexOf,\"indexOf\");function decodeInteger(mappings,pos,state,j){let value=0;let shift=0;let integer=0;do{const c=mappings.charCodeAt(pos++);integer=charToInt[c];value|=(integer&31)<<shift;shift+=5}while(integer&32);const shouldNegate=value&1;value>>>=1;if(shouldNegate){value=-2147483648|-value}state[j]+=value;return pos}__name(decodeInteger,\"decodeInteger\");function hasMoreVlq(mappings,i,length){if(i>=length)return false;return mappings.charCodeAt(i)!==comma}__name(hasMoreVlq,\"hasMoreVlq\");function sort(line){line.sort(sortComparator)}__name(sort,\"sort\");function sortComparator(a,b){return a[0]-b[0]}__name(sortComparator,\"sortComparator\");function encode(decoded){const state=new Int32Array(5);const bufLength=1024*16;const subLength=bufLength-36;const buf=new Uint8Array(bufLength);const sub=buf.subarray(0,subLength);let pos=0;let out=\"\";for(let i=0;i<decoded.length;i++){const line=decoded[i];if(i>0){if(pos===bufLength){out+=td.decode(buf);pos=0}buf[pos++]=semicolon}if(line.length===0)continue;state[0]=0;for(let j=0;j<line.length;j++){const segment=line[j];if(pos>subLength){out+=td.decode(sub);buf.copyWithin(0,subLength,pos);pos-=subLength}if(j>0)buf[pos++]=comma;pos=encodeInteger(buf,pos,state,segment,0);if(segment.length===1)continue;pos=encodeInteger(buf,pos,state,segment,1);pos=encodeInteger(buf,pos,state,segment,2);pos=encodeInteger(buf,pos,state,segment,3);if(segment.length===4)continue;pos=encodeInteger(buf,pos,state,segment,4)}}return out+td.decode(buf.subarray(0,pos))}__name(encode,\"encode\");function encodeInteger(buf,pos,state,segment,j){const next=segment[j];let num=next-state[j];state[j]=next;num=num<0?-num<<1|1:num<<1;do{let clamped=num&31;num>>>=5;if(num>0)clamped|=32;buf[pos++]=intToChar[clamped]}while(num>0);return pos}__name(encodeInteger,\"encodeInteger\");exports2.decode=decode;exports2.encode=encode;Object.defineProperty(exports2,\"__esModule\",{value:true})});\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":["exports"],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.15/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.sourcemapCodec = {}));\n})(this, (function (exports) { 'use strict';\n\n    const comma = ','.charCodeAt(0);\n    const semicolon = ';'.charCodeAt(0);\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    const intToChar = new Uint8Array(64); // 64 possible chars.\n    const charToInt = new Uint8Array(128); // z is 122 in ASCII\n    for (let i = 0; i < chars.length; i++) {\n        const c = chars.charCodeAt(i);\n        intToChar[i] = c;\n        charToInt[c] = i;\n    }\n    // Provide a fallback for older environments.\n    const td = typeof TextDecoder !== 'undefined'\n        ? /* #__PURE__ */ new TextDecoder()\n        : typeof Buffer !== 'undefined'\n            ? {\n                decode(buf) {\n                    const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);\n                    return out.toString();\n                },\n            }\n            : {\n                decode(buf) {\n                    let out = '';\n                    for (let i = 0; i < buf.length; i++) {\n                        out += String.fromCharCode(buf[i]);\n                    }\n                    return out;\n                },\n            };\n    function decode(mappings) {\n        const state = new Int32Array(5);\n        const decoded = [];\n        let index = 0;\n        do {\n            const semi = indexOf(mappings, index);\n            const line = [];\n            let sorted = true;\n            let lastCol = 0;\n            state[0] = 0;\n            for (let i = index; i < semi; i++) {\n                let seg;\n                i = decodeInteger(mappings, i, state, 0); // genColumn\n                const col = state[0];\n                if (col < lastCol)\n                    sorted = false;\n                lastCol = col;\n                if (hasMoreVlq(mappings, i, semi)) {\n                    i = decodeInteger(mappings, i, state, 1); // sourcesIndex\n                    i = decodeInteger(mappings, i, state, 2); // sourceLine\n                    i = decodeInteger(mappings, i, state, 3); // sourceColumn\n                    if (hasMoreVlq(mappings, i, semi)) {\n                        i = decodeInteger(mappings, i, state, 4); // namesIndex\n                        seg = [col, state[1], state[2], state[3], state[4]];\n                    }\n                    else {\n                        seg = [col, state[1], state[2], state[3]];\n                    }\n                }\n                else {\n                    seg = [col];\n                }\n                line.push(seg);\n            }\n            if (!sorted)\n                sort(line);\n            decoded.push(line);\n            index = semi + 1;\n        } while (index <= mappings.length);\n        return decoded;\n    }\n    function indexOf(mappings, index) {\n        const idx = mappings.indexOf(';', index);\n        return idx === -1 ? mappings.length : idx;\n    }\n    function decodeInteger(mappings, pos, state, j) {\n        let value = 0;\n        let shift = 0;\n        let integer = 0;\n        do {\n            const c = mappings.charCodeAt(pos++);\n            integer = charToInt[c];\n            value |= (integer & 31) << shift;\n            shift += 5;\n        } while (integer & 32);\n        const shouldNegate = value & 1;\n        value >>>= 1;\n        if (shouldNegate) {\n            value = -0x80000000 | -value;\n        }\n        state[j] += value;\n        return pos;\n    }\n    function hasMoreVlq(mappings, i, length) {\n        if (i >= length)\n            return false;\n        return mappings.charCodeAt(i) !== comma;\n    }\n    function sort(line) {\n        line.sort(sortComparator);\n    }\n    function sortComparator(a, b) {\n        return a[0] - b[0];\n    }\n    function encode(decoded) {\n        const state = new Int32Array(5);\n        const bufLength = 1024 * 16;\n        const subLength = bufLength - 36;\n        const buf = new Uint8Array(bufLength);\n        const sub = buf.subarray(0, subLength);\n        let pos = 0;\n        let out = '';\n        for (let i = 0; i < decoded.length; i++) {\n            const line = decoded[i];\n            if (i > 0) {\n                if (pos === bufLength) {\n                    out += td.decode(buf);\n                    pos = 0;\n                }\n                buf[pos++] = semicolon;\n            }\n            if (line.length === 0)\n                continue;\n            state[0] = 0;\n            for (let j = 0; j < line.length; j++) {\n                const segment = line[j];\n                // We can push up to 5 ints, each int can take at most 7 chars, and we\n                // may push a comma.\n                if (pos > subLength) {\n                    out += td.decode(sub);\n                    buf.copyWithin(0, subLength, pos);\n                    pos -= subLength;\n                }\n                if (j > 0)\n                    buf[pos++] = comma;\n                pos = encodeInteger(buf, pos, state, segment, 0); // genColumn\n                if (segment.length === 1)\n                    continue;\n                pos = encodeInteger(buf, pos, state, segment, 1); // sourcesIndex\n                pos = encodeInteger(buf, pos, state, segment, 2); // sourceLine\n                pos = encodeInteger(buf, pos, state, segment, 3); // sourceColumn\n                if (segment.length === 4)\n                    continue;\n                pos = encodeInteger(buf, pos, state, segment, 4); // namesIndex\n            }\n        }\n        return out + td.decode(buf.subarray(0, pos));\n    }\n    function encodeInteger(buf, pos, state, segment, j) {\n        const next = segment[j];\n        let num = next - state[j];\n        state[j] = next;\n        num = num < 0 ? (-num << 1) | 1 : num << 1;\n        do {\n            let clamped = num & 0b011111;\n            num >>>= 5;\n            if (num > 0)\n                clamped |= 0b100000;\n            buf[pos++] = intToChar[clamped];\n        } while (num > 0);\n        return pos;\n    }\n\n    exports.decode = decode;\n    exports.encode = encode;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=sourcemap-codec.umd.js.map\n"]}}