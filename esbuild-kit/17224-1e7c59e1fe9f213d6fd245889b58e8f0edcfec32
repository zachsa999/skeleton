{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"default\",{enumerable:true,get:function(){return getModuleDependencies}});const _fs=_interop_require_default(require(\"fs\"));const _path=_interop_require_default(require(\"path\"));function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}__name(_interop_require_default,\"_interop_require_default\");let jsExtensions=[\".js\",\".cjs\",\".mjs\"];let jsResolutionOrder=[\"\",\".js\",\".cjs\",\".mjs\",\".ts\",\".cts\",\".mts\",\".jsx\",\".tsx\"];let tsResolutionOrder=[\"\",\".ts\",\".cts\",\".mts\",\".tsx\",\".js\",\".cjs\",\".mjs\",\".jsx\"];function resolveWithExtension(file,extensions){for(let ext of extensions){let full=`${file}${ext}`;if(_fs.default.existsSync(full)&&_fs.default.statSync(full).isFile()){return full}}for(let ext of extensions){let full=`${file}/index${ext}`;if(_fs.default.existsSync(full)){return full}}return null}__name(resolveWithExtension,\"resolveWithExtension\");function*_getModuleDependencies(filename,base,seen,ext=_path.default.extname(filename)){let absoluteFile=resolveWithExtension(_path.default.resolve(base,filename),jsExtensions.includes(ext)?jsResolutionOrder:tsResolutionOrder);if(absoluteFile===null)return;if(seen.has(absoluteFile))return;seen.add(absoluteFile);yield absoluteFile;base=_path.default.dirname(absoluteFile);ext=_path.default.extname(absoluteFile);let contents=_fs.default.readFileSync(absoluteFile,\"utf-8\");for(let match of[...contents.matchAll(/import[\\s\\S]*?['\"](.{3,}?)['\"]/gi),...contents.matchAll(/import[\\s\\S]*from[\\s\\S]*?['\"](.{3,}?)['\"]/gi),...contents.matchAll(/require\\(['\"`](.+)['\"`]\\)/gi)]){if(!match[1].startsWith(\".\"))continue;yield*_getModuleDependencies(match[1],base,seen,ext)}}__name(_getModuleDependencies,\"_getModuleDependencies\");function getModuleDependencies(absoluteFilePath){if(absoluteFilePath===null)return new Set;return new Set(_getModuleDependencies(absoluteFilePath,_path.default.dirname(absoluteFilePath),new Set))}__name(getModuleDependencies,\"getModuleDependencies\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,OAAO,eAAe,QAAS,UAAW,CACtC,WAAY,KACZ,IAAK,UAAW,CACZ,OAAO,qBACX,CACJ,CAAC,EACD,MAAM,IAAoB,yBAAyB,QAAQ,IAAI,CAAC,EAChE,MAAM,MAAsB,yBAAyB,QAAQ,MAAM,CAAC,EACpE,SAAS,yBAAyB,IAAK,CACnC,OAAO,KAAO,IAAI,WAAa,IAAM,CACjC,QAAS,GACb,CACJ,CAJS,4DAKT,IAAI,aAAe,CACf,MACA,OACA,MACJ,EAWA,IAAI,kBAAoB,CACpB,GACA,MACA,OACA,OACA,MACA,OACA,OACA,OACA,MACJ,EACA,IAAI,kBAAoB,CACpB,GACA,MACA,OACA,OACA,OACA,MACA,OACA,OACA,MACJ,EACA,SAAS,qBAAqB,KAAM,WAAY,CAE5C,QAAS,OAAO,WAAW,CACvB,IAAI,KAAO,GAAG,OAAO,MACrB,GAAI,IAAI,QAAQ,WAAW,IAAI,GAAK,IAAI,QAAQ,SAAS,IAAI,EAAE,OAAO,EAAG,CACrE,OAAO,IACX,CACJ,CAEA,QAAS,OAAO,WAAW,CACvB,IAAI,KAAO,GAAG,aAAa,MAC3B,GAAI,IAAI,QAAQ,WAAW,IAAI,EAAG,CAC9B,OAAO,IACX,CACJ,CACA,OAAO,IACX,CAhBS,oDAiBT,SAAU,uBAAuB,SAAU,KAAM,KAAM,IAAM,MAAM,QAAQ,QAAQ,QAAQ,EAAG,CAE1F,IAAI,aAAe,qBAAqB,MAAM,QAAQ,QAAQ,KAAM,QAAQ,EAAG,aAAa,SAAS,GAAG,EAAI,kBAAoB,iBAAiB,EACjJ,GAAI,eAAiB,KAAM,OAE3B,GAAI,KAAK,IAAI,YAAY,EAAG,OAC5B,KAAK,IAAI,YAAY,EAErB,MAAM,aAEN,KAAO,MAAM,QAAQ,QAAQ,YAAY,EACzC,IAAM,MAAM,QAAQ,QAAQ,YAAY,EACxC,IAAI,SAAW,IAAI,QAAQ,aAAa,aAAc,OAAO,EAE7D,QAAS,QAAS,CACd,GAAG,SAAS,SAAS,kCAAkC,EACvD,GAAG,SAAS,SAAS,6CAA6C,EAClE,GAAG,SAAS,SAAS,6BAA6B,CACtD,EAAE,CAEE,GAAI,CAAC,MAAM,CAAC,EAAE,WAAW,GAAG,EAAG,SAC/B,MAAO,uBAAuB,MAAM,CAAC,EAAG,KAAM,KAAM,GAAG,CAC3D,CACJ,CAvBU,wDAwBV,SAAS,sBAAsB,iBAAkB,CAC7C,GAAI,mBAAqB,KAAM,OAAO,IAAI,IAC1C,OAAO,IAAI,IAAI,uBAAuB,iBAAkB,MAAM,QAAQ,QAAQ,gBAAgB,EAAG,IAAI,GAAK,CAAC,CAC/G,CAHS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/lib/getModuleDependencies.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return getModuleDependencies;\n    }\n});\nconst _fs = /*#__PURE__*/ _interop_require_default(require(\"fs\"));\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nlet jsExtensions = [\n    \".js\",\n    \".cjs\",\n    \".mjs\"\n];\n// Given the current file `a.ts`, we want to make sure that when importing `b` that we resolve\n// `b.ts` before `b.js`\n//\n// E.g.:\n//\n// a.ts\n//   b // .ts\n//   c // .ts\n// a.js\n//   b // .js or .ts\nlet jsResolutionOrder = [\n    \"\",\n    \".js\",\n    \".cjs\",\n    \".mjs\",\n    \".ts\",\n    \".cts\",\n    \".mts\",\n    \".jsx\",\n    \".tsx\"\n];\nlet tsResolutionOrder = [\n    \"\",\n    \".ts\",\n    \".cts\",\n    \".mts\",\n    \".tsx\",\n    \".js\",\n    \".cjs\",\n    \".mjs\",\n    \".jsx\"\n];\nfunction resolveWithExtension(file, extensions) {\n    // Try to find `./a.ts`, `./a.ts`, ... from `./a`\n    for (let ext of extensions){\n        let full = `${file}${ext}`;\n        if (_fs.default.existsSync(full) && _fs.default.statSync(full).isFile()) {\n            return full;\n        }\n    }\n    // Try to find `./a/index.js` from `./a`\n    for (let ext of extensions){\n        let full = `${file}/index${ext}`;\n        if (_fs.default.existsSync(full)) {\n            return full;\n        }\n    }\n    return null;\n}\nfunction* _getModuleDependencies(filename, base, seen, ext = _path.default.extname(filename)) {\n    // Try to find the file\n    let absoluteFile = resolveWithExtension(_path.default.resolve(base, filename), jsExtensions.includes(ext) ? jsResolutionOrder : tsResolutionOrder);\n    if (absoluteFile === null) return; // File doesn't exist\n    // Prevent infinite loops when there are circular dependencies\n    if (seen.has(absoluteFile)) return; // Already seen\n    seen.add(absoluteFile);\n    // Mark the file as a dependency\n    yield absoluteFile;\n    // Resolve new base for new imports/requires\n    base = _path.default.dirname(absoluteFile);\n    ext = _path.default.extname(absoluteFile);\n    let contents = _fs.default.readFileSync(absoluteFile, \"utf-8\");\n    // Find imports/requires\n    for (let match of [\n        ...contents.matchAll(/import[\\s\\S]*?['\"](.{3,}?)['\"]/gi),\n        ...contents.matchAll(/import[\\s\\S]*from[\\s\\S]*?['\"](.{3,}?)['\"]/gi),\n        ...contents.matchAll(/require\\(['\"`](.+)['\"`]\\)/gi)\n    ]){\n        // Bail out if it's not a relative file\n        if (!match[1].startsWith(\".\")) continue;\n        yield* _getModuleDependencies(match[1], base, seen, ext);\n    }\n}\nfunction getModuleDependencies(absoluteFilePath) {\n    if (absoluteFilePath === null) return new Set();\n    return new Set(_getModuleDependencies(absoluteFilePath, _path.default.dirname(absoluteFilePath), new Set()));\n}\n"]}}