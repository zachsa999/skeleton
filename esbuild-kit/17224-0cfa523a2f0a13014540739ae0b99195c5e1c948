{"code":"(()=>{\n\"use strict\";const path=require(\"path\");const win32=process.platform===\"win32\";const{REGEX_BACKSLASH,REGEX_REMOVE_BACKSLASH,REGEX_SPECIAL_CHARS,REGEX_SPECIAL_CHARS_GLOBAL}=require(\"./constants\");exports.isObject=val=>val!==null&&typeof val===\"object\"&&!Array.isArray(val);exports.hasRegexChars=str=>REGEX_SPECIAL_CHARS.test(str);exports.isRegexChar=str=>str.length===1&&exports.hasRegexChars(str);exports.escapeRegex=str=>str.replace(REGEX_SPECIAL_CHARS_GLOBAL,\"\\\\$1\");exports.toPosixSlashes=str=>str.replace(REGEX_BACKSLASH,\"/\");exports.removeBackslashes=str=>{return str.replace(REGEX_REMOVE_BACKSLASH,match=>{return match===\"\\\\\"?\"\":match})};exports.supportsLookbehinds=()=>{const segs=process.version.slice(1).split(\".\").map(Number);if(segs.length===3&&segs[0]>=9||segs[0]===8&&segs[1]>=10){return true}return false};exports.isWindows=options=>{if(options&&typeof options.windows===\"boolean\"){return options.windows}return win32===true||path.sep===\"\\\\\"};exports.escapeLast=(input,char,lastIdx)=>{const idx=input.lastIndexOf(char,lastIdx);if(idx===-1)return input;if(input[idx-1]===\"\\\\\")return exports.escapeLast(input,char,idx-1);return`${input.slice(0,idx)}\\\\${input.slice(idx)}`};exports.removePrefix=(input,state={})=>{let output=input;if(output.startsWith(\"./\")){output=output.slice(2);state.prefix=\"./\"}return output};exports.wrapOutput=(input,state={},options={})=>{const prepend=options.contains?\"\":\"^\";const append=options.contains?\"\":\"$\";let output=`${prepend}(?:${input})${append}`;if(state.negated===true){output=`(?:^(?!${output}).*$)`}return output};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAEA,MAAM,KAAO,QAAQ,MAAM,EAC3B,MAAM,MAAQ,QAAQ,WAAa,QACnC,KAAM,CACJ,gBACA,uBACA,oBACA,0BACF,EAAI,QAAQ,aAAa,EAEzB,QAAQ,SAAW,KAAO,MAAQ,MAAQ,OAAO,MAAQ,UAAY,CAAC,MAAM,QAAQ,GAAG,EACvF,QAAQ,cAAgB,KAAO,oBAAoB,KAAK,GAAG,EAC3D,QAAQ,YAAc,KAAO,IAAI,SAAW,GAAK,QAAQ,cAAc,GAAG,EAC1E,QAAQ,YAAc,KAAO,IAAI,QAAQ,2BAA4B,MAAM,EAC3E,QAAQ,eAAiB,KAAO,IAAI,QAAQ,gBAAiB,GAAG,EAEhE,QAAQ,kBAAoB,KAAO,CACjC,OAAO,IAAI,QAAQ,uBAAwB,OAAS,CAClD,OAAO,QAAU,KAAO,GAAK,KAC/B,CAAC,CACH,EAEA,QAAQ,oBAAsB,IAAM,CAClC,MAAM,KAAO,QAAQ,QAAQ,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE,IAAI,MAAM,EAC3D,GAAI,KAAK,SAAW,GAAK,KAAK,CAAC,GAAK,GAAM,KAAK,CAAC,IAAM,GAAK,KAAK,CAAC,GAAK,GAAK,CACzE,MAAO,KACT,CACA,MAAO,MACT,EAEA,QAAQ,UAAY,SAAW,CAC7B,GAAI,SAAW,OAAO,QAAQ,UAAY,UAAW,CACnD,OAAO,QAAQ,OACjB,CACA,OAAO,QAAU,MAAQ,KAAK,MAAQ,IACxC,EAEA,QAAQ,WAAa,CAAC,MAAO,KAAM,UAAY,CAC7C,MAAM,IAAM,MAAM,YAAY,KAAM,OAAO,EAC3C,GAAI,MAAQ,GAAI,OAAO,MACvB,GAAI,MAAM,IAAM,CAAC,IAAM,KAAM,OAAO,QAAQ,WAAW,MAAO,KAAM,IAAM,CAAC,EAC3E,MAAO,GAAG,MAAM,MAAM,EAAG,GAAG,MAAM,MAAM,MAAM,GAAG,GACnD,EAEA,QAAQ,aAAe,CAAC,MAAO,MAAQ,CAAC,IAAM,CAC5C,IAAI,OAAS,MACb,GAAI,OAAO,WAAW,IAAI,EAAG,CAC3B,OAAS,OAAO,MAAM,CAAC,EACvB,MAAM,OAAS,IACjB,CACA,OAAO,MACT,EAEA,QAAQ,WAAa,CAAC,MAAO,MAAQ,CAAC,EAAG,QAAU,CAAC,IAAM,CACxD,MAAM,QAAU,QAAQ,SAAW,GAAK,IACxC,MAAM,OAAS,QAAQ,SAAW,GAAK,IAEvC,IAAI,OAAS,GAAG,aAAa,SAAS,SACtC,GAAI,MAAM,UAAY,KAAM,CAC1B,OAAS,UAAU,aACrB,CACA,OAAO,MACT","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst win32 = process.platform === 'win32';\nconst {\n  REGEX_BACKSLASH,\n  REGEX_REMOVE_BACKSLASH,\n  REGEX_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_GLOBAL\n} = require('./constants');\n\nexports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\nexports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);\nexports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);\nexports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\\\$1');\nexports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');\n\nexports.removeBackslashes = str => {\n  return str.replace(REGEX_REMOVE_BACKSLASH, match => {\n    return match === '\\\\' ? '' : match;\n  });\n};\n\nexports.supportsLookbehinds = () => {\n  const segs = process.version.slice(1).split('.').map(Number);\n  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {\n    return true;\n  }\n  return false;\n};\n\nexports.isWindows = options => {\n  if (options && typeof options.windows === 'boolean') {\n    return options.windows;\n  }\n  return win32 === true || path.sep === '\\\\';\n};\n\nexports.escapeLast = (input, char, lastIdx) => {\n  const idx = input.lastIndexOf(char, lastIdx);\n  if (idx === -1) return input;\n  if (input[idx - 1] === '\\\\') return exports.escapeLast(input, char, idx - 1);\n  return `${input.slice(0, idx)}\\\\${input.slice(idx)}`;\n};\n\nexports.removePrefix = (input, state = {}) => {\n  let output = input;\n  if (output.startsWith('./')) {\n    output = output.slice(2);\n    state.prefix = './';\n  }\n  return output;\n};\n\nexports.wrapOutput = (input, state = {}, options = {}) => {\n  const prepend = options.contains ? '' : '^';\n  const append = options.contains ? '' : '$';\n\n  let output = `${prepend}(?:${input})${append}`;\n  if (state.negated === true) {\n    output = `(?:^(?!${output}).*$)`;\n  }\n  return output;\n};\n"]}}