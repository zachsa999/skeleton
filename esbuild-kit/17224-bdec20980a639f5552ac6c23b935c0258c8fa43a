{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});class QuickLRU{constructor(options={}){if(!(options.maxSize&&options.maxSize>0)){throw new TypeError(\"`maxSize` must be a number greater than 0\")}if(typeof options.maxAge===\"number\"&&options.maxAge===0){throw new TypeError(\"`maxAge` must be a number greater than 0\")}this.maxSize=options.maxSize;this.maxAge=options.maxAge||Infinity;this.onEviction=options.onEviction;this.cache=new Map;this.oldCache=new Map;this._size=0}_emitEvictions(cache){if(typeof this.onEviction!==\"function\"){return}for(const[key,item]of cache){this.onEviction(key,item.value)}}_deleteIfExpired(key,item){if(typeof item.expiry===\"number\"&&item.expiry<=Date.now()){if(typeof this.onEviction===\"function\"){this.onEviction(key,item.value)}return this.delete(key)}return false}_getOrDeleteIfExpired(key,item){const deleted=this._deleteIfExpired(key,item);if(deleted===false){return item.value}}_getItemValue(key,item){return item.expiry?this._getOrDeleteIfExpired(key,item):item.value}_peek(key,cache){const item=cache.get(key);return this._getItemValue(key,item)}_set(key,value){this.cache.set(key,value);this._size++;if(this._size>=this.maxSize){this._size=0;this._emitEvictions(this.oldCache);this.oldCache=this.cache;this.cache=new Map}}_moveToRecent(key,item){this.oldCache.delete(key);this._set(key,item)}*_entriesAscending(){for(const item of this.oldCache){const[key,value]=item;if(!this.cache.has(key)){const deleted=this._deleteIfExpired(key,value);if(deleted===false){yield item}}}for(const item of this.cache){const[key,value]=item;const deleted=this._deleteIfExpired(key,value);if(deleted===false){yield item}}}get(key){if(this.cache.has(key)){const item=this.cache.get(key);return this._getItemValue(key,item)}if(this.oldCache.has(key)){const item=this.oldCache.get(key);if(this._deleteIfExpired(key,item)===false){this._moveToRecent(key,item);return item.value}}}set(key,value,{maxAge=this.maxAge===Infinity?void 0:Date.now()+this.maxAge}={}){if(this.cache.has(key)){this.cache.set(key,{value,maxAge})}else{this._set(key,{value,expiry:maxAge})}}has(key){if(this.cache.has(key)){return!this._deleteIfExpired(key,this.cache.get(key))}if(this.oldCache.has(key)){return!this._deleteIfExpired(key,this.oldCache.get(key))}return false}peek(key){if(this.cache.has(key)){return this._peek(key,this.cache)}if(this.oldCache.has(key)){return this._peek(key,this.oldCache)}}delete(key){const deleted=this.cache.delete(key);if(deleted){this._size--}return this.oldCache.delete(key)||deleted}clear(){this.cache.clear();this.oldCache.clear();this._size=0}resize(newSize){if(!(newSize&&newSize>0)){throw new TypeError(\"`maxSize` must be a number greater than 0\")}const items=[...this._entriesAscending()];const removeCount=items.length-newSize;if(removeCount<0){this.cache=new Map(items);this.oldCache=new Map;this._size=items.length}else{if(removeCount>0){this._emitEvictions(items.slice(0,removeCount))}this.oldCache=new Map(items.slice(removeCount));this.cache=new Map;this._size=0}this.maxSize=newSize}*keys(){for(const[key]of this){yield key}}*values(){for(const[,value]of this){yield value}}*[Symbol.iterator](){for(const item of this.cache){const[key,value]=item;const deleted=this._deleteIfExpired(key,value);if(deleted===false){yield[key,value.value]}}for(const item of this.oldCache){const[key,value]=item;if(!this.cache.has(key)){const deleted=this._deleteIfExpired(key,value);if(deleted===false){yield[key,value.value]}}}}*entriesDescending(){let items=[...this.cache];for(let i=items.length-1;i>=0;--i){const item=items[i];const[key,value]=item;const deleted=this._deleteIfExpired(key,value);if(deleted===false){yield[key,value.value]}}items=[...this.oldCache];for(let i=items.length-1;i>=0;--i){const item=items[i];const[key,value]=item;if(!this.cache.has(key)){const deleted=this._deleteIfExpired(key,value);if(deleted===false){yield[key,value.value]}}}}*entriesAscending(){for(const[key,value]of this._entriesAscending()){yield[key,value.value]}}get size(){if(!this._size){return this.oldCache.size}let oldCacheSize=0;for(const key of this.oldCache.keys()){if(!this.cache.has(key)){oldCacheSize++}}return Math.min(this._size+oldCacheSize,this.maxSize)}}__name(QuickLRU,\"QuickLRU\");module.exports=QuickLRU;\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/@alloc+quick-lru@5.2.0/node_modules/@alloc/quick-lru/index.js"],"sourcesContent":["'use strict';\n\nclass QuickLRU {\n\tconstructor(options = {}) {\n\t\tif (!(options.maxSize && options.maxSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tif (typeof options.maxAge === 'number' && options.maxAge === 0) {\n\t\t\tthrow new TypeError('`maxAge` must be a number greater than 0');\n\t\t}\n\n\t\tthis.maxSize = options.maxSize;\n\t\tthis.maxAge = options.maxAge || Infinity;\n\t\tthis.onEviction = options.onEviction;\n\t\tthis.cache = new Map();\n\t\tthis.oldCache = new Map();\n\t\tthis._size = 0;\n\t}\n\n\t_emitEvictions(cache) {\n\t\tif (typeof this.onEviction !== 'function') {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const [key, item] of cache) {\n\t\t\tthis.onEviction(key, item.value);\n\t\t}\n\t}\n\n\t_deleteIfExpired(key, item) {\n\t\tif (typeof item.expiry === 'number' && item.expiry <= Date.now()) {\n\t\t\tif (typeof this.onEviction === 'function') {\n\t\t\t\tthis.onEviction(key, item.value);\n\t\t\t}\n\n\t\t\treturn this.delete(key);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t_getOrDeleteIfExpired(key, item) {\n\t\tconst deleted = this._deleteIfExpired(key, item);\n\t\tif (deleted === false) {\n\t\t\treturn item.value;\n\t\t}\n\t}\n\n\t_getItemValue(key, item) {\n\t\treturn item.expiry ? this._getOrDeleteIfExpired(key, item) : item.value;\n\t}\n\n\t_peek(key, cache) {\n\t\tconst item = cache.get(key);\n\n\t\treturn this._getItemValue(key, item);\n\t}\n\n\t_set(key, value) {\n\t\tthis.cache.set(key, value);\n\t\tthis._size++;\n\n\t\tif (this._size >= this.maxSize) {\n\t\t\tthis._size = 0;\n\t\t\tthis._emitEvictions(this.oldCache);\n\t\t\tthis.oldCache = this.cache;\n\t\t\tthis.cache = new Map();\n\t\t}\n\t}\n\n\t_moveToRecent(key, item) {\n\t\tthis.oldCache.delete(key);\n\t\tthis._set(key, item);\n\t}\n\n\t* _entriesAscending() {\n\t\tfor (const item of this.oldCache) {\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const item of this.cache) {\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t}\n\t}\n\n\tget(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\tconst item = this.cache.get(key);\n\n\t\t\treturn this._getItemValue(key, item);\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\tconst item = this.oldCache.get(key);\n\t\t\tif (this._deleteIfExpired(key, item) === false) {\n\t\t\t\tthis._moveToRecent(key, item);\n\t\t\t\treturn item.value;\n\t\t\t}\n\t\t}\n\t}\n\n\tset(key, value, {maxAge = this.maxAge === Infinity ? undefined : Date.now() + this.maxAge} = {}) {\n\t\tif (this.cache.has(key)) {\n\t\t\tthis.cache.set(key, {\n\t\t\t\tvalue,\n\t\t\t\tmaxAge\n\t\t\t});\n\t\t} else {\n\t\t\tthis._set(key, {value, expiry: maxAge});\n\t\t}\n\t}\n\n\thas(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\treturn !this._deleteIfExpired(key, this.cache.get(key));\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\treturn !this._deleteIfExpired(key, this.oldCache.get(key));\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpeek(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\treturn this._peek(key, this.cache);\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\treturn this._peek(key, this.oldCache);\n\t\t}\n\t}\n\n\tdelete(key) {\n\t\tconst deleted = this.cache.delete(key);\n\t\tif (deleted) {\n\t\t\tthis._size--;\n\t\t}\n\n\t\treturn this.oldCache.delete(key) || deleted;\n\t}\n\n\tclear() {\n\t\tthis.cache.clear();\n\t\tthis.oldCache.clear();\n\t\tthis._size = 0;\n\t}\n\t\n\tresize(newSize) {\n\t\tif (!(newSize && newSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tconst items = [...this._entriesAscending()];\n\t\tconst removeCount = items.length - newSize;\n\t\tif (removeCount < 0) {\n\t\t\tthis.cache = new Map(items);\n\t\t\tthis.oldCache = new Map();\n\t\t\tthis._size = items.length;\n\t\t} else {\n\t\t\tif (removeCount > 0) {\n\t\t\t\tthis._emitEvictions(items.slice(0, removeCount));\n\t\t\t}\n\n\t\t\tthis.oldCache = new Map(items.slice(removeCount));\n\t\t\tthis.cache = new Map();\n\t\t\tthis._size = 0;\n\t\t}\n\n\t\tthis.maxSize = newSize;\n\t}\n\n\t* keys() {\n\t\tfor (const [key] of this) {\n\t\t\tyield key;\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const [, value] of this) {\n\t\t\tyield value;\n\t\t}\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tfor (const item of this.cache) {\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield [key, value.value];\n\t\t\t}\n\t\t}\n\n\t\tfor (const item of this.oldCache) {\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield [key, value.value];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t* entriesDescending() {\n\t\tlet items = [...this.cache];\n\t\tfor (let i = items.length - 1; i >= 0; --i) {\n\t\t\tconst item = items[i];\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield [key, value.value];\n\t\t\t}\n\t\t}\n\n\t\titems = [...this.oldCache];\n\t\tfor (let i = items.length - 1; i >= 0; --i) {\n\t\t\tconst item = items[i];\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield [key, value.value];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t* entriesAscending() {\n\t\tfor (const [key, value] of this._entriesAscending()) {\n\t\t\tyield [key, value.value];\n\t\t}\n\t}\n\n\tget size() {\n\t\tif (!this._size) {\n\t\t\treturn this.oldCache.size;\n\t\t}\n\n\t\tlet oldCacheSize = 0;\n\t\tfor (const key of this.oldCache.keys()) {\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\toldCacheSize++;\n\t\t\t}\n\t\t}\n\n\t\treturn Math.min(this._size + oldCacheSize, this.maxSize);\n\t}\n}\n\nmodule.exports = QuickLRU;\n"]}}