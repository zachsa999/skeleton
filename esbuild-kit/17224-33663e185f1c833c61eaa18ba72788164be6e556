{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const taskManager=require(\"./managers/tasks\");const patternManager=require(\"./managers/patterns\");const async_1=require(\"./providers/async\");const stream_1=require(\"./providers/stream\");const sync_1=require(\"./providers/sync\");const settings_1=require(\"./settings\");const utils=require(\"./utils\");async function FastGlob(source,options){assertPatternsInput(source);const works=getWorks(source,async_1.default,options);const result=await Promise.all(works);return utils.array.flatten(result)}__name(FastGlob,\"FastGlob\");(function(FastGlob2){function sync(source,options){assertPatternsInput(source);const works=getWorks(source,sync_1.default,options);return utils.array.flatten(works)}__name(sync,\"sync\");FastGlob2.sync=sync;function stream(source,options){assertPatternsInput(source);const works=getWorks(source,stream_1.default,options);return utils.stream.merge(works)}__name(stream,\"stream\");FastGlob2.stream=stream;function generateTasks(source,options){assertPatternsInput(source);const patterns=patternManager.transform([].concat(source));const settings=new settings_1.default(options);return taskManager.generate(patterns,settings)}__name(generateTasks,\"generateTasks\");FastGlob2.generateTasks=generateTasks;function isDynamicPattern(source,options){assertPatternsInput(source);const settings=new settings_1.default(options);return utils.pattern.isDynamicPattern(source,settings)}__name(isDynamicPattern,\"isDynamicPattern\");FastGlob2.isDynamicPattern=isDynamicPattern;function escapePath(source){assertPatternsInput(source);return utils.path.escape(source)}__name(escapePath,\"escapePath\");FastGlob2.escapePath=escapePath})(FastGlob||(FastGlob={}));function getWorks(source,_Provider,options){const patterns=patternManager.transform([].concat(source));const settings=new settings_1.default(options);const tasks=taskManager.generate(patterns,settings);const provider=new _Provider(settings);return tasks.map(provider.read,provider)}__name(getWorks,\"getWorks\");function assertPatternsInput(input){const source=[].concat(input);const isValidSource=source.every(item=>utils.string.isString(item)&&!utils.string.isEmpty(item));if(!isValidSource){throw new TypeError(\"Patterns must be a string (non empty) or an array of strings\")}}__name(assertPatternsInput,\"assertPatternsInput\");module.exports=FastGlob;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,MAAM,YAAc,QAAQ,kBAAkB,EAC9C,MAAM,eAAiB,QAAQ,qBAAqB,EACpD,MAAM,QAAU,QAAQ,mBAAmB,EAC3C,MAAM,SAAW,QAAQ,oBAAoB,EAC7C,MAAM,OAAS,QAAQ,kBAAkB,EACzC,MAAM,WAAa,QAAQ,YAAY,EACvC,MAAM,MAAQ,QAAQ,SAAS,EAC/B,eAAe,SAAS,OAAQ,QAAS,CACrC,oBAAoB,MAAM,EAC1B,MAAM,MAAQ,SAAS,OAAQ,QAAQ,QAAS,OAAO,EACvD,MAAM,OAAS,MAAM,QAAQ,IAAI,KAAK,EACtC,OAAO,MAAM,MAAM,QAAQ,MAAM,CACrC,CALe,6BAQd,SAAUA,UAAU,CACjB,SAAS,KAAK,OAAQ,QAAS,CAC3B,oBAAoB,MAAM,EAC1B,MAAM,MAAQ,SAAS,OAAQ,OAAO,QAAS,OAAO,EACtD,OAAO,MAAM,MAAM,QAAQ,KAAK,CACpC,CAJS,oBAKTA,UAAS,KAAO,KAChB,SAAS,OAAO,OAAQ,QAAS,CAC7B,oBAAoB,MAAM,EAC1B,MAAM,MAAQ,SAAS,OAAQ,SAAS,QAAS,OAAO,EAMxD,OAAO,MAAM,OAAO,MAAM,KAAK,CACnC,CATS,wBAUTA,UAAS,OAAS,OAClB,SAAS,cAAc,OAAQ,QAAS,CACpC,oBAAoB,MAAM,EAC1B,MAAM,SAAW,eAAe,UAAU,CAAC,EAAE,OAAO,MAAM,CAAC,EAC3D,MAAM,SAAW,IAAI,WAAW,QAAQ,OAAO,EAC/C,OAAO,YAAY,SAAS,SAAU,QAAQ,CAClD,CALS,sCAMTA,UAAS,cAAgB,cACzB,SAAS,iBAAiB,OAAQ,QAAS,CACvC,oBAAoB,MAAM,EAC1B,MAAM,SAAW,IAAI,WAAW,QAAQ,OAAO,EAC/C,OAAO,MAAM,QAAQ,iBAAiB,OAAQ,QAAQ,CAC1D,CAJS,4CAKTA,UAAS,iBAAmB,iBAC5B,SAAS,WAAW,OAAQ,CACxB,oBAAoB,MAAM,EAC1B,OAAO,MAAM,KAAK,OAAO,MAAM,CACnC,CAHS,gCAITA,UAAS,WAAa,UAC1B,GAAG,WAAa,SAAW,CAAC,EAAE,EAC9B,SAAS,SAAS,OAAQ,UAAW,QAAS,CAC1C,MAAM,SAAW,eAAe,UAAU,CAAC,EAAE,OAAO,MAAM,CAAC,EAC3D,MAAM,SAAW,IAAI,WAAW,QAAQ,OAAO,EAC/C,MAAM,MAAQ,YAAY,SAAS,SAAU,QAAQ,EACrD,MAAM,SAAW,IAAI,UAAU,QAAQ,EACvC,OAAO,MAAM,IAAI,SAAS,KAAM,QAAQ,CAC5C,CANS,4BAOT,SAAS,oBAAoB,MAAO,CAChC,MAAM,OAAS,CAAC,EAAE,OAAO,KAAK,EAC9B,MAAM,cAAgB,OAAO,MAAO,MAAS,MAAM,OAAO,SAAS,IAAI,GAAK,CAAC,MAAM,OAAO,QAAQ,IAAI,CAAC,EACvG,GAAI,CAAC,cAAe,CAChB,MAAM,IAAI,UAAU,8DAA8D,CACtF,CACJ,CANS,kDAOT,OAAO,QAAU","names":["FastGlob"],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/index.js"],"sourcesContent":["\"use strict\";\r\nconst taskManager = require(\"./managers/tasks\");\r\nconst patternManager = require(\"./managers/patterns\");\r\nconst async_1 = require(\"./providers/async\");\r\nconst stream_1 = require(\"./providers/stream\");\r\nconst sync_1 = require(\"./providers/sync\");\r\nconst settings_1 = require(\"./settings\");\r\nconst utils = require(\"./utils\");\r\nasync function FastGlob(source, options) {\r\n    assertPatternsInput(source);\r\n    const works = getWorks(source, async_1.default, options);\r\n    const result = await Promise.all(works);\r\n    return utils.array.flatten(result);\r\n}\r\n// https://github.com/typescript-eslint/typescript-eslint/issues/60\r\n// eslint-disable-next-line no-redeclare\r\n(function (FastGlob) {\r\n    function sync(source, options) {\r\n        assertPatternsInput(source);\r\n        const works = getWorks(source, sync_1.default, options);\r\n        return utils.array.flatten(works);\r\n    }\r\n    FastGlob.sync = sync;\r\n    function stream(source, options) {\r\n        assertPatternsInput(source);\r\n        const works = getWorks(source, stream_1.default, options);\r\n        /**\r\n         * The stream returned by the provider cannot work with an asynchronous iterator.\r\n         * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.\r\n         * This affects performance (+25%). I don't see best solution right now.\r\n         */\r\n        return utils.stream.merge(works);\r\n    }\r\n    FastGlob.stream = stream;\r\n    function generateTasks(source, options) {\r\n        assertPatternsInput(source);\r\n        const patterns = patternManager.transform([].concat(source));\r\n        const settings = new settings_1.default(options);\r\n        return taskManager.generate(patterns, settings);\r\n    }\r\n    FastGlob.generateTasks = generateTasks;\r\n    function isDynamicPattern(source, options) {\r\n        assertPatternsInput(source);\r\n        const settings = new settings_1.default(options);\r\n        return utils.pattern.isDynamicPattern(source, settings);\r\n    }\r\n    FastGlob.isDynamicPattern = isDynamicPattern;\r\n    function escapePath(source) {\r\n        assertPatternsInput(source);\r\n        return utils.path.escape(source);\r\n    }\r\n    FastGlob.escapePath = escapePath;\r\n})(FastGlob || (FastGlob = {}));\r\nfunction getWorks(source, _Provider, options) {\r\n    const patterns = patternManager.transform([].concat(source));\r\n    const settings = new settings_1.default(options);\r\n    const tasks = taskManager.generate(patterns, settings);\r\n    const provider = new _Provider(settings);\r\n    return tasks.map(provider.read, provider);\r\n}\r\nfunction assertPatternsInput(input) {\r\n    const source = [].concat(input);\r\n    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));\r\n    if (!isValidSource) {\r\n        throw new TypeError('Patterns must be a string (non empty) or an array of strings');\r\n    }\r\n}\r\nmodule.exports = FastGlob;\r\n"]}}