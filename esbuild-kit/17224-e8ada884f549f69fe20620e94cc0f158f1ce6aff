{"code":"(()=>{\nvar __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */module.exports=runParallel;const queueMicrotask=require(\"queue-microtask\");function runParallel(tasks,cb){let results,pending,keys;let isSync=true;if(Array.isArray(tasks)){results=[];pending=tasks.length}else{keys=Object.keys(tasks);results={};pending=keys.length}function done(err){function end(){if(cb)cb(err,results);cb=null}__name(end,\"end\");if(isSync)queueMicrotask(end);else end()}__name(done,\"done\");function each(i,err,result){results[i]=result;if(--pending===0||err){done(err)}}__name(each,\"each\");if(!pending){done(null)}else if(keys){keys.forEach(function(key){tasks[key](function(err,result){each(key,err,result)})})}else{tasks.forEach(function(task,i){task(function(err,result){each(i,err,result)})})}isSync=false}__name(runParallel,\"runParallel\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";kHAAA,qFACA,OAAO,QAAU,YAEjB,MAAM,eAAiB,QAAQ,iBAAiB,EAEhD,SAAS,YAAa,MAAO,GAAI,CAC/B,IAAI,QAAS,QAAS,KACtB,IAAI,OAAS,KAEb,GAAI,MAAM,QAAQ,KAAK,EAAG,CACxB,QAAU,CAAC,EACX,QAAU,MAAM,MAClB,KAAO,CACL,KAAO,OAAO,KAAK,KAAK,EACxB,QAAU,CAAC,EACX,QAAU,KAAK,MACjB,CAEA,SAAS,KAAM,IAAK,CAClB,SAAS,KAAO,CACd,GAAI,GAAI,GAAG,IAAK,OAAO,EACvB,GAAK,IACP,CAHS,kBAIT,GAAI,OAAQ,eAAe,GAAG,OACzB,IAAI,CACX,CAPS,oBAST,SAAS,KAAM,EAAG,IAAK,OAAQ,CAC7B,QAAQ,CAAC,EAAI,OACb,GAAI,EAAE,UAAY,GAAK,IAAK,CAC1B,KAAK,GAAG,CACV,CACF,CALS,oBAOT,GAAI,CAAC,QAAS,CAEZ,KAAK,IAAI,CACX,SAAW,KAAM,CAEf,KAAK,QAAQ,SAAU,IAAK,CAC1B,MAAM,GAAG,EAAE,SAAU,IAAK,OAAQ,CAAE,KAAK,IAAK,IAAK,MAAM,CAAE,CAAC,CAC9D,CAAC,CACH,KAAO,CAEL,MAAM,QAAQ,SAAU,KAAM,EAAG,CAC/B,KAAK,SAAU,IAAK,OAAQ,CAAE,KAAK,EAAG,IAAK,MAAM,CAAE,CAAC,CACtD,CAAC,CACH,CAEA,OAAS,KACX,CA7CS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js"],"sourcesContent":["/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nmodule.exports = runParallel\n\nconst queueMicrotask = require('queue-microtask')\n\nfunction runParallel (tasks, cb) {\n  let results, pending, keys\n  let isSync = true\n\n  if (Array.isArray(tasks)) {\n    results = []\n    pending = tasks.length\n  } else {\n    keys = Object.keys(tasks)\n    results = {}\n    pending = keys.length\n  }\n\n  function done (err) {\n    function end () {\n      if (cb) cb(err, results)\n      cb = null\n    }\n    if (isSync) queueMicrotask(end)\n    else end()\n  }\n\n  function each (i, err, result) {\n    results[i] = result\n    if (--pending === 0 || err) {\n      done(err)\n    }\n  }\n\n  if (!pending) {\n    // empty\n    done(null)\n  } else if (keys) {\n    // object\n    keys.forEach(function (key) {\n      tasks[key](function (err, result) { each(key, err, result) })\n    })\n  } else {\n    // array\n    tasks.forEach(function (task, i) {\n      task(function (err, result) { each(i, err, result) })\n    })\n  }\n\n  isSync = false\n}\n"]}}