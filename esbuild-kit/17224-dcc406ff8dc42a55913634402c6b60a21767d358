{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});let{isClean,my}=require(\"./symbols\");let CssSyntaxError=require(\"./css-syntax-error\");let Stringifier=require(\"./stringifier\");let stringify=require(\"./stringify\");function cloneNode(obj,parent){let cloned=new obj.constructor;for(let i in obj){if(!Object.prototype.hasOwnProperty.call(obj,i)){continue}if(i===\"proxyCache\")continue;let value=obj[i];let type=typeof value;if(i===\"parent\"&&type===\"object\"){if(parent)cloned[i]=parent}else if(i===\"source\"){cloned[i]=value}else if(Array.isArray(value)){cloned[i]=value.map(j=>cloneNode(j,cloned))}else{if(type===\"object\"&&value!==null)value=cloneNode(value);cloned[i]=value}}return cloned}__name(cloneNode,\"cloneNode\");class Node{constructor(defaults={}){this.raws={};this[isClean]=false;this[my]=true;for(let name in defaults){if(name===\"nodes\"){this.nodes=[];for(let node of defaults[name]){if(typeof node.clone===\"function\"){this.append(node.clone())}else{this.append(node)}}}else{this[name]=defaults[name]}}}error(message,opts={}){if(this.source){let{start,end}=this.rangeBy(opts);return this.source.input.error(message,{line:start.line,column:start.column},{line:end.line,column:end.column},opts)}return new CssSyntaxError(message)}warn(result,text,opts){let data={node:this};for(let i in opts)data[i]=opts[i];return result.warn(text,data)}remove(){if(this.parent){this.parent.removeChild(this)}this.parent=void 0;return this}toString(stringifier=stringify){if(stringifier.stringify)stringifier=stringifier.stringify;let result=\"\";stringifier(this,i=>{result+=i});return result}assign(overrides={}){for(let name in overrides){this[name]=overrides[name]}return this}clone(overrides={}){let cloned=cloneNode(this);for(let name in overrides){cloned[name]=overrides[name]}return cloned}cloneBefore(overrides={}){let cloned=this.clone(overrides);this.parent.insertBefore(this,cloned);return cloned}cloneAfter(overrides={}){let cloned=this.clone(overrides);this.parent.insertAfter(this,cloned);return cloned}replaceWith(...nodes){if(this.parent){let bookmark=this;let foundSelf=false;for(let node of nodes){if(node===this){foundSelf=true}else if(foundSelf){this.parent.insertAfter(bookmark,node);bookmark=node}else{this.parent.insertBefore(bookmark,node)}}if(!foundSelf){this.remove()}}return this}next(){if(!this.parent)return void 0;let index=this.parent.index(this);return this.parent.nodes[index+1]}prev(){if(!this.parent)return void 0;let index=this.parent.index(this);return this.parent.nodes[index-1]}before(add){this.parent.insertBefore(this,add);return this}after(add){this.parent.insertAfter(this,add);return this}root(){let result=this;while(result.parent&&result.parent.type!==\"document\"){result=result.parent}return result}raw(prop,defaultType){let str=new Stringifier;return str.raw(this,prop,defaultType)}cleanRaws(keepBetween){delete this.raws.before;delete this.raws.after;if(!keepBetween)delete this.raws.between}toJSON(_,inputs){let fixed={};let emitInputs=inputs==null;inputs=inputs||new Map;let inputsNextIndex=0;for(let name in this){if(!Object.prototype.hasOwnProperty.call(this,name)){continue}if(name===\"parent\"||name===\"proxyCache\")continue;let value=this[name];if(Array.isArray(value)){fixed[name]=value.map(i=>{if(typeof i===\"object\"&&i.toJSON){return i.toJSON(null,inputs)}else{return i}})}else if(typeof value===\"object\"&&value.toJSON){fixed[name]=value.toJSON(null,inputs)}else if(name===\"source\"){let inputId=inputs.get(value.input);if(inputId==null){inputId=inputsNextIndex;inputs.set(value.input,inputsNextIndex);inputsNextIndex++}fixed[name]={inputId,start:value.start,end:value.end}}else{fixed[name]=value}}if(emitInputs){fixed.inputs=[...inputs.keys()].map(input=>input.toJSON())}return fixed}positionInside(index){let string=this.toString();let column=this.source.start.column;let line=this.source.start.line;for(let i=0;i<index;i++){if(string[i]===\"\\n\"){column=1;line+=1}else{column+=1}}return{line,column}}positionBy(opts){let pos=this.source.start;if(opts.index){pos=this.positionInside(opts.index)}else if(opts.word){let index=this.toString().indexOf(opts.word);if(index!==-1)pos=this.positionInside(index)}return pos}rangeBy(opts){let start={line:this.source.start.line,column:this.source.start.column};let end=this.source.end?{line:this.source.end.line,column:this.source.end.column+1}:{line:start.line,column:start.column+1};if(opts.word){let index=this.toString().indexOf(opts.word);if(index!==-1){start=this.positionInside(index);end=this.positionInside(index+opts.word.length)}}else{if(opts.start){start={line:opts.start.line,column:opts.start.column}}else if(opts.index){start=this.positionInside(opts.index)}if(opts.end){end={line:opts.end.line,column:opts.end.column}}else if(opts.endIndex){end=this.positionInside(opts.endIndex)}else if(opts.index){end=this.positionInside(opts.index+1)}}if(end.line<start.line||end.line===start.line&&end.column<=start.column){end={line:start.line,column:start.column+1}}return{start,end}}getProxyProcessor(){return{set(node,prop,value){if(node[prop]===value)return true;node[prop]=value;if(prop===\"prop\"||prop===\"value\"||prop===\"name\"||prop===\"params\"||prop===\"important\"||prop===\"text\"){node.markDirty()}return true},get(node,prop){if(prop===\"proxyOf\"){return node}else if(prop===\"root\"){return()=>node.root().toProxy()}else{return node[prop]}}}}toProxy(){if(!this.proxyCache){this.proxyCache=new Proxy(this,this.getProxyProcessor())}return this.proxyCache}addToError(error){error.postcssNode=this;if(error.stack&&this.source&&/\\n\\s{4}at /.test(error.stack)){let s=this.source;error.stack=error.stack.replace(/\\n\\s{4}at /,`$&${s.input.from}:${s.start.line}:${s.start.column}$&`)}return error}markDirty(){if(this[isClean]){this[isClean]=false;let next=this;while(next=next.parent){next[isClean]=false}}}get proxyOf(){return this}}__name(Node,\"Node\");module.exports=Node;Node.default=Node;\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/postcss@8.4.24/node_modules/postcss/lib/node.js"],"sourcesContent":["'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet CssSyntaxError = require('./css-syntax-error')\nlet Stringifier = require('./stringifier')\nlet stringify = require('./stringify')\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { start, end } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { line: start.line, column: start.column },\n        { line: end.line, column: end.column },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          inputId,\n          start: value.start,\n          end: value.end\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  positionInside(index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  rangeBy(opts) {\n    let start = {\n      line: this.source.start.line,\n      column: this.source.start.column\n    }\n    let end = this.source.end\n      ? {\n          line: this.source.end.line,\n          column: this.source.end.column + 1\n        }\n      : {\n          line: start.line,\n          column: start.column + 1\n        }\n\n    if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(index + opts.word.length)\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          line: opts.start.line,\n          column: opts.start.column\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          line: opts.end.line,\n          column: opts.end.column\n        }\n      } else if (opts.endIndex) {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { line: start.line, column: start.column + 1 }\n    }\n\n    return { start, end }\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n"]}}