{"code":"(()=>{\n\"use strict\";var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:true})};var __copyProps=(to,from,except,desc)=>{if(from&&typeof from===\"object\"||typeof from===\"function\"){for(let key of __getOwnPropNames(from))if(!__hasOwnProp.call(to,key)&&key!==except)__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable})}return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,\"default\",{value:mod,enumerable:true}):target,mod));var __toCommonJS=mod=>__copyProps(__defProp({},\"__esModule\",{value:true}),mod);var compile_css_to_js_exports={};__export(compile_css_to_js_exports,{transpileCssToJs:()=>transpileCssToJs});module.exports=__toCommonJS(compile_css_to_js_exports);var import_postcss=__toESM(require(\"postcss\"));var import_postcss_js=__toESM(require(\"postcss-js\"));var import_fs=require(\"fs\");var import_postcss_import=__toESM(require(\"postcss-import\"));var import_tailwindcss=__toESM(require(\"tailwindcss\"));var import_core=require(\"../src/tailwind/core.js\");const tailwindcss=import_tailwindcss.default;async function transpileCssToJs(cssEntryPath,plugins=[]){const selectors=[];const css=(0,import_fs.readFileSync)(cssEntryPath,\"utf8\");const processor=(0,import_postcss.default)([(0,import_postcss_import.default)()]);const result=await processor.process(css,{from:cssEntryPath});result.root.walk(node=>{if(node.type===\"rule\"){selectors.push(...node.selectors)}});const twConfig={darkMode:\"class\",content:[{raw:selectors.join(\" \")}],plugins:[import_core.corePlugin,...plugins]};const result2=await(0,import_postcss.default)([(0,import_postcss_import.default)(),tailwindcss(twConfig)]).process(css,{from:cssEntryPath});if(result2.root.type===\"document\")throw Error(\"This should never happen\");const cssInJs=import_postcss_js.default.objectify(result2.root);return cssInJs}__name(transpileCssToJs,\"transpileCssToJs\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";8/BAAA,uLAA4C,4BAC5C,sBAAsB,+BACtB,cAA6B,cAC7B,0BAA0B,mCAC1B,uBAAe,gCAEf,gBAA2B,mCAG3B,MAAM,YAAc,2BAGpB,eAAsB,iBAAiB,aAAsB,QAA6B,CAAC,EAAG,CAC7F,MAAM,UAAsB,CAAC,EAM7B,MAAM,OAAM,wBAAa,aAAc,MAAM,EAC7C,MAAM,aAAY,wBAAQ,IAAC,+BAAc,CAAC,CAAC,EAC3C,MAAM,OAAS,MAAM,UAAU,QAAQ,IAAK,CAAE,KAAM,YAAa,CAAC,EAElE,OAAO,KAAK,KAAM,MAAS,CAC1B,GAAI,KAAK,OAAS,OAAQ,CACzB,UAAU,KAAK,GAAG,KAAK,SAAS,CACjC,CACD,CAAC,EAGD,MAAM,SAAW,CAChB,SAAU,QACV,QAAS,CAAC,CAAE,IAAK,UAAU,KAAK,GAAG,CAAE,CAAC,EACtC,QAAS,CACR,uBAEA,GAAG,OACJ,CACD,EAEA,MAAM,QAAU,QAAM,wBAAQ,IAAC,+BAAc,EAAG,YAAY,QAAQ,CAAC,CAAC,EAAE,QAAQ,IAAK,CAAE,KAAM,YAAa,CAAC,EAC3G,GAAI,QAAQ,KAAK,OAAS,WAAY,MAAM,MAAM,0BAA0B,EAE5E,MAAM,QAAU,0BAAU,UAAU,QAAQ,IAAI,EAEhD,OAAO,OACR,CAlCsB","names":[],"sources":["/root/projects/zachw-i/packages/plugin/scripts/compile-css-to-js.ts"],"sourcesContent":["import postcss, { type PluginCreator } from 'postcss';\nimport postcssJs from 'postcss-js';\nimport { readFileSync } from 'fs';\nimport postcssImport from 'postcss-import';\nimport tw from 'tailwindcss';\nimport type { Config } from 'tailwindcss';\nimport { corePlugin } from '../src/tailwind/core.js';\n\n// tailwind needs to fix their exports :]\nconst tailwindcss = tw as unknown as PluginCreator<string | Config | { config: string | Config }>;\n\n// Transpiles all of our library's CSS to JS\nexport async function transpileCssToJs(cssEntryPath: string, plugins: Config['plugins'] = []) {\n\tconst selectors: string[] = [];\n\n\t// We'll first get all the custom class names,\n\t// then we can feed that into the TW preprocessor as the `content`\n\t// so that TW can detect and generate them properly\n\n\tconst css = readFileSync(cssEntryPath, 'utf8');\n\tconst processor = postcss([postcssImport()]);\n\tconst result = await processor.process(css, { from: cssEntryPath });\n\n\tresult.root.walk((node) => {\n\t\tif (node.type === 'rule') {\n\t\t\tselectors.push(...node.selectors);\n\t\t}\n\t});\n\n\t// Custom tailwind config so that we only use the necessities\n\tconst twConfig = {\n\t\tdarkMode: 'class',\n\t\tcontent: [{ raw: selectors.join(' ') }],\n\t\tplugins: [\n\t\t\tcorePlugin,\n\t\t\t// add skeleton component classes for the base styles\n\t\t\t...plugins\n\t\t]\n\t} satisfies Config;\n\n\tconst result2 = await postcss([postcssImport(), tailwindcss(twConfig)]).process(css, { from: cssEntryPath });\n\tif (result2.root.type === 'document') throw Error('This should never happen');\n\n\tconst cssInJs = postcssJs.objectify(result2.root);\n\n\treturn cssInJs;\n}\n"]}}