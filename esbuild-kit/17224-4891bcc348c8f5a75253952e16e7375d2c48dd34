{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});exports.merge=void 0;const merge2=require(\"merge2\");function merge(streams){const mergedStream=merge2(streams);streams.forEach(stream=>{stream.once(\"error\",error=>mergedStream.emit(\"error\",error))});mergedStream.once(\"close\",()=>propagateCloseEventToSources(streams));mergedStream.once(\"end\",()=>propagateCloseEventToSources(streams));return mergedStream}__name(merge,\"merge\");exports.merge=merge;function propagateCloseEventToSources(streams){streams.forEach(stream=>stream.emit(\"close\"))}__name(propagateCloseEventToSources,\"propagateCloseEventToSources\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CAAE,MAAO,IAAK,CAAC,EAC5D,QAAQ,MAAQ,OAChB,MAAM,OAAS,QAAQ,QAAQ,EAC/B,SAAS,MAAM,QAAS,CACpB,MAAM,aAAe,OAAO,OAAO,EACnC,QAAQ,QAAS,QAAW,CACxB,OAAO,KAAK,QAAU,OAAU,aAAa,KAAK,QAAS,KAAK,CAAC,CACrE,CAAC,EACD,aAAa,KAAK,QAAS,IAAM,6BAA6B,OAAO,CAAC,EACtE,aAAa,KAAK,MAAO,IAAM,6BAA6B,OAAO,CAAC,EACpE,OAAO,YACX,CARS,sBAST,QAAQ,MAAQ,MAChB,SAAS,6BAA6B,QAAS,CAC3C,QAAQ,QAAS,QAAW,OAAO,KAAK,OAAO,CAAC,CACpD,CAFS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/stream.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.merge = void 0;\r\nconst merge2 = require(\"merge2\");\r\nfunction merge(streams) {\r\n    const mergedStream = merge2(streams);\r\n    streams.forEach((stream) => {\r\n        stream.once('error', (error) => mergedStream.emit('error', error));\r\n    });\r\n    mergedStream.once('close', () => propagateCloseEventToSources(streams));\r\n    mergedStream.once('end', () => propagateCloseEventToSources(streams));\r\n    return mergedStream;\r\n}\r\nexports.merge = merge;\r\nfunction propagateCloseEventToSources(streams) {\r\n    streams.forEach((stream) => stream.emit('close'));\r\n}\r\n"]}}