{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});exports.__esModule=true;exports[\"default\"]=void 0;exports.unescapeValue=unescapeValue;var _cssesc=_interopRequireDefault(require(\"cssesc\"));var _unesc=_interopRequireDefault(require(\"../util/unesc\"));var _namespace=_interopRequireDefault(require(\"./namespace\"));var _types=require(\"./types\");var _CSSESC_QUOTE_OPTIONS;function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}__name(_interopRequireDefault,\"_interopRequireDefault\");function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}__name(_defineProperties,\"_defineProperties\");function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);Object.defineProperty(Constructor,\"prototype\",{writable:false});return Constructor}__name(_createClass,\"_createClass\");function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;_setPrototypeOf(subClass,superClass)}__name(_inheritsLoose,\"_inheritsLoose\");function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():__name(function _setPrototypeOf2(o2,p2){o2.__proto__=p2;return o2},\"_setPrototypeOf\");return _setPrototypeOf(o,p)}__name(_setPrototypeOf,\"_setPrototypeOf\");var deprecate=require(\"util-deprecate\");var WRAPPED_IN_QUOTES=/^('|\")([^]*)\\1$/;var warnOfDeprecatedValueAssignment=deprecate(function(){},\"Assigning an attribute a value containing characters that might need to be escaped is deprecated. Call attribute.setValue() instead.\");var warnOfDeprecatedQuotedAssignment=deprecate(function(){},\"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\");var warnOfDeprecatedConstructor=deprecate(function(){},\"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");function unescapeValue(value){var deprecatedUsage=false;var quoteMark=null;var unescaped=value;var m=unescaped.match(WRAPPED_IN_QUOTES);if(m){quoteMark=m[1];unescaped=m[2]}unescaped=(0,_unesc[\"default\"])(unescaped);if(unescaped!==value){deprecatedUsage=true}return{deprecatedUsage,unescaped,quoteMark}}__name(unescapeValue,\"unescapeValue\");function handleDeprecatedContructorOpts(opts){if(opts.quoteMark!==void 0){return opts}if(opts.value===void 0){return opts}warnOfDeprecatedConstructor();var _unescapeValue=unescapeValue(opts.value),quoteMark=_unescapeValue.quoteMark,unescaped=_unescapeValue.unescaped;if(!opts.raws){opts.raws={}}if(opts.raws.value===void 0){opts.raws.value=opts.value}opts.value=unescaped;opts.quoteMark=quoteMark;return opts}__name(handleDeprecatedContructorOpts,\"handleDeprecatedContructorOpts\");var Attribute=function(_Namespace){_inheritsLoose(Attribute2,_Namespace);function Attribute2(opts){var _this;if(opts===void 0){opts={}}_this=_Namespace.call(this,handleDeprecatedContructorOpts(opts))||this;_this.type=_types.ATTRIBUTE;_this.raws=_this.raws||{};Object.defineProperty(_this.raws,\"unquoted\",{get:deprecate(function(){return _this.value},\"attr.raws.unquoted is deprecated. Call attr.value instead.\"),set:deprecate(function(){return _this.value},\"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")});_this._constructed=true;return _this}__name(Attribute2,\"Attribute\");var _proto=Attribute2.prototype;_proto.getQuotedValue=__name(function getQuotedValue(options){if(options===void 0){options={}}var quoteMark=this._determineQuoteMark(options);var cssescopts=CSSESC_QUOTE_OPTIONS[quoteMark];var escaped=(0,_cssesc[\"default\"])(this._value,cssescopts);return escaped},\"getQuotedValue\");_proto._determineQuoteMark=__name(function _determineQuoteMark(options){return options.smart?this.smartQuoteMark(options):this.preferredQuoteMark(options)},\"_determineQuoteMark\");_proto.setValue=__name(function setValue(value,options){if(options===void 0){options={}}this._value=value;this._quoteMark=this._determineQuoteMark(options);this._syncRawValue()},\"setValue\");_proto.smartQuoteMark=__name(function smartQuoteMark(options){var v=this.value;var numSingleQuotes=v.replace(/[^']/g,\"\").length;var numDoubleQuotes=v.replace(/[^\"]/g,\"\").length;if(numSingleQuotes+numDoubleQuotes===0){var escaped=(0,_cssesc[\"default\"])(v,{isIdentifier:true});if(escaped===v){return Attribute2.NO_QUOTE}else{var pref=this.preferredQuoteMark(options);if(pref===Attribute2.NO_QUOTE){var quote=this.quoteMark||options.quoteMark||Attribute2.DOUBLE_QUOTE;var opts=CSSESC_QUOTE_OPTIONS[quote];var quoteValue=(0,_cssesc[\"default\"])(v,opts);if(quoteValue.length<escaped.length){return quote}}return pref}}else if(numDoubleQuotes===numSingleQuotes){return this.preferredQuoteMark(options)}else if(numDoubleQuotes<numSingleQuotes){return Attribute2.DOUBLE_QUOTE}else{return Attribute2.SINGLE_QUOTE}},\"smartQuoteMark\");_proto.preferredQuoteMark=__name(function preferredQuoteMark(options){var quoteMark=options.preferCurrentQuoteMark?this.quoteMark:options.quoteMark;if(quoteMark===void 0){quoteMark=options.preferCurrentQuoteMark?options.quoteMark:this.quoteMark}if(quoteMark===void 0){quoteMark=Attribute2.DOUBLE_QUOTE}return quoteMark},\"preferredQuoteMark\");_proto._syncRawValue=__name(function _syncRawValue(){var rawValue=(0,_cssesc[\"default\"])(this._value,CSSESC_QUOTE_OPTIONS[this.quoteMark]);if(rawValue===this._value){if(this.raws){delete this.raws.value}}else{this.raws.value=rawValue}},\"_syncRawValue\");_proto._handleEscapes=__name(function _handleEscapes(prop,value){if(this._constructed){var escaped=(0,_cssesc[\"default\"])(value,{isIdentifier:true});if(escaped!==value){this.raws[prop]=escaped}else{delete this.raws[prop]}}},\"_handleEscapes\");_proto._spacesFor=__name(function _spacesFor(name){var attrSpaces={before:\"\",after:\"\"};var spaces=this.spaces[name]||{};var rawSpaces=this.raws.spaces&&this.raws.spaces[name]||{};return Object.assign(attrSpaces,spaces,rawSpaces)},\"_spacesFor\");_proto._stringFor=__name(function _stringFor(name,spaceName,concat){if(spaceName===void 0){spaceName=name}if(concat===void 0){concat=defaultAttrConcat}var attrSpaces=this._spacesFor(spaceName);return concat(this.stringifyProperty(name),attrSpaces)},\"_stringFor\");_proto.offsetOf=__name(function offsetOf(name){var count=1;var attributeSpaces=this._spacesFor(\"attribute\");count+=attributeSpaces.before.length;if(name===\"namespace\"||name===\"ns\"){return this.namespace?count:-1}if(name===\"attributeNS\"){return count}count+=this.namespaceString.length;if(this.namespace){count+=1}if(name===\"attribute\"){return count}count+=this.stringifyProperty(\"attribute\").length;count+=attributeSpaces.after.length;var operatorSpaces=this._spacesFor(\"operator\");count+=operatorSpaces.before.length;var operator=this.stringifyProperty(\"operator\");if(name===\"operator\"){return operator?count:-1}count+=operator.length;count+=operatorSpaces.after.length;var valueSpaces=this._spacesFor(\"value\");count+=valueSpaces.before.length;var value=this.stringifyProperty(\"value\");if(name===\"value\"){return value?count:-1}count+=value.length;count+=valueSpaces.after.length;var insensitiveSpaces=this._spacesFor(\"insensitive\");count+=insensitiveSpaces.before.length;if(name===\"insensitive\"){return this.insensitive?count:-1}return-1},\"offsetOf\");_proto.toString=__name(function toString(){var _this2=this;var selector=[this.rawSpaceBefore,\"[\"];selector.push(this._stringFor(\"qualifiedAttribute\",\"attribute\"));if(this.operator&&(this.value||this.value===\"\")){selector.push(this._stringFor(\"operator\"));selector.push(this._stringFor(\"value\"));selector.push(this._stringFor(\"insensitiveFlag\",\"insensitive\",function(attrValue,attrSpaces){if(attrValue.length>0&&!_this2.quoted&&attrSpaces.before.length===0&&!(_this2.spaces.value&&_this2.spaces.value.after)){attrSpaces.before=\" \"}return defaultAttrConcat(attrValue,attrSpaces)}))}selector.push(\"]\");selector.push(this.rawSpaceAfter);return selector.join(\"\")},\"toString\");_createClass(Attribute2,[{key:\"quoted\",get:__name(function get(){var qm=this.quoteMark;return qm===\"'\"||qm==='\"'},\"get\"),set:__name(function set(value){warnOfDeprecatedQuotedAssignment()},\"set\")},{key:\"quoteMark\",get:__name(function get(){return this._quoteMark},\"get\"),set:__name(function set(quoteMark){if(!this._constructed){this._quoteMark=quoteMark;return}if(this._quoteMark!==quoteMark){this._quoteMark=quoteMark;this._syncRawValue()}},\"set\")},{key:\"qualifiedAttribute\",get:__name(function get(){return this.qualifiedName(this.raws.attribute||this.attribute)},\"get\")},{key:\"insensitiveFlag\",get:__name(function get(){return this.insensitive?\"i\":\"\"},\"get\")},{key:\"value\",get:__name(function get(){return this._value},\"get\"),set:__name(function set(v){if(this._constructed){var _unescapeValue2=unescapeValue(v),deprecatedUsage=_unescapeValue2.deprecatedUsage,unescaped=_unescapeValue2.unescaped,quoteMark=_unescapeValue2.quoteMark;if(deprecatedUsage){warnOfDeprecatedValueAssignment()}if(unescaped===this._value&&quoteMark===this._quoteMark){return}this._value=unescaped;this._quoteMark=quoteMark;this._syncRawValue()}else{this._value=v}},\"set\")},{key:\"insensitive\",get:__name(function get(){return this._insensitive},\"get\"),set:__name(function set(insensitive){if(!insensitive){this._insensitive=false;if(this.raws&&(this.raws.insensitiveFlag===\"I\"||this.raws.insensitiveFlag===\"i\")){this.raws.insensitiveFlag=void 0}}this._insensitive=insensitive},\"set\")},{key:\"attribute\",get:__name(function get(){return this._attribute},\"get\"),set:__name(function set(name){this._handleEscapes(\"attribute\",name);this._attribute=name},\"set\")}]);return Attribute2}(_namespace[\"default\"]);exports[\"default\"]=Attribute;Attribute.NO_QUOTE=null;Attribute.SINGLE_QUOTE=\"'\";Attribute.DOUBLE_QUOTE='\"';var CSSESC_QUOTE_OPTIONS=(_CSSESC_QUOTE_OPTIONS={\"'\":{quotes:\"single\",wrap:true},'\"':{quotes:\"double\",wrap:true}},_CSSESC_QUOTE_OPTIONS[null]={isIdentifier:true},_CSSESC_QUOTE_OPTIONS);function defaultAttrConcat(attrValue,attrSpaces){return\"\"+attrSpaces.before+attrValue+attrSpaces.after}__name(defaultAttrConcat,\"defaultAttrConcat\");\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":["_setPrototypeOf","o","p","Attribute"],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/postcss-selector-parser@6.0.13/node_modules/postcss-selector-parser/dist/selectors/attribute.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nexports.unescapeValue = unescapeValue;\nvar _cssesc = _interopRequireDefault(require(\"cssesc\"));\nvar _unesc = _interopRequireDefault(require(\"../util/unesc\"));\nvar _namespace = _interopRequireDefault(require(\"./namespace\"));\nvar _types = require(\"./types\");\nvar _CSSESC_QUOTE_OPTIONS;\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar deprecate = require(\"util-deprecate\");\nvar WRAPPED_IN_QUOTES = /^('|\")([^]*)\\1$/;\nvar warnOfDeprecatedValueAssignment = deprecate(function () {}, \"Assigning an attribute a value containing characters that might need to be escaped is deprecated. \" + \"Call attribute.setValue() instead.\");\nvar warnOfDeprecatedQuotedAssignment = deprecate(function () {}, \"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\");\nvar warnOfDeprecatedConstructor = deprecate(function () {}, \"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");\nfunction unescapeValue(value) {\n  var deprecatedUsage = false;\n  var quoteMark = null;\n  var unescaped = value;\n  var m = unescaped.match(WRAPPED_IN_QUOTES);\n  if (m) {\n    quoteMark = m[1];\n    unescaped = m[2];\n  }\n  unescaped = (0, _unesc[\"default\"])(unescaped);\n  if (unescaped !== value) {\n    deprecatedUsage = true;\n  }\n  return {\n    deprecatedUsage: deprecatedUsage,\n    unescaped: unescaped,\n    quoteMark: quoteMark\n  };\n}\nfunction handleDeprecatedContructorOpts(opts) {\n  if (opts.quoteMark !== undefined) {\n    return opts;\n  }\n  if (opts.value === undefined) {\n    return opts;\n  }\n  warnOfDeprecatedConstructor();\n  var _unescapeValue = unescapeValue(opts.value),\n    quoteMark = _unescapeValue.quoteMark,\n    unescaped = _unescapeValue.unescaped;\n  if (!opts.raws) {\n    opts.raws = {};\n  }\n  if (opts.raws.value === undefined) {\n    opts.raws.value = opts.value;\n  }\n  opts.value = unescaped;\n  opts.quoteMark = quoteMark;\n  return opts;\n}\nvar Attribute = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Attribute, _Namespace);\n  function Attribute(opts) {\n    var _this;\n    if (opts === void 0) {\n      opts = {};\n    }\n    _this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;\n    _this.type = _types.ATTRIBUTE;\n    _this.raws = _this.raws || {};\n    Object.defineProperty(_this.raws, 'unquoted', {\n      get: deprecate(function () {\n        return _this.value;\n      }, \"attr.raws.unquoted is deprecated. Call attr.value instead.\"),\n      set: deprecate(function () {\n        return _this.value;\n      }, \"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")\n    });\n    _this._constructed = true;\n    return _this;\n  }\n\n  /**\n   * Returns the Attribute's value quoted such that it would be legal to use\n   * in the value of a css file. The original value's quotation setting\n   * used for stringification is left unchanged. See `setValue(value, options)`\n   * if you want to control the quote settings of a new value for the attribute.\n   *\n   * You can also change the quotation used for the current value by setting quoteMark.\n   *\n   * Options:\n   *   * quoteMark {'\"' | \"'\" | null} - Use this value to quote the value. If this\n   *     option is not set, the original value for quoteMark will be used. If\n   *     indeterminate, a double quote is used. The legal values are:\n   *     * `null` - the value will be unquoted and characters will be escaped as necessary.\n   *     * `'` - the value will be quoted with a single quote and single quotes are escaped.\n   *     * `\"` - the value will be quoted with a double quote and double quotes are escaped.\n   *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark\n   *     over the quoteMark option value.\n   *   * smart {boolean} - if true, will select a quote mark based on the value\n   *     and the other options specified here. See the `smartQuoteMark()`\n   *     method.\n   **/\n  var _proto = Attribute.prototype;\n  _proto.getQuotedValue = function getQuotedValue(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var quoteMark = this._determineQuoteMark(options);\n    var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];\n    var escaped = (0, _cssesc[\"default\"])(this._value, cssescopts);\n    return escaped;\n  };\n  _proto._determineQuoteMark = function _determineQuoteMark(options) {\n    return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);\n  }\n\n  /**\n   * Set the unescaped value with the specified quotation options. The value\n   * provided must not include any wrapping quote marks -- those quotes will\n   * be interpreted as part of the value and escaped accordingly.\n   */;\n  _proto.setValue = function setValue(value, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this._value = value;\n    this._quoteMark = this._determineQuoteMark(options);\n    this._syncRawValue();\n  }\n\n  /**\n   * Intelligently select a quoteMark value based on the value's contents. If\n   * the value is a legal CSS ident, it will not be quoted. Otherwise a quote\n   * mark will be picked that minimizes the number of escapes.\n   *\n   * If there's no clear winner, the quote mark from these options is used,\n   * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is\n   * true). If the quoteMark is unspecified, a double quote is used.\n   *\n   * @param options This takes the quoteMark and preferCurrentQuoteMark options\n   * from the quoteValue method.\n   */;\n  _proto.smartQuoteMark = function smartQuoteMark(options) {\n    var v = this.value;\n    var numSingleQuotes = v.replace(/[^']/g, '').length;\n    var numDoubleQuotes = v.replace(/[^\"]/g, '').length;\n    if (numSingleQuotes + numDoubleQuotes === 0) {\n      var escaped = (0, _cssesc[\"default\"])(v, {\n        isIdentifier: true\n      });\n      if (escaped === v) {\n        return Attribute.NO_QUOTE;\n      } else {\n        var pref = this.preferredQuoteMark(options);\n        if (pref === Attribute.NO_QUOTE) {\n          // pick a quote mark that isn't none and see if it's smaller\n          var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;\n          var opts = CSSESC_QUOTE_OPTIONS[quote];\n          var quoteValue = (0, _cssesc[\"default\"])(v, opts);\n          if (quoteValue.length < escaped.length) {\n            return quote;\n          }\n        }\n        return pref;\n      }\n    } else if (numDoubleQuotes === numSingleQuotes) {\n      return this.preferredQuoteMark(options);\n    } else if (numDoubleQuotes < numSingleQuotes) {\n      return Attribute.DOUBLE_QUOTE;\n    } else {\n      return Attribute.SINGLE_QUOTE;\n    }\n  }\n\n  /**\n   * Selects the preferred quote mark based on the options and the current quote mark value.\n   * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`\n   * instead.\n   */;\n  _proto.preferredQuoteMark = function preferredQuoteMark(options) {\n    var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;\n    if (quoteMark === undefined) {\n      quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;\n    }\n    if (quoteMark === undefined) {\n      quoteMark = Attribute.DOUBLE_QUOTE;\n    }\n    return quoteMark;\n  };\n  _proto._syncRawValue = function _syncRawValue() {\n    var rawValue = (0, _cssesc[\"default\"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);\n    if (rawValue === this._value) {\n      if (this.raws) {\n        delete this.raws.value;\n      }\n    } else {\n      this.raws.value = rawValue;\n    }\n  };\n  _proto._handleEscapes = function _handleEscapes(prop, value) {\n    if (this._constructed) {\n      var escaped = (0, _cssesc[\"default\"])(value, {\n        isIdentifier: true\n      });\n      if (escaped !== value) {\n        this.raws[prop] = escaped;\n      } else {\n        delete this.raws[prop];\n      }\n    }\n  };\n  _proto._spacesFor = function _spacesFor(name) {\n    var attrSpaces = {\n      before: '',\n      after: ''\n    };\n    var spaces = this.spaces[name] || {};\n    var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};\n    return Object.assign(attrSpaces, spaces, rawSpaces);\n  };\n  _proto._stringFor = function _stringFor(name, spaceName, concat) {\n    if (spaceName === void 0) {\n      spaceName = name;\n    }\n    if (concat === void 0) {\n      concat = defaultAttrConcat;\n    }\n    var attrSpaces = this._spacesFor(spaceName);\n    return concat(this.stringifyProperty(name), attrSpaces);\n  }\n\n  /**\n   * returns the offset of the attribute part specified relative to the\n   * start of the node of the output string.\n   *\n   * * \"ns\" - alias for \"namespace\"\n   * * \"namespace\" - the namespace if it exists.\n   * * \"attribute\" - the attribute name\n   * * \"attributeNS\" - the start of the attribute or its namespace\n   * * \"operator\" - the match operator of the attribute\n   * * \"value\" - The value (string or identifier)\n   * * \"insensitive\" - the case insensitivity flag;\n   * @param part One of the possible values inside an attribute.\n   * @returns -1 if the name is invalid or the value doesn't exist in this attribute.\n   */;\n  _proto.offsetOf = function offsetOf(name) {\n    var count = 1;\n    var attributeSpaces = this._spacesFor(\"attribute\");\n    count += attributeSpaces.before.length;\n    if (name === \"namespace\" || name === \"ns\") {\n      return this.namespace ? count : -1;\n    }\n    if (name === \"attributeNS\") {\n      return count;\n    }\n    count += this.namespaceString.length;\n    if (this.namespace) {\n      count += 1;\n    }\n    if (name === \"attribute\") {\n      return count;\n    }\n    count += this.stringifyProperty(\"attribute\").length;\n    count += attributeSpaces.after.length;\n    var operatorSpaces = this._spacesFor(\"operator\");\n    count += operatorSpaces.before.length;\n    var operator = this.stringifyProperty(\"operator\");\n    if (name === \"operator\") {\n      return operator ? count : -1;\n    }\n    count += operator.length;\n    count += operatorSpaces.after.length;\n    var valueSpaces = this._spacesFor(\"value\");\n    count += valueSpaces.before.length;\n    var value = this.stringifyProperty(\"value\");\n    if (name === \"value\") {\n      return value ? count : -1;\n    }\n    count += value.length;\n    count += valueSpaces.after.length;\n    var insensitiveSpaces = this._spacesFor(\"insensitive\");\n    count += insensitiveSpaces.before.length;\n    if (name === \"insensitive\") {\n      return this.insensitive ? count : -1;\n    }\n    return -1;\n  };\n  _proto.toString = function toString() {\n    var _this2 = this;\n    var selector = [this.rawSpaceBefore, '['];\n    selector.push(this._stringFor('qualifiedAttribute', 'attribute'));\n    if (this.operator && (this.value || this.value === '')) {\n      selector.push(this._stringFor('operator'));\n      selector.push(this._stringFor('value'));\n      selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {\n        if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {\n          attrSpaces.before = \" \";\n        }\n        return defaultAttrConcat(attrValue, attrSpaces);\n      }));\n    }\n    selector.push(']');\n    selector.push(this.rawSpaceAfter);\n    return selector.join('');\n  };\n  _createClass(Attribute, [{\n    key: \"quoted\",\n    get: function get() {\n      var qm = this.quoteMark;\n      return qm === \"'\" || qm === '\"';\n    },\n    set: function set(value) {\n      warnOfDeprecatedQuotedAssignment();\n    }\n\n    /**\n     * returns a single (`'`) or double (`\"`) quote character if the value is quoted.\n     * returns `null` if the value is not quoted.\n     * returns `undefined` if the quotation state is unknown (this can happen when\n     * the attribute is constructed without specifying a quote mark.)\n     */\n  }, {\n    key: \"quoteMark\",\n    get: function get() {\n      return this._quoteMark;\n    }\n\n    /**\n     * Set the quote mark to be used by this attribute's value.\n     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute\n     * value is updated accordingly.\n     *\n     * @param {\"'\" | '\"' | null} quoteMark The quote mark or `null` if the value should be unquoted.\n     */,\n    set: function set(quoteMark) {\n      if (!this._constructed) {\n        this._quoteMark = quoteMark;\n        return;\n      }\n      if (this._quoteMark !== quoteMark) {\n        this._quoteMark = quoteMark;\n        this._syncRawValue();\n      }\n    }\n  }, {\n    key: \"qualifiedAttribute\",\n    get: function get() {\n      return this.qualifiedName(this.raws.attribute || this.attribute);\n    }\n  }, {\n    key: \"insensitiveFlag\",\n    get: function get() {\n      return this.insensitive ? 'i' : '';\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set:\n    /**\n     * Before 3.0, the value had to be set to an escaped value including any wrapped\n     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value\n     * is unescaped during parsing and any quote marks are removed.\n     *\n     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,\n     * a deprecation warning is raised when the new value contains any characters that would\n     * require escaping (including if it contains wrapped quotes).\n     *\n     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe\n     * how the new value is quoted.\n     */\n    function set(v) {\n      if (this._constructed) {\n        var _unescapeValue2 = unescapeValue(v),\n          deprecatedUsage = _unescapeValue2.deprecatedUsage,\n          unescaped = _unescapeValue2.unescaped,\n          quoteMark = _unescapeValue2.quoteMark;\n        if (deprecatedUsage) {\n          warnOfDeprecatedValueAssignment();\n        }\n        if (unescaped === this._value && quoteMark === this._quoteMark) {\n          return;\n        }\n        this._value = unescaped;\n        this._quoteMark = quoteMark;\n        this._syncRawValue();\n      } else {\n        this._value = v;\n      }\n    }\n  }, {\n    key: \"insensitive\",\n    get: function get() {\n      return this._insensitive;\n    }\n\n    /**\n     * Set the case insensitive flag.\n     * If the case insensitive flag changes, the raw (escaped) value at `attr.raws.insensitiveFlag`\n     * of the attribute is updated accordingly.\n     *\n     * @param {true | false} insensitive true if the attribute should match case-insensitively.\n     */,\n    set: function set(insensitive) {\n      if (!insensitive) {\n        this._insensitive = false;\n\n        // \"i\" and \"I\" can be used in \"this.raws.insensitiveFlag\" to store the original notation.\n        // When setting `attr.insensitive = false` both should be erased to ensure correct serialization.\n        if (this.raws && (this.raws.insensitiveFlag === 'I' || this.raws.insensitiveFlag === 'i')) {\n          this.raws.insensitiveFlag = undefined;\n        }\n      }\n      this._insensitive = insensitive;\n    }\n  }, {\n    key: \"attribute\",\n    get: function get() {\n      return this._attribute;\n    },\n    set: function set(name) {\n      this._handleEscapes(\"attribute\", name);\n      this._attribute = name;\n    }\n  }]);\n  return Attribute;\n}(_namespace[\"default\"]);\nexports[\"default\"] = Attribute;\nAttribute.NO_QUOTE = null;\nAttribute.SINGLE_QUOTE = \"'\";\nAttribute.DOUBLE_QUOTE = '\"';\nvar CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {\n  \"'\": {\n    quotes: 'single',\n    wrap: true\n  },\n  '\"': {\n    quotes: 'double',\n    wrap: true\n  }\n}, _CSSESC_QUOTE_OPTIONS[null] = {\n  isIdentifier: true\n}, _CSSESC_QUOTE_OPTIONS);\nfunction defaultAttrConcat(attrValue, attrSpaces) {\n  return \"\" + attrSpaces.before + attrValue + attrSpaces.after;\n}"]}}