{"code":"(()=>{\n\"use strict\";let list={split(string,separators,last){let array=[];let current=\"\";let split=false;let func=0;let inQuote=false;let prevQuote=\"\";let escape=false;for(let letter of string){if(escape){escape=false}else if(letter===\"\\\\\"){escape=true}else if(inQuote){if(letter===prevQuote){inQuote=false}}else if(letter==='\"'||letter===\"'\"){inQuote=true;prevQuote=letter}else if(letter===\"(\"){func+=1}else if(letter===\")\"){if(func>0)func-=1}else if(func===0){if(separators.includes(letter))split=true}if(split){if(current!==\"\")array.push(current.trim());current=\"\";split=false}else{current+=letter}}if(last||current!==\"\")array.push(current.trim());return array},space(string){let spaces=[\" \",\"\\n\",\"\t\"];return list.split(string,spaces)},comma(string){return list.split(string,[\",\"],true)}};module.exports=list;list.default=list;\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAEA,IAAI,KAAO,CACT,MAAM,OAAQ,WAAY,KAAM,CAC9B,IAAI,MAAQ,CAAC,EACb,IAAI,QAAU,GACd,IAAI,MAAQ,MAEZ,IAAI,KAAO,EACX,IAAI,QAAU,MACd,IAAI,UAAY,GAChB,IAAI,OAAS,MAEb,QAAS,UAAU,OAAQ,CACzB,GAAI,OAAQ,CACV,OAAS,KACX,SAAW,SAAW,KAAM,CAC1B,OAAS,IACX,SAAW,QAAS,CAClB,GAAI,SAAW,UAAW,CACxB,QAAU,KACZ,CACF,SAAW,SAAW,KAAO,SAAW,IAAK,CAC3C,QAAU,KACV,UAAY,MACd,SAAW,SAAW,IAAK,CACzB,MAAQ,CACV,SAAW,SAAW,IAAK,CACzB,GAAI,KAAO,EAAG,MAAQ,CACxB,SAAW,OAAS,EAAG,CACrB,GAAI,WAAW,SAAS,MAAM,EAAG,MAAQ,IAC3C,CAEA,GAAI,MAAO,CACT,GAAI,UAAY,GAAI,MAAM,KAAK,QAAQ,KAAK,CAAC,EAC7C,QAAU,GACV,MAAQ,KACV,KAAO,CACL,SAAW,MACb,CACF,CAEA,GAAI,MAAQ,UAAY,GAAI,MAAM,KAAK,QAAQ,KAAK,CAAC,EACrD,OAAO,KACT,EAEA,MAAM,OAAQ,CACZ,IAAI,OAAS,CAAC,IAAK,KAAM,GAAI,EAC7B,OAAO,KAAK,MAAM,OAAQ,MAAM,CAClC,EAEA,MAAM,OAAQ,CACZ,OAAO,KAAK,MAAM,OAAQ,CAAC,GAAG,EAAG,IAAI,CACvC,CACF,EAEA,OAAO,QAAU,KACjB,KAAK,QAAU","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/postcss@8.4.24/node_modules/postcss/lib/list.js"],"sourcesContent":["'use strict'\n\nlet list = {\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma(string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n"]}}