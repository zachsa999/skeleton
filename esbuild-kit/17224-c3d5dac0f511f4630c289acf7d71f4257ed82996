{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});exports.isInteger=num=>{if(typeof num===\"number\"){return Number.isInteger(num)}if(typeof num===\"string\"&&num.trim()!==\"\"){return Number.isInteger(Number(num))}return false};exports.find=(node,type)=>node.nodes.find(node2=>node2.type===type);exports.exceedsLimit=(min,max,step=1,limit)=>{if(limit===false)return false;if(!exports.isInteger(min)||!exports.isInteger(max))return false;return(Number(max)-Number(min))/Number(step)>=limit};exports.escapeNode=(block,n=0,type)=>{let node=block.nodes[n];if(!node)return;if(type&&node.type===type||node.type===\"open\"||node.type===\"close\"){if(node.escaped!==true){node.value=\"\\\\\"+node.value;node.escaped=true}}};exports.encloseBrace=node=>{if(node.type!==\"brace\")return false;if(node.commas>>0+node.ranges>>0===0){node.invalid=true;return true}return false};exports.isInvalidBrace=block=>{if(block.type!==\"brace\")return false;if(block.invalid===true||block.dollar)return true;if(block.commas>>0+block.ranges>>0===0){block.invalid=true;return true}if(block.open!==true||block.close!==true){block.invalid=true;return true}return false};exports.isOpenOrClose=node=>{if(node.type===\"open\"||node.type===\"close\"){return true}return node.open===true||node.close===true};exports.reduce=nodes=>nodes.reduce((acc,node)=>{if(node.type===\"text\")acc.push(node.value);if(node.type===\"range\")node.type=\"text\";return acc},[]);exports.flatten=(...args)=>{const result=[];const flat=__name(arr=>{for(let i=0;i<arr.length;i++){let ele=arr[i];Array.isArray(ele)?flat(ele,result):ele!==void 0&&result.push(ele)}return result},\"flat\");flat(args);return result};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,QAAQ,UAAY,KAAO,CACzB,GAAI,OAAO,MAAQ,SAAU,CAC3B,OAAO,OAAO,UAAU,GAAG,CAC7B,CACA,GAAI,OAAO,MAAQ,UAAY,IAAI,KAAK,IAAM,GAAI,CAChD,OAAO,OAAO,UAAU,OAAO,GAAG,CAAC,CACrC,CACA,MAAO,MACT,EAMA,QAAQ,KAAO,CAAC,KAAM,OAAS,KAAK,MAAM,KAAKA,OAAQA,MAAK,OAAS,IAAI,EAMzE,QAAQ,aAAe,CAAC,IAAK,IAAK,KAAO,EAAG,QAAU,CACpD,GAAI,QAAU,MAAO,MAAO,OAC5B,GAAI,CAAC,QAAQ,UAAU,GAAG,GAAK,CAAC,QAAQ,UAAU,GAAG,EAAG,MAAO,OAC/D,OAAS,OAAO,GAAG,EAAI,OAAO,GAAG,GAAK,OAAO,IAAI,GAAM,KACzD,EAMA,QAAQ,WAAa,CAAC,MAAO,EAAI,EAAG,OAAS,CAC3C,IAAI,KAAO,MAAM,MAAM,CAAC,EACxB,GAAI,CAAC,KAAM,OAEX,GAAK,MAAQ,KAAK,OAAS,MAAS,KAAK,OAAS,QAAU,KAAK,OAAS,QAAS,CACjF,GAAI,KAAK,UAAY,KAAM,CACzB,KAAK,MAAQ,KAAO,KAAK,MACzB,KAAK,QAAU,IACjB,CACF,CACF,EAMA,QAAQ,aAAe,MAAQ,CAC7B,GAAI,KAAK,OAAS,QAAS,MAAO,OAClC,GAAK,KAAK,QAAU,EAAI,KAAK,QAAU,IAAO,EAAG,CAC/C,KAAK,QAAU,KACf,MAAO,KACT,CACA,MAAO,MACT,EAMA,QAAQ,eAAiB,OAAS,CAChC,GAAI,MAAM,OAAS,QAAS,MAAO,OACnC,GAAI,MAAM,UAAY,MAAQ,MAAM,OAAQ,MAAO,MACnD,GAAK,MAAM,QAAU,EAAI,MAAM,QAAU,IAAO,EAAG,CACjD,MAAM,QAAU,KAChB,MAAO,KACT,CACA,GAAI,MAAM,OAAS,MAAQ,MAAM,QAAU,KAAM,CAC/C,MAAM,QAAU,KAChB,MAAO,KACT,CACA,MAAO,MACT,EAMA,QAAQ,cAAgB,MAAQ,CAC9B,GAAI,KAAK,OAAS,QAAU,KAAK,OAAS,QAAS,CACjD,MAAO,KACT,CACA,OAAO,KAAK,OAAS,MAAQ,KAAK,QAAU,IAC9C,EAMA,QAAQ,OAAS,OAAS,MAAM,OAAO,CAAC,IAAK,OAAS,CACpD,GAAI,KAAK,OAAS,OAAQ,IAAI,KAAK,KAAK,KAAK,EAC7C,GAAI,KAAK,OAAS,QAAS,KAAK,KAAO,OACvC,OAAO,GACT,EAAG,CAAC,CAAC,EAML,QAAQ,QAAU,IAAI,OAAS,CAC7B,MAAM,OAAS,CAAC,EAChB,MAAM,KAAO,YAAO,CAClB,QAAS,EAAI,EAAG,EAAI,IAAI,OAAQ,IAAK,CACnC,IAAI,IAAM,IAAI,CAAC,EACf,MAAM,QAAQ,GAAG,EAAI,KAAK,IAAK,MAAM,EAAI,MAAQ,QAAU,OAAO,KAAK,GAAG,CAC5E,CACA,OAAO,MACT,EANa,QAOb,KAAK,IAAI,EACT,OAAO,MACT","names":["node"],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/utils.js"],"sourcesContent":["'use strict';\n\nexports.isInteger = num => {\n  if (typeof num === 'number') {\n    return Number.isInteger(num);\n  }\n  if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isInteger(Number(num));\n  }\n  return false;\n};\n\n/**\n * Find a node of the given type\n */\n\nexports.find = (node, type) => node.nodes.find(node => node.type === type);\n\n/**\n * Find a node of the given type\n */\n\nexports.exceedsLimit = (min, max, step = 1, limit) => {\n  if (limit === false) return false;\n  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;\n  return ((Number(max) - Number(min)) / Number(step)) >= limit;\n};\n\n/**\n * Escape the given node with '\\\\' before node.value\n */\n\nexports.escapeNode = (block, n = 0, type) => {\n  let node = block.nodes[n];\n  if (!node) return;\n\n  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {\n    if (node.escaped !== true) {\n      node.value = '\\\\' + node.value;\n      node.escaped = true;\n    }\n  }\n};\n\n/**\n * Returns true if the given brace node should be enclosed in literal braces\n */\n\nexports.encloseBrace = node => {\n  if (node.type !== 'brace') return false;\n  if ((node.commas >> 0 + node.ranges >> 0) === 0) {\n    node.invalid = true;\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns true if a brace node is invalid.\n */\n\nexports.isInvalidBrace = block => {\n  if (block.type !== 'brace') return false;\n  if (block.invalid === true || block.dollar) return true;\n  if ((block.commas >> 0 + block.ranges >> 0) === 0) {\n    block.invalid = true;\n    return true;\n  }\n  if (block.open !== true || block.close !== true) {\n    block.invalid = true;\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns true if a node is an open or close node\n */\n\nexports.isOpenOrClose = node => {\n  if (node.type === 'open' || node.type === 'close') {\n    return true;\n  }\n  return node.open === true || node.close === true;\n};\n\n/**\n * Reduce an array of text nodes.\n */\n\nexports.reduce = nodes => nodes.reduce((acc, node) => {\n  if (node.type === 'text') acc.push(node.value);\n  if (node.type === 'range') node.type = 'text';\n  return acc;\n}, []);\n\n/**\n * Flatten an array\n */\n\nexports.flatten = (...args) => {\n  const result = [];\n  const flat = arr => {\n    for (let i = 0; i < arr.length; i++) {\n      let ele = arr[i];\n      Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);\n    }\n    return result;\n  };\n  flat(args);\n  return result;\n};\n"]}}