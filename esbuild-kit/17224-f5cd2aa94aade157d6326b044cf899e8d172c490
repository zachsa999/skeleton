{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"toPath\",{enumerable:true,get:function(){return toPath}});function toPath(path){if(Array.isArray(path))return path;let openBrackets=path.split(\"[\").length-1;let closedBrackets=path.split(\"]\").length-1;if(openBrackets!==closedBrackets){throw new Error(`Path is invalid. Has unbalanced brackets: ${path}`)}return path.split(/\\.(?![^\\[]*\\])|[\\[\\]]/g).filter(Boolean)}__name(toPath,\"toPath\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAcA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,OAAO,eAAe,QAAS,SAAU,CACrC,WAAY,KACZ,IAAK,UAAW,CACZ,OAAO,MACX,CACJ,CAAC,EACD,SAAS,OAAO,KAAM,CAClB,GAAI,MAAM,QAAQ,IAAI,EAAG,OAAO,KAChC,IAAI,aAAe,KAAK,MAAM,GAAG,EAAE,OAAS,EAC5C,IAAI,eAAiB,KAAK,MAAM,GAAG,EAAE,OAAS,EAC9C,GAAI,eAAiB,eAAgB,CACjC,MAAM,IAAI,MAAM,6CAA6C,MAAM,CACvE,CACA,OAAO,KAAK,MAAM,wBAAwB,EAAE,OAAO,OAAO,CAC9D,CARS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/util/toPath.js"],"sourcesContent":["/**\n * Parse a path string into an array of path segments.\n *\n * Square bracket notation `a[b]` may be used to \"escape\" dots that would otherwise be interpreted as path separators.\n *\n * Example:\n * a -> ['a']\n * a.b.c -> ['a', 'b', 'c']\n * a[b].c -> ['a', 'b', 'c']\n * a[b.c].e.f -> ['a', 'b.c', 'e', 'f']\n * a[b][c][d] -> ['a', 'b', 'c', 'd']\n *\n * @param {string|string[]} path\n **/ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"toPath\", {\n    enumerable: true,\n    get: function() {\n        return toPath;\n    }\n});\nfunction toPath(path) {\n    if (Array.isArray(path)) return path;\n    let openBrackets = path.split(\"[\").length - 1;\n    let closedBrackets = path.split(\"]\").length - 1;\n    if (openBrackets !== closedBrackets) {\n        throw new Error(`Path is invalid. Has unbalanced brackets: ${path}`);\n    }\n    return path.split(/\\.(?![^\\[]*\\])|[\\[\\]]/g).filter(Boolean);\n}\n"]}}