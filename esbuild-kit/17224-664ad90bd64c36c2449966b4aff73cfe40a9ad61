{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});exports.readdir=exports.readdirWithFileTypes=exports.read=void 0;const fsStat=require(\"@nodelib/fs.stat\");const constants_1=require(\"../constants\");const utils=require(\"../utils\");const common=require(\"./common\");function read(directory,settings){if(!settings.stats&&constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES){return readdirWithFileTypes(directory,settings)}return readdir(directory,settings)}__name(read,\"read\");exports.read=read;function readdirWithFileTypes(directory,settings){const dirents=settings.fs.readdirSync(directory,{withFileTypes:true});return dirents.map(dirent=>{const entry={dirent,name:dirent.name,path:common.joinPathSegments(directory,dirent.name,settings.pathSegmentSeparator)};if(entry.dirent.isSymbolicLink()&&settings.followSymbolicLinks){try{const stats=settings.fs.statSync(entry.path);entry.dirent=utils.fs.createDirentFromStats(entry.name,stats)}catch(error){if(settings.throwErrorOnBrokenSymbolicLink){throw error}}}return entry})}__name(readdirWithFileTypes,\"readdirWithFileTypes\");exports.readdirWithFileTypes=readdirWithFileTypes;function readdir(directory,settings){const names=settings.fs.readdirSync(directory);return names.map(name=>{const entryPath=common.joinPathSegments(directory,name,settings.pathSegmentSeparator);const stats=fsStat.statSync(entryPath,settings.fsStatSettings);const entry={name,path:entryPath,dirent:utils.fs.createDirentFromStats(name,stats)};if(settings.stats){entry.stats=stats}return entry})}__name(readdir,\"readdir\");exports.readdir=readdir;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CAAE,MAAO,IAAK,CAAC,EAC5D,QAAQ,QAAU,QAAQ,qBAAuB,QAAQ,KAAO,OAChE,MAAM,OAAS,QAAQ,kBAAkB,EACzC,MAAM,YAAc,QAAQ,cAAc,EAC1C,MAAM,MAAQ,QAAQ,UAAU,EAChC,MAAM,OAAS,QAAQ,UAAU,EACjC,SAAS,KAAK,UAAW,SAAU,CAC/B,GAAI,CAAC,SAAS,OAAS,YAAY,mCAAoC,CACnE,OAAO,qBAAqB,UAAW,QAAQ,CACnD,CACA,OAAO,QAAQ,UAAW,QAAQ,CACtC,CALS,oBAMT,QAAQ,KAAO,KACf,SAAS,qBAAqB,UAAW,SAAU,CAC/C,MAAM,QAAU,SAAS,GAAG,YAAY,UAAW,CAAE,cAAe,IAAK,CAAC,EAC1E,OAAO,QAAQ,IAAK,QAAW,CAC3B,MAAM,MAAQ,CACV,OACA,KAAM,OAAO,KACb,KAAM,OAAO,iBAAiB,UAAW,OAAO,KAAM,SAAS,oBAAoB,CACvF,EACA,GAAI,MAAM,OAAO,eAAe,GAAK,SAAS,oBAAqB,CAC/D,GAAI,CACA,MAAM,MAAQ,SAAS,GAAG,SAAS,MAAM,IAAI,EAC7C,MAAM,OAAS,MAAM,GAAG,sBAAsB,MAAM,KAAM,KAAK,CACnE,OACO,MAAP,CACI,GAAI,SAAS,+BAAgC,CACzC,MAAM,KACV,CACJ,CACJ,CACA,OAAO,KACX,CAAC,CACL,CArBS,oDAsBT,QAAQ,qBAAuB,qBAC/B,SAAS,QAAQ,UAAW,SAAU,CAClC,MAAM,MAAQ,SAAS,GAAG,YAAY,SAAS,EAC/C,OAAO,MAAM,IAAK,MAAS,CACvB,MAAM,UAAY,OAAO,iBAAiB,UAAW,KAAM,SAAS,oBAAoB,EACxF,MAAM,MAAQ,OAAO,SAAS,UAAW,SAAS,cAAc,EAChE,MAAM,MAAQ,CACV,KACA,KAAM,UACN,OAAQ,MAAM,GAAG,sBAAsB,KAAM,KAAK,CACtD,EACA,GAAI,SAAS,MAAO,CAChB,MAAM,MAAQ,KAClB,CACA,OAAO,KACX,CAAC,CACL,CAfS,0BAgBT,QAAQ,QAAU","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings) {\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n        return readdirWithFileTypes(directory, settings);\n    }\n    return readdir(directory, settings);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings) {\n    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });\n    return dirents.map((dirent) => {\n        const entry = {\n            dirent,\n            name: dirent.name,\n            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n        };\n        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {\n            try {\n                const stats = settings.fs.statSync(entry.path);\n                entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n            }\n            catch (error) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    throw error;\n                }\n            }\n        }\n        return entry;\n    });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction readdir(directory, settings) {\n    const names = settings.fs.readdirSync(directory);\n    return names.map((name) => {\n        const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);\n        const entry = {\n            name,\n            path: entryPath,\n            dirent: utils.fs.createDirentFromStats(name, stats)\n        };\n        if (settings.stats) {\n            entry.stats = stats;\n        }\n        return entry;\n    });\n}\nexports.readdir = readdir;\n"]}}