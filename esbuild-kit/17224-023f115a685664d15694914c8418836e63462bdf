{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});function _export(target,all){for(var name in all)Object.defineProperty(target,name,{enumerable:true,get:all[name]})}__name(_export,\"_export\");_export(exports,{flagEnabled:function(){return flagEnabled},issueFlagNotices:function(){return issueFlagNotices},default:function(){return _default}});const _picocolors=_interop_require_default(require(\"picocolors\"));const _log=_interop_require_default(require(\"./util/log\"));function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}__name(_interop_require_default,\"_interop_require_default\");let defaults={optimizeUniversalDefaults:false,generalizedModifiers:true,get disableColorOpacityUtilitiesByDefault(){return false},get relativeContentPathsByDefault(){return false}};let featureFlags={future:[\"hoverOnlyWhenSupported\",\"respectDefaultRingColorOpacity\",\"disableColorOpacityUtilitiesByDefault\",\"relativeContentPathsByDefault\"],experimental:[\"optimizeUniversalDefaults\",\"generalizedModifiers\"]};function flagEnabled(config,flag){if(featureFlags.future.includes(flag)){var _config_future;var _config_future_flag,_ref;return config.future===\"all\"||((_ref=(_config_future_flag=config===null||config===void 0?void 0:(_config_future=config.future)===null||_config_future===void 0?void 0:_config_future[flag])!==null&&_config_future_flag!==void 0?_config_future_flag:defaults[flag])!==null&&_ref!==void 0?_ref:false)}if(featureFlags.experimental.includes(flag)){var _config_experimental;var _config_experimental_flag,_ref1;return config.experimental===\"all\"||((_ref1=(_config_experimental_flag=config===null||config===void 0?void 0:(_config_experimental=config.experimental)===null||_config_experimental===void 0?void 0:_config_experimental[flag])!==null&&_config_experimental_flag!==void 0?_config_experimental_flag:defaults[flag])!==null&&_ref1!==void 0?_ref1:false)}return false}__name(flagEnabled,\"flagEnabled\");function experimentalFlagsEnabled(config){if(config.experimental===\"all\"){return featureFlags.experimental}var _config_experimental;return Object.keys((_config_experimental=config===null||config===void 0?void 0:config.experimental)!==null&&_config_experimental!==void 0?_config_experimental:{}).filter(flag=>featureFlags.experimental.includes(flag)&&config.experimental[flag])}__name(experimentalFlagsEnabled,\"experimentalFlagsEnabled\");function issueFlagNotices(config){if(process.env.JEST_WORKER_ID!==void 0){return}if(experimentalFlagsEnabled(config).length>0){let changes=experimentalFlagsEnabled(config).map(s=>_picocolors.default.yellow(s)).join(\", \");_log.default.warn(\"experimental-flags-enabled\",[`You have enabled experimental features: ${changes}`,\"Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time.\"])}}__name(issueFlagNotices,\"issueFlagNotices\");const _default=featureFlags;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,SAAS,QAAQ,OAAQ,IAAK,CAC1B,QAAQ,QAAQ,IAAI,OAAO,eAAe,OAAQ,KAAM,CACpD,WAAY,KACZ,IAAK,IAAI,IAAI,CACjB,CAAC,CACL,CALS,0BAMT,QAAQ,QAAS,CACb,YAAa,UAAW,CACpB,OAAO,WACX,EACA,iBAAkB,UAAW,CACzB,OAAO,gBACX,EACA,QAAS,UAAW,CAChB,OAAO,QACX,CACJ,CAAC,EACD,MAAM,YAA4B,yBAAyB,QAAQ,YAAY,CAAC,EAChF,MAAM,KAAqB,yBAAyB,QAAQ,YAAY,CAAC,EACzE,SAAS,yBAAyB,IAAK,CACnC,OAAO,KAAO,IAAI,WAAa,IAAM,CACjC,QAAS,GACb,CACJ,CAJS,4DAKT,IAAI,SAAW,CACX,0BAA2B,MAC3B,qBAAsB,KACtB,IAAI,uCAAyC,CACzC,MAAO,MACX,EACA,IAAI,+BAAiC,CACjC,MAAO,MACX,CACJ,EACA,IAAI,aAAe,CACf,OAAQ,CACJ,yBACA,iCACA,wCACA,+BACJ,EACA,aAAc,CACV,4BACA,sBACJ,CACJ,EACA,SAAS,YAAY,OAAQ,KAAM,CAC/B,GAAI,aAAa,OAAO,SAAS,IAAI,EAAG,CACpC,IAAI,eACJ,IAAI,oBAAqB,KACzB,OAAO,OAAO,SAAW,SAAW,MAAQ,oBAAsB,SAAW,MAAQ,SAAW,OAAS,QAAU,eAAiB,OAAO,UAAY,MAAQ,iBAAmB,OAAS,OAAS,eAAe,IAAI,KAAO,MAAQ,sBAAwB,OAAS,oBAAsB,SAAS,IAAI,KAAO,MAAQ,OAAS,OAAS,KAAO,MACtV,CACA,GAAI,aAAa,aAAa,SAAS,IAAI,EAAG,CAC1C,IAAI,qBACJ,IAAI,0BAA2B,MAC/B,OAAO,OAAO,eAAiB,SAAW,OAAS,0BAA4B,SAAW,MAAQ,SAAW,OAAS,QAAU,qBAAuB,OAAO,gBAAkB,MAAQ,uBAAyB,OAAS,OAAS,qBAAqB,IAAI,KAAO,MAAQ,4BAA8B,OAAS,0BAA4B,SAAS,IAAI,KAAO,MAAQ,QAAU,OAAS,MAAQ,MACzY,CACA,MAAO,MACX,CAZS,kCAaT,SAAS,yBAAyB,OAAQ,CACtC,GAAI,OAAO,eAAiB,MAAO,CAC/B,OAAO,aAAa,YACxB,CACA,IAAI,qBACJ,OAAO,OAAO,MAAM,qBAAuB,SAAW,MAAQ,SAAW,OAAS,OAAS,OAAO,gBAAkB,MAAQ,uBAAyB,OAAS,qBAAuB,CAAC,CAAC,EAAE,OAAQ,MAAO,aAAa,aAAa,SAAS,IAAI,GAAK,OAAO,aAAa,IAAI,CAAC,CACjR,CANS,4DAOT,SAAS,iBAAiB,OAAQ,CAC9B,GAAI,QAAQ,IAAI,iBAAmB,OAAW,CAC1C,MACJ,CACA,GAAI,yBAAyB,MAAM,EAAE,OAAS,EAAG,CAC7C,IAAI,QAAU,yBAAyB,MAAM,EAAE,IAAK,GAAI,YAAY,QAAQ,OAAO,CAAC,CAAC,EAAE,KAAK,IAAI,EAChG,KAAK,QAAQ,KAAK,6BAA8B,CAC5C,2CAA2C,UAC3C,8HACJ,CAAC,CACL,CACJ,CAXS,4CAYT,MAAM,SAAW","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/featureFlags.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    flagEnabled: function() {\n        return flagEnabled;\n    },\n    issueFlagNotices: function() {\n        return issueFlagNotices;\n    },\n    default: function() {\n        return _default;\n    }\n});\nconst _picocolors = /*#__PURE__*/ _interop_require_default(require(\"picocolors\"));\nconst _log = /*#__PURE__*/ _interop_require_default(require(\"./util/log\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nlet defaults = {\n    optimizeUniversalDefaults: false,\n    generalizedModifiers: true,\n    get disableColorOpacityUtilitiesByDefault () {\n        return false;\n    },\n    get relativeContentPathsByDefault () {\n        return false;\n    }\n};\nlet featureFlags = {\n    future: [\n        \"hoverOnlyWhenSupported\",\n        \"respectDefaultRingColorOpacity\",\n        \"disableColorOpacityUtilitiesByDefault\",\n        \"relativeContentPathsByDefault\"\n    ],\n    experimental: [\n        \"optimizeUniversalDefaults\",\n        \"generalizedModifiers\"\n    ]\n};\nfunction flagEnabled(config, flag) {\n    if (featureFlags.future.includes(flag)) {\n        var _config_future;\n        var _config_future_flag, _ref;\n        return config.future === \"all\" || ((_ref = (_config_future_flag = config === null || config === void 0 ? void 0 : (_config_future = config.future) === null || _config_future === void 0 ? void 0 : _config_future[flag]) !== null && _config_future_flag !== void 0 ? _config_future_flag : defaults[flag]) !== null && _ref !== void 0 ? _ref : false);\n    }\n    if (featureFlags.experimental.includes(flag)) {\n        var _config_experimental;\n        var _config_experimental_flag, _ref1;\n        return config.experimental === \"all\" || ((_ref1 = (_config_experimental_flag = config === null || config === void 0 ? void 0 : (_config_experimental = config.experimental) === null || _config_experimental === void 0 ? void 0 : _config_experimental[flag]) !== null && _config_experimental_flag !== void 0 ? _config_experimental_flag : defaults[flag]) !== null && _ref1 !== void 0 ? _ref1 : false);\n    }\n    return false;\n}\nfunction experimentalFlagsEnabled(config) {\n    if (config.experimental === \"all\") {\n        return featureFlags.experimental;\n    }\n    var _config_experimental;\n    return Object.keys((_config_experimental = config === null || config === void 0 ? void 0 : config.experimental) !== null && _config_experimental !== void 0 ? _config_experimental : {}).filter((flag)=>featureFlags.experimental.includes(flag) && config.experimental[flag]);\n}\nfunction issueFlagNotices(config) {\n    if (process.env.JEST_WORKER_ID !== undefined) {\n        return;\n    }\n    if (experimentalFlagsEnabled(config).length > 0) {\n        let changes = experimentalFlagsEnabled(config).map((s)=>_picocolors.default.yellow(s)).join(\", \");\n        _log.default.warn(\"experimental-flags-enabled\", [\n            `You have enabled experimental features: ${changes}`,\n            \"Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time.\"\n        ]);\n    }\n}\nconst _default = featureFlags;\n"]}}