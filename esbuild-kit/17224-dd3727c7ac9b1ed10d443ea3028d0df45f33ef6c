{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const Stream=require(\"stream\");const PassThrough=Stream.PassThrough;const slice=Array.prototype.slice;module.exports=merge2;function merge2(){const streamsQueue=[];const args=slice.call(arguments);let merging=false;let options=args[args.length-1];if(options&&!Array.isArray(options)&&options.pipe==null){args.pop()}else{options={}}const doEnd=options.end!==false;const doPipeError=options.pipeError===true;if(options.objectMode==null){options.objectMode=true}if(options.highWaterMark==null){options.highWaterMark=64*1024}const mergedStream=PassThrough(options);function addStream(){for(let i=0,len=arguments.length;i<len;i++){streamsQueue.push(pauseStreams(arguments[i],options))}mergeStream();return this}__name(addStream,\"addStream\");function mergeStream(){if(merging){return}merging=true;let streams=streamsQueue.shift();if(!streams){process.nextTick(endStream);return}if(!Array.isArray(streams)){streams=[streams]}let pipesCount=streams.length+1;function next(){if(--pipesCount>0){return}merging=false;mergeStream()}__name(next,\"next\");function pipe(stream){function onend(){stream.removeListener(\"merge2UnpipeEnd\",onend);stream.removeListener(\"end\",onend);if(doPipeError){stream.removeListener(\"error\",onerror)}next()}__name(onend,\"onend\");function onerror(err){mergedStream.emit(\"error\",err)}__name(onerror,\"onerror\");if(stream._readableState.endEmitted){return next()}stream.on(\"merge2UnpipeEnd\",onend);stream.on(\"end\",onend);if(doPipeError){stream.on(\"error\",onerror)}stream.pipe(mergedStream,{end:false});stream.resume()}__name(pipe,\"pipe\");for(let i=0;i<streams.length;i++){pipe(streams[i])}next()}__name(mergeStream,\"mergeStream\");function endStream(){merging=false;mergedStream.emit(\"queueDrain\");if(doEnd){mergedStream.end()}}__name(endStream,\"endStream\");mergedStream.setMaxListeners(0);mergedStream.add=addStream;mergedStream.on(\"unpipe\",function(stream){stream.emit(\"merge2UnpipeEnd\")});if(args.length){addStream.apply(null,args)}return mergedStream}__name(merge2,\"merge2\");function pauseStreams(streams,options){if(!Array.isArray(streams)){if(!streams._readableState&&streams.pipe){streams=streams.pipe(PassThrough(options))}if(!streams._readableState||!streams.pause||!streams.pipe){throw new Error(\"Only readable stream can be merged.\")}streams.pause()}else{for(let i=0,len=streams.length;i<len;i++){streams[i]=pauseStreams(streams[i],options)}}return streams}__name(pauseStreams,\"pauseStreams\");\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js"],"sourcesContent":["'use strict'\n/*\n * merge2\n * https://github.com/teambition/merge2\n *\n * Copyright (c) 2014-2020 Teambition\n * Licensed under the MIT license.\n */\nconst Stream = require('stream')\nconst PassThrough = Stream.PassThrough\nconst slice = Array.prototype.slice\n\nmodule.exports = merge2\n\nfunction merge2 () {\n  const streamsQueue = []\n  const args = slice.call(arguments)\n  let merging = false\n  let options = args[args.length - 1]\n\n  if (options && !Array.isArray(options) && options.pipe == null) {\n    args.pop()\n  } else {\n    options = {}\n  }\n\n  const doEnd = options.end !== false\n  const doPipeError = options.pipeError === true\n  if (options.objectMode == null) {\n    options.objectMode = true\n  }\n  if (options.highWaterMark == null) {\n    options.highWaterMark = 64 * 1024\n  }\n  const mergedStream = PassThrough(options)\n\n  function addStream () {\n    for (let i = 0, len = arguments.length; i < len; i++) {\n      streamsQueue.push(pauseStreams(arguments[i], options))\n    }\n    mergeStream()\n    return this\n  }\n\n  function mergeStream () {\n    if (merging) {\n      return\n    }\n    merging = true\n\n    let streams = streamsQueue.shift()\n    if (!streams) {\n      process.nextTick(endStream)\n      return\n    }\n    if (!Array.isArray(streams)) {\n      streams = [streams]\n    }\n\n    let pipesCount = streams.length + 1\n\n    function next () {\n      if (--pipesCount > 0) {\n        return\n      }\n      merging = false\n      mergeStream()\n    }\n\n    function pipe (stream) {\n      function onend () {\n        stream.removeListener('merge2UnpipeEnd', onend)\n        stream.removeListener('end', onend)\n        if (doPipeError) {\n          stream.removeListener('error', onerror)\n        }\n        next()\n      }\n      function onerror (err) {\n        mergedStream.emit('error', err)\n      }\n      // skip ended stream\n      if (stream._readableState.endEmitted) {\n        return next()\n      }\n\n      stream.on('merge2UnpipeEnd', onend)\n      stream.on('end', onend)\n\n      if (doPipeError) {\n        stream.on('error', onerror)\n      }\n\n      stream.pipe(mergedStream, { end: false })\n      // compatible for old stream\n      stream.resume()\n    }\n\n    for (let i = 0; i < streams.length; i++) {\n      pipe(streams[i])\n    }\n\n    next()\n  }\n\n  function endStream () {\n    merging = false\n    // emit 'queueDrain' when all streams merged.\n    mergedStream.emit('queueDrain')\n    if (doEnd) {\n      mergedStream.end()\n    }\n  }\n\n  mergedStream.setMaxListeners(0)\n  mergedStream.add = addStream\n  mergedStream.on('unpipe', function (stream) {\n    stream.emit('merge2UnpipeEnd')\n  })\n\n  if (args.length) {\n    addStream.apply(null, args)\n  }\n  return mergedStream\n}\n\n// check and pause streams for pipe.\nfunction pauseStreams (streams, options) {\n  if (!Array.isArray(streams)) {\n    // Backwards-compat with old-style streams\n    if (!streams._readableState && streams.pipe) {\n      streams = streams.pipe(PassThrough(options))\n    }\n    if (!streams._readableState || !streams.pause || !streams.pipe) {\n      throw new Error('Only readable stream can be merged.')\n    }\n    streams.pause()\n  } else {\n    for (let i = 0, len = streams.length; i < len; i++) {\n      streams[i] = pauseStreams(streams[i], options)\n    }\n  }\n  return streams\n}\n"]}}