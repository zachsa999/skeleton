{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}__name(_interopRequireDefault,\"_interopRequireDefault\");var _tokenizer=require(\"../parser/tokenizer\");var _types=require(\"../parser/tokenizer/types\");var _Transformer=require(\"./Transformer\");var _Transformer2=_interopRequireDefault(_Transformer);class ReactDisplayNameTransformer extends _Transformer2.default{constructor(rootTransformer,tokens,importProcessor,options){super();this.rootTransformer=rootTransformer;this.tokens=tokens;this.importProcessor=importProcessor;this.options=options;;}process(){const startIndex=this.tokens.currentIndex();if(this.tokens.identifierName()===\"createReactClass\"){const newName=this.importProcessor&&this.importProcessor.getIdentifierReplacement(\"createReactClass\");if(newName){this.tokens.replaceToken(`(0, ${newName})`)}else{this.tokens.copyToken()}this.tryProcessCreateClassCall(startIndex);return true}if(this.tokens.matches3(_types.TokenType.name,_types.TokenType.dot,_types.TokenType.name)&&this.tokens.identifierName()===\"React\"&&this.tokens.identifierNameAtIndex(this.tokens.currentIndex()+2)===\"createClass\"){const newName=this.importProcessor?this.importProcessor.getIdentifierReplacement(\"React\")||\"React\":\"React\";if(newName){this.tokens.replaceToken(newName);this.tokens.copyToken();this.tokens.copyToken()}else{this.tokens.copyToken();this.tokens.copyToken();this.tokens.copyToken()}this.tryProcessCreateClassCall(startIndex);return true}return false}tryProcessCreateClassCall(startIndex){const displayName=this.findDisplayName(startIndex);if(!displayName){return}if(this.classNeedsDisplayName()){this.tokens.copyExpectedToken(_types.TokenType.parenL);this.tokens.copyExpectedToken(_types.TokenType.braceL);this.tokens.appendCode(`displayName: '${displayName}',`);this.rootTransformer.processBalancedCode();this.tokens.copyExpectedToken(_types.TokenType.braceR);this.tokens.copyExpectedToken(_types.TokenType.parenR)}}findDisplayName(startIndex){if(startIndex<2){return null}if(this.tokens.matches2AtIndex(startIndex-2,_types.TokenType.name,_types.TokenType.eq)){return this.tokens.identifierNameAtIndex(startIndex-2)}if(startIndex>=2&&this.tokens.tokens[startIndex-2].identifierRole===_tokenizer.IdentifierRole.ObjectKey){return this.tokens.identifierNameAtIndex(startIndex-2)}if(this.tokens.matches2AtIndex(startIndex-2,_types.TokenType._export,_types.TokenType._default)){return this.getDisplayNameFromFilename()}return null}getDisplayNameFromFilename(){const filePath=this.options.filePath||\"unknown\";const pathSegments=filePath.split(\"/\");const filename=pathSegments[pathSegments.length-1];const dotIndex=filename.lastIndexOf(\".\");const baseFilename=dotIndex===-1?filename:filename.slice(0,dotIndex);if(baseFilename===\"index\"&&pathSegments[pathSegments.length-2]){return pathSegments[pathSegments.length-2]}else{return baseFilename}}classNeedsDisplayName(){let index=this.tokens.currentIndex();if(!this.tokens.matches2(_types.TokenType.parenL,_types.TokenType.braceL)){return false}const objectStartIndex=index+1;const objectContextId=this.tokens.tokens[objectStartIndex].contextId;if(objectContextId==null){throw new Error(\"Expected non-null context ID on object open-brace.\")}for(;index<this.tokens.tokens.length;index++){const token=this.tokens.tokens[index];if(token.type===_types.TokenType.braceR&&token.contextId===objectContextId){index++;break}if(this.tokens.identifierNameAtIndex(index)===\"displayName\"&&this.tokens.tokens[index].identifierRole===_tokenizer.IdentifierRole.ObjectKey&&token.contextId===objectContextId){return false}}if(index===this.tokens.tokens.length){throw new Error(\"Unexpected end of input when processing React class.\")}return this.tokens.matches1AtIndex(index,_types.TokenType.parenR)||this.tokens.matches2AtIndex(index,_types.TokenType.comma,_types.TokenType.parenR)}}__name(ReactDisplayNameTransformer,\"ReactDisplayNameTransformer\");exports.default=ReactDisplayNameTransformer;\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/sucrase@3.32.0/node_modules/sucrase/dist/transformers/ReactDisplayNameTransformer.js"],"sourcesContent":["\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _tokenizer = require('../parser/tokenizer');\nvar _types = require('../parser/tokenizer/types');\n\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n/**\n * Implementation of babel-plugin-transform-react-display-name, which adds a\n * display name to usages of React.createClass and createReactClass.\n */\n class ReactDisplayNameTransformer extends _Transformer2.default {\n  constructor(\n     rootTransformer,\n     tokens,\n     importProcessor,\n     options,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.options = options;;\n  }\n\n  process() {\n    const startIndex = this.tokens.currentIndex();\n    if (this.tokens.identifierName() === \"createReactClass\") {\n      const newName =\n        this.importProcessor && this.importProcessor.getIdentifierReplacement(\"createReactClass\");\n      if (newName) {\n        this.tokens.replaceToken(`(0, ${newName})`);\n      } else {\n        this.tokens.copyToken();\n      }\n      this.tryProcessCreateClassCall(startIndex);\n      return true;\n    }\n    if (\n      this.tokens.matches3(_types.TokenType.name, _types.TokenType.dot, _types.TokenType.name) &&\n      this.tokens.identifierName() === \"React\" &&\n      this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2) === \"createClass\"\n    ) {\n      const newName = this.importProcessor\n        ? this.importProcessor.getIdentifierReplacement(\"React\") || \"React\"\n        : \"React\";\n      if (newName) {\n        this.tokens.replaceToken(newName);\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n      } else {\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n      }\n      this.tryProcessCreateClassCall(startIndex);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * This is called with the token position at the open-paren.\n   */\n   tryProcessCreateClassCall(startIndex) {\n    const displayName = this.findDisplayName(startIndex);\n    if (!displayName) {\n      return;\n    }\n\n    if (this.classNeedsDisplayName()) {\n      this.tokens.copyExpectedToken(_types.TokenType.parenL);\n      this.tokens.copyExpectedToken(_types.TokenType.braceL);\n      this.tokens.appendCode(`displayName: '${displayName}',`);\n      this.rootTransformer.processBalancedCode();\n      this.tokens.copyExpectedToken(_types.TokenType.braceR);\n      this.tokens.copyExpectedToken(_types.TokenType.parenR);\n    }\n  }\n\n   findDisplayName(startIndex) {\n    if (startIndex < 2) {\n      return null;\n    }\n    if (this.tokens.matches2AtIndex(startIndex - 2, _types.TokenType.name, _types.TokenType.eq)) {\n      // This is an assignment (or declaration) and the LHS is either an identifier or a member\n      // expression ending in an identifier, so use that identifier name.\n      return this.tokens.identifierNameAtIndex(startIndex - 2);\n    }\n    if (\n      startIndex >= 2 &&\n      this.tokens.tokens[startIndex - 2].identifierRole === _tokenizer.IdentifierRole.ObjectKey\n    ) {\n      // This is an object literal value.\n      return this.tokens.identifierNameAtIndex(startIndex - 2);\n    }\n    if (this.tokens.matches2AtIndex(startIndex - 2, _types.TokenType._export, _types.TokenType._default)) {\n      return this.getDisplayNameFromFilename();\n    }\n    return null;\n  }\n\n   getDisplayNameFromFilename() {\n    const filePath = this.options.filePath || \"unknown\";\n    const pathSegments = filePath.split(\"/\");\n    const filename = pathSegments[pathSegments.length - 1];\n    const dotIndex = filename.lastIndexOf(\".\");\n    const baseFilename = dotIndex === -1 ? filename : filename.slice(0, dotIndex);\n    if (baseFilename === \"index\" && pathSegments[pathSegments.length - 2]) {\n      return pathSegments[pathSegments.length - 2];\n    } else {\n      return baseFilename;\n    }\n  }\n\n  /**\n   * We only want to add a display name when this is a function call containing\n   * one argument, which is an object literal without `displayName` as an\n   * existing key.\n   */\n   classNeedsDisplayName() {\n    let index = this.tokens.currentIndex();\n    if (!this.tokens.matches2(_types.TokenType.parenL, _types.TokenType.braceL)) {\n      return false;\n    }\n    // The block starts on the {, and we expect any displayName key to be in\n    // that context. We need to ignore other other contexts to avoid matching\n    // nested displayName keys.\n    const objectStartIndex = index + 1;\n    const objectContextId = this.tokens.tokens[objectStartIndex].contextId;\n    if (objectContextId == null) {\n      throw new Error(\"Expected non-null context ID on object open-brace.\");\n    }\n\n    for (; index < this.tokens.tokens.length; index++) {\n      const token = this.tokens.tokens[index];\n      if (token.type === _types.TokenType.braceR && token.contextId === objectContextId) {\n        index++;\n        break;\n      }\n\n      if (\n        this.tokens.identifierNameAtIndex(index) === \"displayName\" &&\n        this.tokens.tokens[index].identifierRole === _tokenizer.IdentifierRole.ObjectKey &&\n        token.contextId === objectContextId\n      ) {\n        // We found a displayName key, so bail out.\n        return false;\n      }\n    }\n\n    if (index === this.tokens.tokens.length) {\n      throw new Error(\"Unexpected end of input when processing React class.\");\n    }\n\n    // If we got this far, we know we have createClass with an object with no\n    // display name, so we want to proceed as long as that was the only argument.\n    return (\n      this.tokens.matches1AtIndex(index, _types.TokenType.parenR) ||\n      this.tokens.matches2AtIndex(index, _types.TokenType.comma, _types.TokenType.parenR)\n    );\n  }\n} exports.default = ReactDisplayNameTransformer;\n"]}}