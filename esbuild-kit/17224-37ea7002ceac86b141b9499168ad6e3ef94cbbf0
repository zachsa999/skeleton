{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});var isGlob=require(\"is-glob\");var pathPosixDirname=require(\"path\").posix.dirname;var isWin32=require(\"os\").platform()===\"win32\";var slash=\"/\";var backslash=/\\\\/g;var escaped=/\\\\([!*?|[\\](){}])/g;module.exports=__name(function globParent(str,opts){var options=Object.assign({flipBackslashes:true},opts);if(options.flipBackslashes&&isWin32&&str.indexOf(slash)<0){str=str.replace(backslash,slash)}if(isEnclosure(str)){str+=slash}str+=\"a\";do{str=pathPosixDirname(str)}while(isGlobby(str));return str.replace(escaped,\"$1\")},\"globParent\");function isEnclosure(str){var lastChar=str.slice(-1);var enclosureStart;switch(lastChar){case\"}\":enclosureStart=\"{\";break;case\"]\":enclosureStart=\"[\";break;default:return false}var foundIndex=str.indexOf(enclosureStart);if(foundIndex<0){return false}return str.slice(foundIndex+1,-1).includes(slash)}__name(isEnclosure,\"isEnclosure\");function isGlobby(str){if(/\\([^()]+$/.test(str)){return true}if(str[0]===\"{\"||str[0]===\"[\"){return true}if(/[^\\\\][{[]/.test(str)){return true}return isGlob(str)}__name(isGlobby,\"isGlobby\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,IAAI,OAAS,QAAQ,SAAS,EAC9B,IAAI,iBAAmB,QAAQ,MAAM,EAAE,MAAM,QAC7C,IAAI,QAAU,QAAQ,IAAI,EAAE,SAAS,IAAM,QAE3C,IAAI,MAAQ,IACZ,IAAI,UAAY,MAChB,IAAI,QAAU,qBAOd,OAAO,QAAU,gBAAS,WAAW,IAAK,KAAM,CAC9C,IAAI,QAAU,OAAO,OAAO,CAAE,gBAAiB,IAAK,EAAG,IAAI,EAG3D,GAAI,QAAQ,iBAAmB,SAAW,IAAI,QAAQ,KAAK,EAAI,EAAG,CAChE,IAAM,IAAI,QAAQ,UAAW,KAAK,CACpC,CAGA,GAAI,YAAY,GAAG,EAAG,CACpB,KAAO,KACT,CAGA,KAAO,IAGP,EAAG,CACD,IAAM,iBAAiB,GAAG,CAC5B,OAAS,SAAS,GAAG,GAGrB,OAAO,IAAI,QAAQ,QAAS,IAAI,CAClC,EAvBiB,cAyBjB,SAAS,YAAY,IAAK,CACxB,IAAI,SAAW,IAAI,MAAM,EAAE,EAE3B,IAAI,eACJ,OAAQ,SAAU,CAChB,IAAK,IACH,eAAiB,IACjB,MACF,IAAK,IACH,eAAiB,IACjB,MACF,QACE,MAAO,MACX,CAEA,IAAI,WAAa,IAAI,QAAQ,cAAc,EAC3C,GAAI,WAAa,EAAG,CAClB,MAAO,MACT,CAEA,OAAO,IAAI,MAAM,WAAa,EAAG,EAAE,EAAE,SAAS,KAAK,CACrD,CArBS,kCAuBT,SAAS,SAAS,IAAK,CACrB,GAAI,YAAY,KAAK,GAAG,EAAG,CACzB,MAAO,KACT,CACA,GAAI,IAAI,CAAC,IAAM,KAAO,IAAI,CAAC,IAAM,IAAK,CACpC,MAAO,KACT,CACA,GAAI,YAAY,KAAK,GAAG,EAAG,CACzB,MAAO,KACT,CACA,OAAO,OAAO,GAAG,CACnB,CAXS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/glob-parent@6.0.2/node_modules/glob-parent/index.js"],"sourcesContent":["'use strict';\n\nvar isGlob = require('is-glob');\nvar pathPosixDirname = require('path').posix.dirname;\nvar isWin32 = require('os').platform() === 'win32';\n\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar escaped = /\\\\([!*?|[\\](){}])/g;\n\n/**\n * @param {string} str\n * @param {Object} opts\n * @param {boolean} [opts.flipBackslashes=true]\n */\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({ flipBackslashes: true }, opts);\n\n  // flip windows path separators\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  }\n\n  // special case for strings ending in enclosure containing path separator\n  if (isEnclosure(str)) {\n    str += slash;\n  }\n\n  // preserves full path in case of trailing path separator\n  str += 'a';\n\n  // remove path parts that are globby\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlobby(str));\n\n  // remove escape chars and return result\n  return str.replace(escaped, '$1');\n};\n\nfunction isEnclosure(str) {\n  var lastChar = str.slice(-1);\n\n  var enclosureStart;\n  switch (lastChar) {\n    case '}':\n      enclosureStart = '{';\n      break;\n    case ']':\n      enclosureStart = '[';\n      break;\n    default:\n      return false;\n  }\n\n  var foundIndex = str.indexOf(enclosureStart);\n  if (foundIndex < 0) {\n    return false;\n  }\n\n  return str.slice(foundIndex + 1, -1).includes(slash);\n}\n\nfunction isGlobby(str) {\n  if (/\\([^()]+$/.test(str)) {\n    return true;\n  }\n  if (str[0] === '{' || str[0] === '[') {\n    return true;\n  }\n  if (/[^\\\\][{[]/.test(str)) {\n    return true;\n  }\n  return isGlob(str);\n}\n"]}}