{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});var _base=require(\"./traverser/base\");var _index=require(\"./traverser/index\");class File{constructor(tokens,scopes){this.tokens=tokens;this.scopes=scopes}}__name(File,\"File\");exports.File=File;function parse(input,isJSXEnabled,isTypeScriptEnabled,isFlowEnabled){if(isFlowEnabled&&isTypeScriptEnabled){throw new Error(\"Cannot combine flow and typescript plugins.\")}_base.initParser.call(void 0,input,isJSXEnabled,isTypeScriptEnabled,isFlowEnabled);const result=_index.parseFile.call(void 0);if(_base.state.error){throw _base.augmentError.call(void 0,_base.state.error)}return result}__name(parse,\"parse\");exports.parse=parse;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAAa,OAAO,eAAe,QAAS,aAAc,CAAC,MAAO,IAAI,CAAC,EAEvE,IAAI,MAAQ,QAAQ,kBAAkB,EACtC,IAAI,OAAS,QAAQ,mBAAmB,EAEvC,MAAM,IAAK,CAIV,YAAY,OAAQ,OAAQ,CAC1B,KAAK,OAAS,OACd,KAAK,OAAS,MAChB,CACF,CARO,oBAQL,QAAQ,KAAO,KAEhB,SAAS,MACR,MACA,aACA,oBACA,cACA,CACA,GAAI,eAAiB,oBAAqB,CACxC,MAAM,IAAI,MAAM,6CAA6C,CAC/D,CACA,MAAM,WAAW,KAAK,OAAQ,MAAO,aAAc,oBAAqB,aAAa,EACrF,MAAM,OAAS,OAAO,UAAU,KAAK,MAAQ,EAC7C,GAAI,MAAM,MAAM,MAAO,CACrB,MAAM,MAAM,aAAa,KAAK,OAAQ,MAAM,MAAM,KAAK,CACzD,CACA,OAAO,MACT,CAfU,sBAeR,QAAQ,MAAQ","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/sucrase@3.32.0/node_modules/sucrase/dist/parser/index.js"],"sourcesContent":["\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _base = require('./traverser/base');\nvar _index = require('./traverser/index');\n\n class File {\n  \n  \n\n  constructor(tokens, scopes) {\n    this.tokens = tokens;\n    this.scopes = scopes;\n  }\n} exports.File = File;\n\n function parse(\n  input,\n  isJSXEnabled,\n  isTypeScriptEnabled,\n  isFlowEnabled,\n) {\n  if (isFlowEnabled && isTypeScriptEnabled) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n  _base.initParser.call(void 0, input, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled);\n  const result = _index.parseFile.call(void 0, );\n  if (_base.state.error) {\n    throw _base.augmentError.call(void 0, _base.state.error);\n  }\n  return result;\n} exports.parse = parse;\n"]}}