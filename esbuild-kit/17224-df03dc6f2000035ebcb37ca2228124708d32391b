{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"default\",{enumerable:true,get:function(){return cloneNodes}});function cloneNodes(nodes,source=void 0,raws=void 0){return nodes.map(node=>{var _node_raws_tailwind;let cloned=node.clone();let shouldOverwriteSource=((_node_raws_tailwind=node.raws.tailwind)===null||_node_raws_tailwind===void 0?void 0:_node_raws_tailwind.preserveSource)!==true||!cloned.source;if(source!==void 0&&shouldOverwriteSource){cloned.source=source;if(\"walk\"in cloned){cloned.walk(child=>{child.source=source})}}if(raws!==void 0){cloned.raws.tailwind={...cloned.raws.tailwind,...raws}}return cloned})}__name(cloneNodes,\"cloneNodes\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,OAAO,eAAe,QAAS,UAAW,CACtC,WAAY,KACZ,IAAK,UAAW,CACZ,OAAO,UACX,CACJ,CAAC,EACD,SAAS,WAAW,MAAO,OAAS,OAAW,KAAO,OAAW,CAC7D,OAAO,MAAM,IAAK,MAAO,CACrB,IAAI,oBACJ,IAAI,OAAS,KAAK,MAAM,EAGxB,IAAI,wBAA0B,oBAAsB,KAAK,KAAK,YAAc,MAAQ,sBAAwB,OAAS,OAAS,oBAAoB,kBAAoB,MAAQ,CAAC,OAAO,OACtL,GAAI,SAAW,QAAa,sBAAuB,CAC/C,OAAO,OAAS,OAChB,GAAI,SAAU,OAAQ,CAClB,OAAO,KAAM,OAAQ,CACjB,MAAM,OAAS,MACnB,CAAC,CACL,CACJ,CACA,GAAI,OAAS,OAAW,CACpB,OAAO,KAAK,SAAW,CACnB,GAAG,OAAO,KAAK,SACf,GAAG,IACP,CACJ,CACA,OAAO,MACX,CAAC,CACL,CAvBS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/util/cloneNodes.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return cloneNodes;\n    }\n});\nfunction cloneNodes(nodes, source = undefined, raws = undefined) {\n    return nodes.map((node)=>{\n        var _node_raws_tailwind;\n        let cloned = node.clone();\n        // We always want override the source map\n        // except when explicitly told not to\n        let shouldOverwriteSource = ((_node_raws_tailwind = node.raws.tailwind) === null || _node_raws_tailwind === void 0 ? void 0 : _node_raws_tailwind.preserveSource) !== true || !cloned.source;\n        if (source !== undefined && shouldOverwriteSource) {\n            cloned.source = source;\n            if (\"walk\" in cloned) {\n                cloned.walk((child)=>{\n                    child.source = source;\n                });\n            }\n        }\n        if (raws !== undefined) {\n            cloned.raws.tailwind = {\n                ...cloned.raws.tailwind,\n                ...raws\n            };\n        }\n        return cloned;\n    });\n}\n"]}}