{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});var reusify=require(\"reusify\");function fastqueue(context,worker,concurrency){if(typeof context===\"function\"){concurrency=worker;worker=context;context=null}if(concurrency<1){throw new Error(\"fastqueue concurrency must be greater than 1\")}var cache=reusify(Task);var queueHead=null;var queueTail=null;var _running=0;var errorHandler=null;var self={push,drain:noop,saturated:noop,pause,paused:false,concurrency,running,resume,idle,length,getQueue,unshift,empty:noop,kill,killAndDrain,error};return self;function running(){return _running}__name(running,\"running\");function pause(){self.paused=true}__name(pause,\"pause\");function length(){var current=queueHead;var counter=0;while(current){current=current.next;counter++}return counter}__name(length,\"length\");function getQueue(){var current=queueHead;var tasks=[];while(current){tasks.push(current.value);current=current.next}return tasks}__name(getQueue,\"getQueue\");function resume(){if(!self.paused)return;self.paused=false;for(var i=0;i<self.concurrency;i++){_running++;release()}}__name(resume,\"resume\");function idle(){return _running===0&&self.length()===0}__name(idle,\"idle\");function push(value,done){var current=cache.get();current.context=context;current.release=release;current.value=value;current.callback=done||noop;current.errorHandler=errorHandler;if(_running===self.concurrency||self.paused){if(queueTail){queueTail.next=current;queueTail=current}else{queueHead=current;queueTail=current;self.saturated()}}else{_running++;worker.call(context,current.value,current.worked)}}__name(push,\"push\");function unshift(value,done){var current=cache.get();current.context=context;current.release=release;current.value=value;current.callback=done||noop;if(_running===self.concurrency||self.paused){if(queueHead){current.next=queueHead;queueHead=current}else{queueHead=current;queueTail=current;self.saturated()}}else{_running++;worker.call(context,current.value,current.worked)}}__name(unshift,\"unshift\");function release(holder){if(holder){cache.release(holder)}var next=queueHead;if(next){if(!self.paused){if(queueTail===queueHead){queueTail=null}queueHead=next.next;next.next=null;worker.call(context,next.value,next.worked);if(queueTail===null){self.empty()}}else{_running--}}else if(--_running===0){self.drain()}}__name(release,\"release\");function kill(){queueHead=null;queueTail=null;self.drain=noop}__name(kill,\"kill\");function killAndDrain(){queueHead=null;queueTail=null;self.drain();self.drain=noop}__name(killAndDrain,\"killAndDrain\");function error(handler){errorHandler=handler}__name(error,\"error\")}__name(fastqueue,\"fastqueue\");function noop(){}__name(noop,\"noop\");function Task(){this.value=null;this.callback=noop;this.next=null;this.release=noop;this.context=null;this.errorHandler=null;var self=this;this.worked=__name(function worked(err,result){var callback=self.callback;var errorHandler=self.errorHandler;var val=self.value;self.value=null;self.callback=noop;if(self.errorHandler){errorHandler(err,val)}callback.call(self.context,err,result);self.release(self)},\"worked\")}__name(Task,\"Task\");function queueAsPromised(context,worker,concurrency){if(typeof context===\"function\"){concurrency=worker;worker=context;context=null}function asyncWrapper(arg,cb){worker.call(this,arg).then(function(res){cb(null,res)},cb)}__name(asyncWrapper,\"asyncWrapper\");var queue=fastqueue(context,asyncWrapper,concurrency);var pushCb=queue.push;var unshiftCb=queue.unshift;queue.push=push;queue.unshift=unshift;queue.drained=drained;return queue;function push(value){var p=new Promise(function(resolve,reject){pushCb(value,function(err,result){if(err){reject(err);return}resolve(result)})});p.catch(noop);return p}__name(push,\"push\");function unshift(value){var p=new Promise(function(resolve,reject){unshiftCb(value,function(err,result){if(err){reject(err);return}resolve(result)})});p.catch(noop);return p}__name(unshift,\"unshift\");function drained(){if(queue.idle()){return new Promise(function(resolve){resolve()})}var previousDrain=queue.drain;var p=new Promise(function(resolve){queue.drain=function(){previousDrain();resolve()}});return p}__name(drained,\"drained\")}__name(queueAsPromised,\"queueAsPromised\");module.exports=fastqueue;module.exports.promise=queueAsPromised;\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/fastq@1.15.0/node_modules/fastq/queue.js"],"sourcesContent":["'use strict'\n\n/* eslint-disable no-var */\n\nvar reusify = require('reusify')\n\nfunction fastqueue (context, worker, concurrency) {\n  if (typeof context === 'function') {\n    concurrency = worker\n    worker = context\n    context = null\n  }\n\n  if (concurrency < 1) {\n    throw new Error('fastqueue concurrency must be greater than 1')\n  }\n\n  var cache = reusify(Task)\n  var queueHead = null\n  var queueTail = null\n  var _running = 0\n  var errorHandler = null\n\n  var self = {\n    push: push,\n    drain: noop,\n    saturated: noop,\n    pause: pause,\n    paused: false,\n    concurrency: concurrency,\n    running: running,\n    resume: resume,\n    idle: idle,\n    length: length,\n    getQueue: getQueue,\n    unshift: unshift,\n    empty: noop,\n    kill: kill,\n    killAndDrain: killAndDrain,\n    error: error\n  }\n\n  return self\n\n  function running () {\n    return _running\n  }\n\n  function pause () {\n    self.paused = true\n  }\n\n  function length () {\n    var current = queueHead\n    var counter = 0\n\n    while (current) {\n      current = current.next\n      counter++\n    }\n\n    return counter\n  }\n\n  function getQueue () {\n    var current = queueHead\n    var tasks = []\n\n    while (current) {\n      tasks.push(current.value)\n      current = current.next\n    }\n\n    return tasks\n  }\n\n  function resume () {\n    if (!self.paused) return\n    self.paused = false\n    for (var i = 0; i < self.concurrency; i++) {\n      _running++\n      release()\n    }\n  }\n\n  function idle () {\n    return _running === 0 && self.length() === 0\n  }\n\n  function push (value, done) {\n    var current = cache.get()\n\n    current.context = context\n    current.release = release\n    current.value = value\n    current.callback = done || noop\n    current.errorHandler = errorHandler\n\n    if (_running === self.concurrency || self.paused) {\n      if (queueTail) {\n        queueTail.next = current\n        queueTail = current\n      } else {\n        queueHead = current\n        queueTail = current\n        self.saturated()\n      }\n    } else {\n      _running++\n      worker.call(context, current.value, current.worked)\n    }\n  }\n\n  function unshift (value, done) {\n    var current = cache.get()\n\n    current.context = context\n    current.release = release\n    current.value = value\n    current.callback = done || noop\n\n    if (_running === self.concurrency || self.paused) {\n      if (queueHead) {\n        current.next = queueHead\n        queueHead = current\n      } else {\n        queueHead = current\n        queueTail = current\n        self.saturated()\n      }\n    } else {\n      _running++\n      worker.call(context, current.value, current.worked)\n    }\n  }\n\n  function release (holder) {\n    if (holder) {\n      cache.release(holder)\n    }\n    var next = queueHead\n    if (next) {\n      if (!self.paused) {\n        if (queueTail === queueHead) {\n          queueTail = null\n        }\n        queueHead = next.next\n        next.next = null\n        worker.call(context, next.value, next.worked)\n        if (queueTail === null) {\n          self.empty()\n        }\n      } else {\n        _running--\n      }\n    } else if (--_running === 0) {\n      self.drain()\n    }\n  }\n\n  function kill () {\n    queueHead = null\n    queueTail = null\n    self.drain = noop\n  }\n\n  function killAndDrain () {\n    queueHead = null\n    queueTail = null\n    self.drain()\n    self.drain = noop\n  }\n\n  function error (handler) {\n    errorHandler = handler\n  }\n}\n\nfunction noop () {}\n\nfunction Task () {\n  this.value = null\n  this.callback = noop\n  this.next = null\n  this.release = noop\n  this.context = null\n  this.errorHandler = null\n\n  var self = this\n\n  this.worked = function worked (err, result) {\n    var callback = self.callback\n    var errorHandler = self.errorHandler\n    var val = self.value\n    self.value = null\n    self.callback = noop\n    if (self.errorHandler) {\n      errorHandler(err, val)\n    }\n    callback.call(self.context, err, result)\n    self.release(self)\n  }\n}\n\nfunction queueAsPromised (context, worker, concurrency) {\n  if (typeof context === 'function') {\n    concurrency = worker\n    worker = context\n    context = null\n  }\n\n  function asyncWrapper (arg, cb) {\n    worker.call(this, arg)\n      .then(function (res) {\n        cb(null, res)\n      }, cb)\n  }\n\n  var queue = fastqueue(context, asyncWrapper, concurrency)\n\n  var pushCb = queue.push\n  var unshiftCb = queue.unshift\n\n  queue.push = push\n  queue.unshift = unshift\n  queue.drained = drained\n\n  return queue\n\n  function push (value) {\n    var p = new Promise(function (resolve, reject) {\n      pushCb(value, function (err, result) {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(result)\n      })\n    })\n\n    // Let's fork the promise chain to\n    // make the error bubble up to the user but\n    // not lead to a unhandledRejection\n    p.catch(noop)\n\n    return p\n  }\n\n  function unshift (value) {\n    var p = new Promise(function (resolve, reject) {\n      unshiftCb(value, function (err, result) {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(result)\n      })\n    })\n\n    // Let's fork the promise chain to\n    // make the error bubble up to the user but\n    // not lead to a unhandledRejection\n    p.catch(noop)\n\n    return p\n  }\n\n  function drained () {\n    if (queue.idle()) {\n      return new Promise(function (resolve) {\n        resolve()\n      })\n    }\n\n    var previousDrain = queue.drain\n\n    var p = new Promise(function (resolve) {\n      queue.drain = function () {\n        previousDrain()\n        resolve()\n      }\n    })\n\n    return p\n  }\n}\n\nmodule.exports = fastqueue\nmodule.exports.promise = queueAsPromised\n"]}}