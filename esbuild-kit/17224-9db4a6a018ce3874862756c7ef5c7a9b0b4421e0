{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"default\",{enumerable:true,get:function(){return processTailwindFeatures}});const _normalizeTailwindDirectives=_interop_require_default(require(\"./lib/normalizeTailwindDirectives\"));const _expandTailwindAtRules=_interop_require_default(require(\"./lib/expandTailwindAtRules\"));const _expandApplyAtRules=_interop_require_default(require(\"./lib/expandApplyAtRules\"));const _evaluateTailwindFunctions=_interop_require_default(require(\"./lib/evaluateTailwindFunctions\"));const _substituteScreenAtRules=_interop_require_default(require(\"./lib/substituteScreenAtRules\"));const _resolveDefaultsAtRules=_interop_require_default(require(\"./lib/resolveDefaultsAtRules\"));const _collapseAdjacentRules=_interop_require_default(require(\"./lib/collapseAdjacentRules\"));const _collapseDuplicateDeclarations=_interop_require_default(require(\"./lib/collapseDuplicateDeclarations\"));const _partitionApplyAtRules=_interop_require_default(require(\"./lib/partitionApplyAtRules\"));const _detectNesting=_interop_require_default(require(\"./lib/detectNesting\"));const _setupContextUtils=require(\"./lib/setupContextUtils\");const _featureFlags=require(\"./featureFlags\");function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}__name(_interop_require_default,\"_interop_require_default\");function processTailwindFeatures(setupContext){return function(root,result){let{tailwindDirectives,applyDirectives}=(0,_normalizeTailwindDirectives.default)(root);(0,_detectNesting.default)()(root,result);(0,_partitionApplyAtRules.default)()(root,result);let context=setupContext({tailwindDirectives,applyDirectives,registerDependency(dependency){result.messages.push({plugin:\"tailwindcss\",parent:result.opts.from,...dependency})},createContext(tailwindConfig,changedContent){return(0,_setupContextUtils.createContext)(tailwindConfig,changedContent,root)}})(root,result);if(context.tailwindConfig.separator===\"-\"){throw new Error(\"The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead.\")}(0,_featureFlags.issueFlagNotices)(context.tailwindConfig);(0,_expandTailwindAtRules.default)(context)(root,result);(0,_partitionApplyAtRules.default)()(root,result);(0,_expandApplyAtRules.default)(context)(root,result);(0,_evaluateTailwindFunctions.default)(context)(root,result);(0,_substituteScreenAtRules.default)(context)(root,result);(0,_resolveDefaultsAtRules.default)(context)(root,result);(0,_collapseAdjacentRules.default)(context)(root,result);(0,_collapseDuplicateDeclarations.default)(context)(root,result)}}__name(processTailwindFeatures,\"processTailwindFeatures\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CACzC,MAAO,IACX,CAAC,EACD,OAAO,eAAe,QAAS,UAAW,CACtC,WAAY,KACZ,IAAK,UAAW,CACZ,OAAO,uBACX,CACJ,CAAC,EACD,MAAM,6BAA6C,yBAAyB,QAAQ,mCAAmC,CAAC,EACxH,MAAM,uBAAuC,yBAAyB,QAAQ,6BAA6B,CAAC,EAC5G,MAAM,oBAAoC,yBAAyB,QAAQ,0BAA0B,CAAC,EACtG,MAAM,2BAA2C,yBAAyB,QAAQ,iCAAiC,CAAC,EACpH,MAAM,yBAAyC,yBAAyB,QAAQ,+BAA+B,CAAC,EAChH,MAAM,wBAAwC,yBAAyB,QAAQ,8BAA8B,CAAC,EAC9G,MAAM,uBAAuC,yBAAyB,QAAQ,6BAA6B,CAAC,EAC5G,MAAM,+BAA+C,yBAAyB,QAAQ,qCAAqC,CAAC,EAC5H,MAAM,uBAAuC,yBAAyB,QAAQ,6BAA6B,CAAC,EAC5G,MAAM,eAA+B,yBAAyB,QAAQ,qBAAqB,CAAC,EAC5F,MAAM,mBAAqB,QAAQ,yBAAyB,EAC5D,MAAM,cAAgB,QAAQ,gBAAgB,EAC9C,SAAS,yBAAyB,IAAK,CACnC,OAAO,KAAO,IAAI,WAAa,IAAM,CACjC,QAAS,GACb,CACJ,CAJS,4DAKT,SAAS,wBAAwB,aAAc,CAC3C,OAAO,SAAS,KAAM,OAAQ,CAC1B,GAAI,CAAE,mBAAqB,eAAiB,GAAK,EAAG,6BAA6B,SAAS,IAAI,GAC7F,EAAG,eAAe,SAAS,EAAE,KAAM,MAAM,GAGzC,EAAG,uBAAuB,SAAS,EAAE,KAAM,MAAM,EAClD,IAAI,QAAU,aAAa,CACvB,mBACA,gBACA,mBAAoB,WAAY,CAC5B,OAAO,SAAS,KAAK,CACjB,OAAQ,cACR,OAAQ,OAAO,KAAK,KACpB,GAAG,UACP,CAAC,CACL,EACA,cAAe,eAAgB,eAAgB,CAC3C,OAAQ,EAAG,mBAAmB,eAAe,eAAgB,eAAgB,IAAI,CACrF,CACJ,CAAC,EAAE,KAAM,MAAM,EACf,GAAI,QAAQ,eAAe,YAAc,IAAK,CAC1C,MAAM,IAAI,MAAM,6IAA6I,CACjK,EACC,EAAG,cAAc,kBAAkB,QAAQ,cAAc,GACzD,EAAG,uBAAuB,SAAS,OAAO,EAAE,KAAM,MAAM,GAGxD,EAAG,uBAAuB,SAAS,EAAE,KAAM,MAAM,GACjD,EAAG,oBAAoB,SAAS,OAAO,EAAE,KAAM,MAAM,GACrD,EAAG,2BAA2B,SAAS,OAAO,EAAE,KAAM,MAAM,GAC5D,EAAG,yBAAyB,SAAS,OAAO,EAAE,KAAM,MAAM,GAC1D,EAAG,wBAAwB,SAAS,OAAO,EAAE,KAAM,MAAM,GACzD,EAAG,uBAAuB,SAAS,OAAO,EAAE,KAAM,MAAM,GACxD,EAAG,+BAA+B,SAAS,OAAO,EAAE,KAAM,MAAM,CACrE,CACJ,CApCS","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/processTailwindFeatures.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return processTailwindFeatures;\n    }\n});\nconst _normalizeTailwindDirectives = /*#__PURE__*/ _interop_require_default(require(\"./lib/normalizeTailwindDirectives\"));\nconst _expandTailwindAtRules = /*#__PURE__*/ _interop_require_default(require(\"./lib/expandTailwindAtRules\"));\nconst _expandApplyAtRules = /*#__PURE__*/ _interop_require_default(require(\"./lib/expandApplyAtRules\"));\nconst _evaluateTailwindFunctions = /*#__PURE__*/ _interop_require_default(require(\"./lib/evaluateTailwindFunctions\"));\nconst _substituteScreenAtRules = /*#__PURE__*/ _interop_require_default(require(\"./lib/substituteScreenAtRules\"));\nconst _resolveDefaultsAtRules = /*#__PURE__*/ _interop_require_default(require(\"./lib/resolveDefaultsAtRules\"));\nconst _collapseAdjacentRules = /*#__PURE__*/ _interop_require_default(require(\"./lib/collapseAdjacentRules\"));\nconst _collapseDuplicateDeclarations = /*#__PURE__*/ _interop_require_default(require(\"./lib/collapseDuplicateDeclarations\"));\nconst _partitionApplyAtRules = /*#__PURE__*/ _interop_require_default(require(\"./lib/partitionApplyAtRules\"));\nconst _detectNesting = /*#__PURE__*/ _interop_require_default(require(\"./lib/detectNesting\"));\nconst _setupContextUtils = require(\"./lib/setupContextUtils\");\nconst _featureFlags = require(\"./featureFlags\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction processTailwindFeatures(setupContext) {\n    return function(root, result) {\n        let { tailwindDirectives , applyDirectives  } = (0, _normalizeTailwindDirectives.default)(root);\n        (0, _detectNesting.default)()(root, result);\n        // Partition apply rules that are found in the css\n        // itself.\n        (0, _partitionApplyAtRules.default)()(root, result);\n        let context = setupContext({\n            tailwindDirectives,\n            applyDirectives,\n            registerDependency (dependency) {\n                result.messages.push({\n                    plugin: \"tailwindcss\",\n                    parent: result.opts.from,\n                    ...dependency\n                });\n            },\n            createContext (tailwindConfig, changedContent) {\n                return (0, _setupContextUtils.createContext)(tailwindConfig, changedContent, root);\n            }\n        })(root, result);\n        if (context.tailwindConfig.separator === \"-\") {\n            throw new Error(\"The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead.\");\n        }\n        (0, _featureFlags.issueFlagNotices)(context.tailwindConfig);\n        (0, _expandTailwindAtRules.default)(context)(root, result);\n        // Partition apply rules that are generated by\n        // addComponents, addUtilities and so on.\n        (0, _partitionApplyAtRules.default)()(root, result);\n        (0, _expandApplyAtRules.default)(context)(root, result);\n        (0, _evaluateTailwindFunctions.default)(context)(root, result);\n        (0, _substituteScreenAtRules.default)(context)(root, result);\n        (0, _resolveDefaultsAtRules.default)(context)(root, result);\n        (0, _collapseAdjacentRules.default)(context)(root, result);\n        (0, _collapseDuplicateDeclarations.default)(context)(root, result);\n    };\n}\n"]}}