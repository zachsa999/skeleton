{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"normalizeConfig\",{enumerable:true,get:function(){return normalizeConfig}});const _featureFlags=require(\"../featureFlags\");const _log=_interop_require_wildcard(require(\"./log\"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap;var cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=__name(function(nodeInterop2){return nodeInterop2?cacheNodeInterop:cacheBabelInterop},\"_getRequireWildcardCache\"))(nodeInterop)}__name(_getRequireWildcardCache,\"_getRequireWildcardCache\");function _interop_require_wildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj}}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj)}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}newObj.default=obj;if(cache){cache.set(obj,newObj)}return newObj}__name(_interop_require_wildcard,\"_interop_require_wildcard\");function normalizeConfig(config){let valid=(()=>{if(config.purge){return false}if(!config.content){return false}if(!Array.isArray(config.content)&&!(typeof config.content===\"object\"&&config.content!==null)){return false}if(Array.isArray(config.content)){return config.content.every(path=>{if(typeof path===\"string\")return true;if(typeof(path===null||path===void 0?void 0:path.raw)!==\"string\")return false;if((path===null||path===void 0?void 0:path.extension)&&typeof(path===null||path===void 0?void 0:path.extension)!==\"string\"){return false}return true})}if(typeof config.content===\"object\"&&config.content!==null){if(Object.keys(config.content).some(key=>![\"files\",\"relative\",\"extract\",\"transform\"].includes(key))){return false}if(Array.isArray(config.content.files)){if(!config.content.files.every(path=>{if(typeof path===\"string\")return true;if(typeof(path===null||path===void 0?void 0:path.raw)!==\"string\")return false;if((path===null||path===void 0?void 0:path.extension)&&typeof(path===null||path===void 0?void 0:path.extension)!==\"string\"){return false}return true})){return false}if(typeof config.content.extract===\"object\"){for(let value of Object.values(config.content.extract)){if(typeof value!==\"function\"){return false}}}else if(!(config.content.extract===void 0||typeof config.content.extract===\"function\")){return false}if(typeof config.content.transform===\"object\"){for(let value of Object.values(config.content.transform)){if(typeof value!==\"function\"){return false}}}else if(!(config.content.transform===void 0||typeof config.content.transform===\"function\")){return false}if(typeof config.content.relative!==\"boolean\"&&typeof config.content.relative!==\"undefined\"){return false}}return true}return false})();if(!valid){_log.default.warn(\"purge-deprecation\",[\"The `purge`/`content` options have changed in Tailwind CSS v3.0.\",\"Update your configuration file to eliminate this warning.\",\"https://tailwindcss.com/docs/upgrade-guide#configure-content-sources\"])}config.safelist=(()=>{var _purge_options;let{content,purge,safelist}=config;if(Array.isArray(safelist))return safelist;if(Array.isArray(content===null||content===void 0?void 0:content.safelist))return content.safelist;if(Array.isArray(purge===null||purge===void 0?void 0:purge.safelist))return purge.safelist;if(Array.isArray(purge===null||purge===void 0?void 0:(_purge_options=purge.options)===null||_purge_options===void 0?void 0:_purge_options.safelist))return purge.options.safelist;return[]})();config.blocklist=(()=>{let{blocklist}=config;if(Array.isArray(blocklist)){if(blocklist.every(item=>typeof item===\"string\")){return blocklist}_log.default.warn(\"blocklist-invalid\",[\"The `blocklist` option must be an array of strings.\",\"https://tailwindcss.com/docs/content-configuration#discarding-classes\"])}return[]})();if(typeof config.prefix===\"function\"){_log.default.warn(\"prefix-function\",[\"As of Tailwind CSS v3.0, `prefix` cannot be a function.\",\"Update `prefix` in your configuration to be a string to eliminate this warning.\",\"https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function\"]);config.prefix=\"\"}else{var _config_prefix;config.prefix=(_config_prefix=config.prefix)!==null&&_config_prefix!==void 0?_config_prefix:\"\"}config.content={relative:(()=>{let{content}=config;if(content===null||content===void 0?void 0:content.relative){return content.relative}return(0,_featureFlags.flagEnabled)(config,\"relativeContentPathsByDefault\")})(),files:(()=>{let{content,purge}=config;if(Array.isArray(purge))return purge;if(Array.isArray(purge===null||purge===void 0?void 0:purge.content))return purge.content;if(Array.isArray(content))return content;if(Array.isArray(content===null||content===void 0?void 0:content.content))return content.content;if(Array.isArray(content===null||content===void 0?void 0:content.files))return content.files;return[]})(),extract:(()=>{let extract=(()=>{var _config_purge,_config_content,_config_purge1,_config_purge_extract,_config_content1,_config_content_extract,_config_purge2,_config_purge_options,_config_content2,_config_content_options;if((_config_purge=config.purge)===null||_config_purge===void 0?void 0:_config_purge.extract)return config.purge.extract;if((_config_content=config.content)===null||_config_content===void 0?void 0:_config_content.extract)return config.content.extract;if((_config_purge1=config.purge)===null||_config_purge1===void 0?void 0:(_config_purge_extract=_config_purge1.extract)===null||_config_purge_extract===void 0?void 0:_config_purge_extract.DEFAULT)return config.purge.extract.DEFAULT;if((_config_content1=config.content)===null||_config_content1===void 0?void 0:(_config_content_extract=_config_content1.extract)===null||_config_content_extract===void 0?void 0:_config_content_extract.DEFAULT)return config.content.extract.DEFAULT;if((_config_purge2=config.purge)===null||_config_purge2===void 0?void 0:(_config_purge_options=_config_purge2.options)===null||_config_purge_options===void 0?void 0:_config_purge_options.extractors)return config.purge.options.extractors;if((_config_content2=config.content)===null||_config_content2===void 0?void 0:(_config_content_options=_config_content2.options)===null||_config_content_options===void 0?void 0:_config_content_options.extractors)return config.content.options.extractors;return{}})();let extractors={};let defaultExtractor=(()=>{var _config_purge,_config_purge_options,_config_content,_config_content_options;if((_config_purge=config.purge)===null||_config_purge===void 0?void 0:(_config_purge_options=_config_purge.options)===null||_config_purge_options===void 0?void 0:_config_purge_options.defaultExtractor){return config.purge.options.defaultExtractor}if((_config_content=config.content)===null||_config_content===void 0?void 0:(_config_content_options=_config_content.options)===null||_config_content_options===void 0?void 0:_config_content_options.defaultExtractor){return config.content.options.defaultExtractor}return void 0})();if(defaultExtractor!==void 0){extractors.DEFAULT=defaultExtractor}if(typeof extract===\"function\"){extractors.DEFAULT=extract}else if(Array.isArray(extract)){for(let{extensions,extractor}of extract!==null&&extract!==void 0?extract:[]){for(let extension of extensions){extractors[extension]=extractor}}}else if(typeof extract===\"object\"&&extract!==null){Object.assign(extractors,extract)}return extractors})(),transform:(()=>{let transform=(()=>{var _config_purge,_config_content,_config_purge1,_config_purge_transform,_config_content1,_config_content_transform;if((_config_purge=config.purge)===null||_config_purge===void 0?void 0:_config_purge.transform)return config.purge.transform;if((_config_content=config.content)===null||_config_content===void 0?void 0:_config_content.transform)return config.content.transform;if((_config_purge1=config.purge)===null||_config_purge1===void 0?void 0:(_config_purge_transform=_config_purge1.transform)===null||_config_purge_transform===void 0?void 0:_config_purge_transform.DEFAULT)return config.purge.transform.DEFAULT;if((_config_content1=config.content)===null||_config_content1===void 0?void 0:(_config_content_transform=_config_content1.transform)===null||_config_content_transform===void 0?void 0:_config_content_transform.DEFAULT)return config.content.transform.DEFAULT;return{}})();let transformers={};if(typeof transform===\"function\"){transformers.DEFAULT=transform}if(typeof transform===\"object\"&&transform!==null){Object.assign(transformers,transform)}return transformers})()};for(let file of config.content.files){if(typeof file===\"string\"&&/{([^,]*?)}/g.test(file)){_log.default.warn(\"invalid-glob-braces\",[`The glob pattern ${(0,_log.dim)(file)} in your Tailwind CSS configuration is invalid.`,`Update it to ${(0,_log.dim)(file.replace(/{([^,]*?)}/g,\"$1\"))} to silence this warning.`]);break}}return config}__name(normalizeConfig,\"normalizeConfig\");\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":["nodeInterop"],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/tailwindcss@3.3.2/node_modules/tailwindcss/lib/util/normalizeConfig.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"normalizeConfig\", {\n    enumerable: true,\n    get: function() {\n        return normalizeConfig;\n    }\n});\nconst _featureFlags = require(\"../featureFlags\");\nconst _log = /*#__PURE__*/ _interop_require_wildcard(require(\"./log\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction normalizeConfig(config) {\n    // Quick structure validation\n    /**\n   * type FilePath = string\n   * type RawFile = { raw: string, extension?: string }\n   * type ExtractorFn = (content: string) => Array<string>\n   * type TransformerFn = (content: string) => string\n   *\n   * type Content =\n   *   | Array<FilePath | RawFile>\n   *   | {\n   *       files: Array<FilePath | RawFile>,\n   *       extract?: ExtractorFn | { [extension: string]: ExtractorFn }\n   *       transform?: TransformerFn | { [extension: string]: TransformerFn }\n   *   }\n   */ let valid = (()=>{\n        // `config.purge` should not exist anymore\n        if (config.purge) {\n            return false;\n        }\n        // `config.content` should exist\n        if (!config.content) {\n            return false;\n        }\n        // `config.content` should be an object or an array\n        if (!Array.isArray(config.content) && !(typeof config.content === \"object\" && config.content !== null)) {\n            return false;\n        }\n        // When `config.content` is an array, it should consist of FilePaths or RawFiles\n        if (Array.isArray(config.content)) {\n            return config.content.every((path)=>{\n                // `path` can be a string\n                if (typeof path === \"string\") return true;\n                // `path` can be an object { raw: string, extension?: string }\n                // `raw` must be a string\n                if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== \"string\") return false;\n                // `extension` (if provided) should also be a string\n                if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== \"string\") {\n                    return false;\n                }\n                return true;\n            });\n        }\n        // When `config.content` is an object\n        if (typeof config.content === \"object\" && config.content !== null) {\n            // Only `files`, `relative`, `extract`, and `transform` can exist in `config.content`\n            if (Object.keys(config.content).some((key)=>![\n                    \"files\",\n                    \"relative\",\n                    \"extract\",\n                    \"transform\"\n                ].includes(key))) {\n                return false;\n            }\n            // `config.content.files` should exist of FilePaths or RawFiles\n            if (Array.isArray(config.content.files)) {\n                if (!config.content.files.every((path)=>{\n                    // `path` can be a string\n                    if (typeof path === \"string\") return true;\n                    // `path` can be an object { raw: string, extension?: string }\n                    // `raw` must be a string\n                    if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== \"string\") return false;\n                    // `extension` (if provided) should also be a string\n                    if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== \"string\") {\n                        return false;\n                    }\n                    return true;\n                })) {\n                    return false;\n                }\n                // `config.content.extract` is optional, and can be a Function or a Record<String, Function>\n                if (typeof config.content.extract === \"object\") {\n                    for (let value of Object.values(config.content.extract)){\n                        if (typeof value !== \"function\") {\n                            return false;\n                        }\n                    }\n                } else if (!(config.content.extract === undefined || typeof config.content.extract === \"function\")) {\n                    return false;\n                }\n                // `config.content.transform` is optional, and can be a Function or a Record<String, Function>\n                if (typeof config.content.transform === \"object\") {\n                    for (let value of Object.values(config.content.transform)){\n                        if (typeof value !== \"function\") {\n                            return false;\n                        }\n                    }\n                } else if (!(config.content.transform === undefined || typeof config.content.transform === \"function\")) {\n                    return false;\n                }\n                // `config.content.relative` is optional and can be a boolean\n                if (typeof config.content.relative !== \"boolean\" && typeof config.content.relative !== \"undefined\") {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    })();\n    if (!valid) {\n        _log.default.warn(\"purge-deprecation\", [\n            \"The `purge`/`content` options have changed in Tailwind CSS v3.0.\",\n            \"Update your configuration file to eliminate this warning.\",\n            \"https://tailwindcss.com/docs/upgrade-guide#configure-content-sources\"\n        ]);\n    }\n    // Normalize the `safelist`\n    config.safelist = (()=>{\n        var _purge_options;\n        let { content , purge , safelist  } = config;\n        if (Array.isArray(safelist)) return safelist;\n        if (Array.isArray(content === null || content === void 0 ? void 0 : content.safelist)) return content.safelist;\n        if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.safelist)) return purge.safelist;\n        if (Array.isArray(purge === null || purge === void 0 ? void 0 : (_purge_options = purge.options) === null || _purge_options === void 0 ? void 0 : _purge_options.safelist)) return purge.options.safelist;\n        return [];\n    })();\n    // Normalize the `blocklist`\n    config.blocklist = (()=>{\n        let { blocklist  } = config;\n        if (Array.isArray(blocklist)) {\n            if (blocklist.every((item)=>typeof item === \"string\")) {\n                return blocklist;\n            }\n            _log.default.warn(\"blocklist-invalid\", [\n                \"The `blocklist` option must be an array of strings.\",\n                \"https://tailwindcss.com/docs/content-configuration#discarding-classes\"\n            ]);\n        }\n        return [];\n    })();\n    // Normalize prefix option\n    if (typeof config.prefix === \"function\") {\n        _log.default.warn(\"prefix-function\", [\n            \"As of Tailwind CSS v3.0, `prefix` cannot be a function.\",\n            \"Update `prefix` in your configuration to be a string to eliminate this warning.\",\n            \"https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function\"\n        ]);\n        config.prefix = \"\";\n    } else {\n        var _config_prefix;\n        config.prefix = (_config_prefix = config.prefix) !== null && _config_prefix !== void 0 ? _config_prefix : \"\";\n    }\n    // Normalize the `content`\n    config.content = {\n        relative: (()=>{\n            let { content  } = config;\n            if (content === null || content === void 0 ? void 0 : content.relative) {\n                return content.relative;\n            }\n            return (0, _featureFlags.flagEnabled)(config, \"relativeContentPathsByDefault\");\n        })(),\n        files: (()=>{\n            let { content , purge  } = config;\n            if (Array.isArray(purge)) return purge;\n            if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.content)) return purge.content;\n            if (Array.isArray(content)) return content;\n            if (Array.isArray(content === null || content === void 0 ? void 0 : content.content)) return content.content;\n            if (Array.isArray(content === null || content === void 0 ? void 0 : content.files)) return content.files;\n            return [];\n        })(),\n        extract: (()=>{\n            let extract = (()=>{\n                var _config_purge, _config_content, _config_purge1, _config_purge_extract, _config_content1, _config_content_extract, _config_purge2, _config_purge_options, _config_content2, _config_content_options;\n                if ((_config_purge = config.purge) === null || _config_purge === void 0 ? void 0 : _config_purge.extract) return config.purge.extract;\n                if ((_config_content = config.content) === null || _config_content === void 0 ? void 0 : _config_content.extract) return config.content.extract;\n                if ((_config_purge1 = config.purge) === null || _config_purge1 === void 0 ? void 0 : (_config_purge_extract = _config_purge1.extract) === null || _config_purge_extract === void 0 ? void 0 : _config_purge_extract.DEFAULT) return config.purge.extract.DEFAULT;\n                if ((_config_content1 = config.content) === null || _config_content1 === void 0 ? void 0 : (_config_content_extract = _config_content1.extract) === null || _config_content_extract === void 0 ? void 0 : _config_content_extract.DEFAULT) return config.content.extract.DEFAULT;\n                if ((_config_purge2 = config.purge) === null || _config_purge2 === void 0 ? void 0 : (_config_purge_options = _config_purge2.options) === null || _config_purge_options === void 0 ? void 0 : _config_purge_options.extractors) return config.purge.options.extractors;\n                if ((_config_content2 = config.content) === null || _config_content2 === void 0 ? void 0 : (_config_content_options = _config_content2.options) === null || _config_content_options === void 0 ? void 0 : _config_content_options.extractors) return config.content.options.extractors;\n                return {};\n            })();\n            let extractors = {};\n            let defaultExtractor = (()=>{\n                var _config_purge, _config_purge_options, _config_content, _config_content_options;\n                if ((_config_purge = config.purge) === null || _config_purge === void 0 ? void 0 : (_config_purge_options = _config_purge.options) === null || _config_purge_options === void 0 ? void 0 : _config_purge_options.defaultExtractor) {\n                    return config.purge.options.defaultExtractor;\n                }\n                if ((_config_content = config.content) === null || _config_content === void 0 ? void 0 : (_config_content_options = _config_content.options) === null || _config_content_options === void 0 ? void 0 : _config_content_options.defaultExtractor) {\n                    return config.content.options.defaultExtractor;\n                }\n                return undefined;\n            })();\n            if (defaultExtractor !== undefined) {\n                extractors.DEFAULT = defaultExtractor;\n            }\n            // Functions\n            if (typeof extract === \"function\") {\n                extractors.DEFAULT = extract;\n            } else if (Array.isArray(extract)) {\n                for (let { extensions , extractor  } of extract !== null && extract !== void 0 ? extract : []){\n                    for (let extension of extensions){\n                        extractors[extension] = extractor;\n                    }\n                }\n            } else if (typeof extract === \"object\" && extract !== null) {\n                Object.assign(extractors, extract);\n            }\n            return extractors;\n        })(),\n        transform: (()=>{\n            let transform = (()=>{\n                var _config_purge, _config_content, _config_purge1, _config_purge_transform, _config_content1, _config_content_transform;\n                if ((_config_purge = config.purge) === null || _config_purge === void 0 ? void 0 : _config_purge.transform) return config.purge.transform;\n                if ((_config_content = config.content) === null || _config_content === void 0 ? void 0 : _config_content.transform) return config.content.transform;\n                if ((_config_purge1 = config.purge) === null || _config_purge1 === void 0 ? void 0 : (_config_purge_transform = _config_purge1.transform) === null || _config_purge_transform === void 0 ? void 0 : _config_purge_transform.DEFAULT) return config.purge.transform.DEFAULT;\n                if ((_config_content1 = config.content) === null || _config_content1 === void 0 ? void 0 : (_config_content_transform = _config_content1.transform) === null || _config_content_transform === void 0 ? void 0 : _config_content_transform.DEFAULT) return config.content.transform.DEFAULT;\n                return {};\n            })();\n            let transformers = {};\n            if (typeof transform === \"function\") {\n                transformers.DEFAULT = transform;\n            }\n            if (typeof transform === \"object\" && transform !== null) {\n                Object.assign(transformers, transform);\n            }\n            return transformers;\n        })()\n    };\n    // Validate globs to prevent bogus globs.\n    // E.g.: `./src/*.{html}` is invalid, the `{html}` should just be `html`\n    for (let file of config.content.files){\n        if (typeof file === \"string\" && /{([^,]*?)}/g.test(file)) {\n            _log.default.warn(\"invalid-glob-braces\", [\n                `The glob pattern ${(0, _log.dim)(file)} in your Tailwind CSS configuration is invalid.`,\n                `Update it to ${(0, _log.dim)(file.replace(/{([^,]*?)}/g, \"$1\"))} to silence this warning.`\n            ]);\n            break;\n        }\n    }\n    return config;\n}\n"]}}