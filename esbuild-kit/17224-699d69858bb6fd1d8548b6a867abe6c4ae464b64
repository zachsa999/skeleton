{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});const utils=require(\"../../utils\");class Matcher{constructor(_patterns,_settings,_micromatchOptions){this._patterns=_patterns;this._settings=_settings;this._micromatchOptions=_micromatchOptions;this._storage=[];this._fillStorage()}_fillStorage(){const patterns=utils.pattern.expandPatternsWithBraceExpansion(this._patterns);for(const pattern of patterns){const segments=this._getPatternSegments(pattern);const sections=this._splitSegmentsIntoSections(segments);this._storage.push({complete:sections.length<=1,pattern,segments,sections})}}_getPatternSegments(pattern){const parts=utils.pattern.getPatternParts(pattern,this._micromatchOptions);return parts.map(part=>{const dynamic=utils.pattern.isDynamicPattern(part,this._settings);if(!dynamic){return{dynamic:false,pattern:part}}return{dynamic:true,pattern:part,patternRe:utils.pattern.makeRe(part,this._micromatchOptions)}})}_splitSegmentsIntoSections(segments){return utils.array.splitWhen(segments,segment=>segment.dynamic&&utils.pattern.hasGlobStar(segment.pattern))}}__name(Matcher,\"Matcher\");exports.default=Matcher;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CAAE,MAAO,IAAK,CAAC,EAC5D,MAAM,MAAQ,QAAQ,aAAa,EACnC,MAAM,OAAQ,CACV,YAAY,UAAW,UAAW,mBAAoB,CAClD,KAAK,UAAY,UACjB,KAAK,UAAY,UACjB,KAAK,mBAAqB,mBAC1B,KAAK,SAAW,CAAC,EACjB,KAAK,aAAa,CACtB,CACA,cAAe,CAKX,MAAM,SAAW,MAAM,QAAQ,iCAAiC,KAAK,SAAS,EAC9E,UAAW,WAAW,SAAU,CAC5B,MAAM,SAAW,KAAK,oBAAoB,OAAO,EACjD,MAAM,SAAW,KAAK,2BAA2B,QAAQ,EACzD,KAAK,SAAS,KAAK,CACf,SAAU,SAAS,QAAU,EAC7B,QACA,SACA,QACJ,CAAC,CACL,CACJ,CACA,oBAAoB,QAAS,CACzB,MAAM,MAAQ,MAAM,QAAQ,gBAAgB,QAAS,KAAK,kBAAkB,EAC5E,OAAO,MAAM,IAAK,MAAS,CACvB,MAAM,QAAU,MAAM,QAAQ,iBAAiB,KAAM,KAAK,SAAS,EACnE,GAAI,CAAC,QAAS,CACV,MAAO,CACH,QAAS,MACT,QAAS,IACb,CACJ,CACA,MAAO,CACH,QAAS,KACT,QAAS,KACT,UAAW,MAAM,QAAQ,OAAO,KAAM,KAAK,kBAAkB,CACjE,CACJ,CAAC,CACL,CACA,2BAA2B,SAAU,CACjC,OAAO,MAAM,MAAM,UAAU,SAAW,SAAY,QAAQ,SAAW,MAAM,QAAQ,YAAY,QAAQ,OAAO,CAAC,CACrH,CACJ,CA7CM,0BA8CN,QAAQ,QAAU","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/matchers/matcher.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../../utils\");\r\nclass Matcher {\r\n    constructor(_patterns, _settings, _micromatchOptions) {\r\n        this._patterns = _patterns;\r\n        this._settings = _settings;\r\n        this._micromatchOptions = _micromatchOptions;\r\n        this._storage = [];\r\n        this._fillStorage();\r\n    }\r\n    _fillStorage() {\r\n        /**\r\n         * The original pattern may include `{,*,**,a/*}`, which will lead to problems with matching (unresolved level).\r\n         * So, before expand patterns with brace expansion into separated patterns.\r\n         */\r\n        const patterns = utils.pattern.expandPatternsWithBraceExpansion(this._patterns);\r\n        for (const pattern of patterns) {\r\n            const segments = this._getPatternSegments(pattern);\r\n            const sections = this._splitSegmentsIntoSections(segments);\r\n            this._storage.push({\r\n                complete: sections.length <= 1,\r\n                pattern,\r\n                segments,\r\n                sections\r\n            });\r\n        }\r\n    }\r\n    _getPatternSegments(pattern) {\r\n        const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);\r\n        return parts.map((part) => {\r\n            const dynamic = utils.pattern.isDynamicPattern(part, this._settings);\r\n            if (!dynamic) {\r\n                return {\r\n                    dynamic: false,\r\n                    pattern: part\r\n                };\r\n            }\r\n            return {\r\n                dynamic: true,\r\n                pattern: part,\r\n                patternRe: utils.pattern.makeRe(part, this._micromatchOptions)\r\n            };\r\n        });\r\n    }\r\n    _splitSegmentsIntoSections(segments) {\r\n        return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));\r\n    }\r\n}\r\nexports.default = Matcher;\r\n"]}}