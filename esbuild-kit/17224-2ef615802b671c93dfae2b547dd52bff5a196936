{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}__name(_interopRequireDefault,\"_interopRequireDefault\");var _types=require(\"../parser/tokenizer/types\");var _Transformer=require(\"./Transformer\");var _Transformer2=_interopRequireDefault(_Transformer);class NumericSeparatorTransformer extends _Transformer2.default{constructor(tokens){super();this.tokens=tokens;;}process(){if(this.tokens.matches1(_types.TokenType.num)){const code=this.tokens.currentTokenCode();if(code.includes(\"_\")){this.tokens.replaceToken(code.replace(/_/g,\"\"));return true}}return false}}__name(NumericSeparatorTransformer,\"NumericSeparatorTransformer\");exports.default=NumericSeparatorTransformer;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAAa,OAAO,eAAe,QAAS,aAAc,CAAC,MAAO,IAAI,CAAC,EAAG,SAAS,uBAAuB,IAAK,CAAE,OAAO,KAAO,IAAI,WAAa,IAAM,CAAE,QAAS,GAAI,CAAG,CAArF,wDAAsF,IAAI,OAAS,QAAQ,2BAA2B,EAEzN,IAAI,aAAe,QAAQ,eAAe,EAAG,IAAI,cAAgB,uBAAuB,YAAY,EAEnG,MAAM,oCAAoC,cAAc,OAAQ,CAC/D,YAAa,OAAQ,CACnB,MAAM,EAAE,KAAK,OAAS,OAAO,CAC/B,CAEA,SAAU,CACR,GAAI,KAAK,OAAO,SAAS,OAAO,UAAU,GAAG,EAAG,CAC9C,MAAM,KAAO,KAAK,OAAO,iBAAiB,EAC1C,GAAI,KAAK,SAAS,GAAG,EAAG,CACtB,KAAK,OAAO,aAAa,KAAK,QAAQ,KAAM,EAAE,CAAC,EAC/C,MAAO,KACT,CACF,CACA,MAAO,MACT,CACF,CAfO,kEAeL,QAAQ,QAAU","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/sucrase@3.32.0/node_modules/sucrase/dist/transformers/NumericSeparatorTransformer.js"],"sourcesContent":["\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var _types = require('../parser/tokenizer/types');\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n class NumericSeparatorTransformer extends _Transformer2.default {\n  constructor( tokens) {\n    super();this.tokens = tokens;;\n  }\n\n  process() {\n    if (this.tokens.matches1(_types.TokenType.num)) {\n      const code = this.tokens.currentTokenCode();\n      if (code.includes(\"_\")) {\n        this.tokens.replaceToken(code.replace(/_/g, \"\"));\n        return true;\n      }\n    }\n    return false;\n  }\n} exports.default = NumericSeparatorTransformer;\n"]}}