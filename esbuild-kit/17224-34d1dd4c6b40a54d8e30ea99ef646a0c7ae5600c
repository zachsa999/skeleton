{"code":"(()=>{\n\"use strict\";var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:true})};var __copyProps=(to,from,except,desc)=>{if(from&&typeof from===\"object\"||typeof from===\"function\"){for(let key of __getOwnPropNames(from))if(!__hasOwnProp.call(to,key)&&key!==except)__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable})}return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,\"default\",{value:mod,enumerable:true}):target,mod));var __toCommonJS=mod=>__copyProps(__defProp({},\"__esModule\",{value:true}),mod);var colors_exports={};__export(colors_exports,{colors:()=>colors,default:()=>colors_default});module.exports=__toCommonJS(colors_exports);var import_settings=__toESM(require(\"./settings.js\"));function generatePaletteShades(colorName){const shadeObj={};import_settings.default.colorShades.forEach(s=>shadeObj[s]=`rgb(var(--color-${colorName}-${s}) / <alpha-value>)`);return shadeObj}__name(generatePaletteShades,\"generatePaletteShades\");const colors=__name(()=>{const paletteObj={};import_settings.default.colorNames.forEach(n=>paletteObj[n]=generatePaletteShades(n));return paletteObj},\"colors\");var colors_default=colors;\n})()\n","warnings":[],"map":{"version":3,"mappings":";8/BAAA,0IAGA,oBAAqB,kCAKrB,SAAS,sBAAsB,UAAmB,CACjD,MAAM,SAAkB,CAAC,EACzB,wBAAS,YAAY,QAAS,GAAO,SAAS,CAAC,EAAI,mBAAmB,aAAa,qBAAsB,EACzG,OAAO,QACR,CAJS,sDASF,MAAM,OAAS,WAAM,CAC3B,MAAM,WAAsB,CAAC,EAC7B,wBAAS,WAAW,QAAS,GAAO,WAAW,CAAC,EAAI,sBAAsB,CAAC,CAAE,EAC7E,OAAO,UACR,EAJsB,UAMtB,IAAO,eAAQ","names":[],"sources":["/root/projects/zachw-i/packages/plugin/src/tailwind/colors.ts"],"sourcesContent":["// Extends Tailwind with Skeleton theme-specific colors values\n// Doc: https://tailwindcss.com/docs/customizing-colors#using-css-variables\n\nimport settings from './settings.js';\n\ntype Shade = { [shadeValue: number]: string };\n\n// ex: `50: 'rgb(var(--color-primary-50) / <alpha-value>)'`\nfunction generatePaletteShades(colorName: string) {\n\tconst shadeObj: Shade = {};\n\tsettings.colorShades.forEach((s) => (shadeObj[s] = `rgb(var(--color-${colorName}-${s}) / <alpha-value>)`));\n\treturn shadeObj;\n}\n\ntype Palette = { [colorName: string]: Shade };\n\n// Generate a a color shade palette 50-900 per each color available\nexport const colors = () => {\n\tconst paletteObj: Palette = {};\n\tsettings.colorNames.forEach((n) => (paletteObj[n] = generatePaletteShades(n)));\n\treturn paletteObj;\n};\n\nexport default colors;\n"]}}