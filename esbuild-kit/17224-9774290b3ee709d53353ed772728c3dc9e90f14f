{"code":"(()=>{\n\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});var _charcodes=require(\"./charcodes\");const WHITESPACE_CHARS=[9,11,12,_charcodes.charCodes.space,_charcodes.charCodes.nonBreakingSpace,_charcodes.charCodes.oghamSpaceMark,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279];exports.WHITESPACE_CHARS=WHITESPACE_CHARS;const skipWhiteSpace=/(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;exports.skipWhiteSpace=skipWhiteSpace;const IS_WHITESPACE=new Uint8Array(65536);exports.IS_WHITESPACE=IS_WHITESPACE;for(const char of exports.WHITESPACE_CHARS){exports.IS_WHITESPACE[char]=1}\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAAa,OAAO,eAAe,QAAS,aAAc,CAAC,MAAO,IAAI,CAAC,EAAE,IAAI,WAAa,QAAQ,aAAa,EAG9G,MAAM,iBAAmB,CACxB,EACA,GACA,GACA,WAAW,UAAU,MACrB,WAAW,UAAU,iBACrB,WAAW,UAAU,eACrB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACF,EAAG,QAAQ,iBAAmB,iBAE7B,MAAM,eAAiB,gCAAiC,QAAQ,eAAiB,eAEjF,MAAM,cAAgB,IAAI,WAAW,KAAK,EAAG,QAAQ,cAAgB,cACtE,UAAW,QAAQ,QAAQ,iBAAkB,CAC3C,QAAQ,cAAc,IAAI,EAAI,CAChC","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/sucrase@3.32.0/node_modules/sucrase/dist/parser/util/whitespace.js"],"sourcesContent":["\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _charcodes = require('./charcodes');\n\n// https://tc39.github.io/ecma262/#sec-white-space\n const WHITESPACE_CHARS = [\n  0x0009,\n  0x000b,\n  0x000c,\n  _charcodes.charCodes.space,\n  _charcodes.charCodes.nonBreakingSpace,\n  _charcodes.charCodes.oghamSpaceMark,\n  0x2000, // EN QUAD\n  0x2001, // EM QUAD\n  0x2002, // EN SPACE\n  0x2003, // EM SPACE\n  0x2004, // THREE-PER-EM SPACE\n  0x2005, // FOUR-PER-EM SPACE\n  0x2006, // SIX-PER-EM SPACE\n  0x2007, // FIGURE SPACE\n  0x2008, // PUNCTUATION SPACE\n  0x2009, // THIN SPACE\n  0x200a, // HAIR SPACE\n  0x202f, // NARROW NO-BREAK SPACE\n  0x205f, // MEDIUM MATHEMATICAL SPACE\n  0x3000, // IDEOGRAPHIC SPACE\n  0xfeff, // ZERO WIDTH NO-BREAK SPACE\n]; exports.WHITESPACE_CHARS = WHITESPACE_CHARS;\n\n const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g; exports.skipWhiteSpace = skipWhiteSpace;\n\n const IS_WHITESPACE = new Uint8Array(65536); exports.IS_WHITESPACE = IS_WHITESPACE;\nfor (const char of exports.WHITESPACE_CHARS) {\n  exports.IS_WHITESPACE[char] = 1;\n}\n"]}}