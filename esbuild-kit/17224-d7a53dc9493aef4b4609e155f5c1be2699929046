{"code":"(()=>{\nvar __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});let postcss=require(\"postcss\");let IMPORTANT=/\\s*!important\\s*$/i;let UNITLESS={\"box-flex\":true,\"box-flex-group\":true,\"column-count\":true,\"flex\":true,\"flex-grow\":true,\"flex-positive\":true,\"flex-shrink\":true,\"flex-negative\":true,\"font-weight\":true,\"line-clamp\":true,\"line-height\":true,\"opacity\":true,\"order\":true,\"orphans\":true,\"tab-size\":true,\"widows\":true,\"z-index\":true,\"zoom\":true,\"fill-opacity\":true,\"stroke-dashoffset\":true,\"stroke-opacity\":true,\"stroke-width\":true};function dashify(str){return str.replace(/([A-Z])/g,\"-$1\").replace(/^ms-/,\"-ms-\").toLowerCase()}__name(dashify,\"dashify\");function decl(parent,name,value){if(value===false||value===null)return;if(!name.startsWith(\"--\")){name=dashify(name)}if(typeof value===\"number\"){if(value===0||UNITLESS[name]){value=value.toString()}else{value+=\"px\"}}if(name===\"css-float\")name=\"float\";if(IMPORTANT.test(value)){value=value.replace(IMPORTANT,\"\");parent.push(postcss.decl({prop:name,value,important:true}))}else{parent.push(postcss.decl({prop:name,value}))}}__name(decl,\"decl\");function atRule(parent,parts,value){let node=postcss.atRule({name:parts[1],params:parts[3]||\"\"});if(typeof value===\"object\"){node.nodes=[];parse(value,node)}parent.push(node)}__name(atRule,\"atRule\");function parse(obj,parent){let name,value,node;for(name in obj){value=obj[name];if(value===null||typeof value===\"undefined\"){continue}else if(name[0]===\"@\"){let parts=name.match(/@(\\S+)(\\s+([\\W\\w]*)\\s*)?/);if(Array.isArray(value)){for(let i of value){atRule(parent,parts,i)}}else{atRule(parent,parts,value)}}else if(Array.isArray(value)){for(let i of value){decl(parent,name,i)}}else if(typeof value===\"object\"){node=postcss.rule({selector:name});parse(value,node);parent.push(node)}else{decl(parent,name,value)}}}__name(parse,\"parse\");module.exports=function(obj){let root=postcss.root();parse(obj,root);return root};\n})()\n","warnings":[],"map":{"version":3,"mappings":";kHAAA,IAAI,QAAU,QAAQ,SAAS,EAE/B,IAAI,UAAY,qBAEhB,IAAI,SAAW,CACb,WAAY,KACZ,iBAAkB,KAClB,eAAgB,KAChB,OAAQ,KACR,YAAa,KACb,gBAAiB,KACjB,cAAe,KACf,gBAAiB,KACjB,cAAe,KACf,aAAc,KACd,cAAe,KACf,UAAW,KACX,QAAS,KACT,UAAW,KACX,WAAY,KACZ,SAAU,KACV,UAAW,KACX,OAAQ,KACR,eAAgB,KAChB,oBAAqB,KACrB,iBAAkB,KAClB,eAAgB,IAClB,EAEA,SAAS,QAAQ,IAAK,CACpB,OAAO,IACJ,QAAQ,WAAY,KAAK,EACzB,QAAQ,OAAQ,MAAM,EACtB,YAAY,CACjB,CALS,0BAOT,SAAS,KAAK,OAAQ,KAAM,MAAO,CACjC,GAAI,QAAU,OAAS,QAAU,KAAM,OAEvC,GAAI,CAAC,KAAK,WAAW,IAAI,EAAG,CAC1B,KAAO,QAAQ,IAAI,CACrB,CAEA,GAAI,OAAO,QAAU,SAAU,CAC7B,GAAI,QAAU,GAAK,SAAS,IAAI,EAAG,CACjC,MAAQ,MAAM,SAAS,CACzB,KAAO,CACL,OAAS,IACX,CACF,CAEA,GAAI,OAAS,YAAa,KAAO,QAEjC,GAAI,UAAU,KAAK,KAAK,EAAG,CACzB,MAAQ,MAAM,QAAQ,UAAW,EAAE,EACnC,OAAO,KAAK,QAAQ,KAAK,CAAE,KAAM,KAAM,MAAO,UAAW,IAAK,CAAC,CAAC,CAClE,KAAO,CACL,OAAO,KAAK,QAAQ,KAAK,CAAE,KAAM,KAAM,KAAM,CAAC,CAAC,CACjD,CACF,CAvBS,oBAyBT,SAAS,OAAO,OAAQ,MAAO,MAAO,CACpC,IAAI,KAAO,QAAQ,OAAO,CAAE,KAAM,MAAM,CAAC,EAAG,OAAQ,MAAM,CAAC,GAAK,EAAG,CAAC,EACpE,GAAI,OAAO,QAAU,SAAU,CAC7B,KAAK,MAAQ,CAAC,EACd,MAAM,MAAO,IAAI,CACnB,CACA,OAAO,KAAK,IAAI,CAClB,CAPS,wBAST,SAAS,MAAM,IAAK,OAAQ,CAC1B,IAAI,KAAM,MAAO,KACjB,IAAK,QAAQ,IAAK,CAChB,MAAQ,IAAI,IAAI,EAChB,GAAI,QAAU,MAAQ,OAAO,QAAU,YAAa,CAClD,QACF,SAAW,KAAK,CAAC,IAAM,IAAK,CAC1B,IAAI,MAAQ,KAAK,MAAM,0BAA0B,EACjD,GAAI,MAAM,QAAQ,KAAK,EAAG,CACxB,QAAS,KAAK,MAAO,CACnB,OAAO,OAAQ,MAAO,CAAC,CACzB,CACF,KAAO,CACL,OAAO,OAAQ,MAAO,KAAK,CAC7B,CACF,SAAW,MAAM,QAAQ,KAAK,EAAG,CAC/B,QAAS,KAAK,MAAO,CACnB,KAAK,OAAQ,KAAM,CAAC,CACtB,CACF,SAAW,OAAO,QAAU,SAAU,CACpC,KAAO,QAAQ,KAAK,CAAE,SAAU,IAAK,CAAC,EACtC,MAAM,MAAO,IAAI,EACjB,OAAO,KAAK,IAAI,CAClB,KAAO,CACL,KAAK,OAAQ,KAAM,KAAK,CAC1B,CACF,CACF,CA3BS,sBA6BT,OAAO,QAAU,SAAU,IAAK,CAC9B,IAAI,KAAO,QAAQ,KAAK,EACxB,MAAM,IAAK,IAAI,EACf,OAAO,IACT","names":[],"sources":["/root/projects/zachw-i/packages/plugin/node_modules/.pnpm/postcss-js@4.0.1_postcss@8.4.24/node_modules/postcss-js/parser.js"],"sourcesContent":["let postcss = require('postcss')\n\nlet IMPORTANT = /\\s*!important\\s*$/i\n\nlet UNITLESS = {\n  'box-flex': true,\n  'box-flex-group': true,\n  'column-count': true,\n  'flex': true,\n  'flex-grow': true,\n  'flex-positive': true,\n  'flex-shrink': true,\n  'flex-negative': true,\n  'font-weight': true,\n  'line-clamp': true,\n  'line-height': true,\n  'opacity': true,\n  'order': true,\n  'orphans': true,\n  'tab-size': true,\n  'widows': true,\n  'z-index': true,\n  'zoom': true,\n  'fill-opacity': true,\n  'stroke-dashoffset': true,\n  'stroke-opacity': true,\n  'stroke-width': true\n}\n\nfunction dashify(str) {\n  return str\n    .replace(/([A-Z])/g, '-$1')\n    .replace(/^ms-/, '-ms-')\n    .toLowerCase()\n}\n\nfunction decl(parent, name, value) {\n  if (value === false || value === null) return\n\n  if (!name.startsWith('--')) {\n    name = dashify(name)\n  }\n\n  if (typeof value === 'number') {\n    if (value === 0 || UNITLESS[name]) {\n      value = value.toString()\n    } else {\n      value += 'px'\n    }\n  }\n\n  if (name === 'css-float') name = 'float'\n\n  if (IMPORTANT.test(value)) {\n    value = value.replace(IMPORTANT, '')\n    parent.push(postcss.decl({ prop: name, value, important: true }))\n  } else {\n    parent.push(postcss.decl({ prop: name, value }))\n  }\n}\n\nfunction atRule(parent, parts, value) {\n  let node = postcss.atRule({ name: parts[1], params: parts[3] || '' })\n  if (typeof value === 'object') {\n    node.nodes = []\n    parse(value, node)\n  }\n  parent.push(node)\n}\n\nfunction parse(obj, parent) {\n  let name, value, node\n  for (name in obj) {\n    value = obj[name]\n    if (value === null || typeof value === 'undefined') {\n      continue\n    } else if (name[0] === '@') {\n      let parts = name.match(/@(\\S+)(\\s+([\\W\\w]*)\\s*)?/)\n      if (Array.isArray(value)) {\n        for (let i of value) {\n          atRule(parent, parts, i)\n        }\n      } else {\n        atRule(parent, parts, value)\n      }\n    } else if (Array.isArray(value)) {\n      for (let i of value) {\n        decl(parent, name, i)\n      }\n    } else if (typeof value === 'object') {\n      node = postcss.rule({ selector: name })\n      parse(value, node)\n      parent.push(node)\n    } else {\n      decl(parent, name, value)\n    }\n  }\n}\n\nmodule.exports = function (obj) {\n  let root = postcss.root()\n  parse(obj, root)\n  return root\n}\n"]}}