import { c as create_ssr_component, v as validate_component, e as escape } from "../../../../../chunks/ssr.js";
import { D as DocsFeature, a as DocsShell } from "../../../../../chunks/DocsShell.js";
import { D as DocsPreview } from "../../../../../chunks/DocsPreview.js";
import "../../../../../chunks/ProgressBar.svelte_svelte_type_style_lang.js";
import { R as RangeSlider } from "../../../../../chunks/RangeSlider.js";
import { C as CodeBlock } from "../../../../../chunks/CodeBlock.js";
const sveldRangeSlider = { "props": [{ "name": "name", "kind": "let", "description": "Required. Set a unique name for the input.", "type": "string", "isFunction": false, "isFunctionDeclaration": false, "isRequired": true, "constant": false, "reactive": false }, { "name": "id", "kind": "let", "description": "Provide a unique input id. Auto-generated by default", "type": "string", "isFunction": false, "isFunctionDeclaration": false, "isRequired": false, "constant": false, "reactive": false }, { "name": "value", "kind": "let", "description": "Set the input value.", "type": "number", "value": "0", "isFunction": false, "isFunctionDeclaration": false, "isRequired": false, "constant": false, "reactive": true }, { "name": "min", "kind": "let", "description": "Set the input minimum range.", "type": "number", "value": "0", "isFunction": false, "isFunctionDeclaration": false, "isRequired": false, "constant": false, "reactive": false }, { "name": "max", "kind": "let", "description": "Set the input maximum range.", "type": "number", "value": "100", "isFunction": false, "isFunctionDeclaration": false, "isRequired": false, "constant": false, "reactive": false }, { "name": "step", "kind": "let", "description": "Set the input step offset.", "type": "number", "value": "1", "isFunction": false, "isFunctionDeclaration": false, "isRequired": false, "constant": false, "reactive": false }, { "name": "ticked", "kind": "let", "description": "Enables tick marks. See browser support below.", "type": "boolean", "value": "false", "isFunction": false, "isFunctionDeclaration": false, "isRequired": false, "constant": false, "reactive": false }, { "name": "accent", "kind": "let", "description": "Provide classes to set the input accent color.", "type": "string", "value": "'accent-surface-900 dark:accent-surface-50'", "isFunction": false, "isFunctionDeclaration": false, "isRequired": false, "constant": false, "reactive": false }, { "name": "label", "kind": "let", "description": "A semantic ARIA label.", "type": "string", "value": "''", "isFunction": false, "isFunctionDeclaration": false, "isRequired": false, "constant": false, "reactive": false }], "moduleExports": [], "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }, { "name": "trail", "default": false, "slot_props": "", "description": "A label slot directly below the range slider." }], "events": [{ "type": "forwarded", "name": "click", "element": "input" }, { "type": "forwarded", "name": "change", "element": "input" }, { "type": "forwarded", "name": "blur", "element": "input" }], "typedefs": [] };
let max = 25;
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const settings = {
    feature: DocsFeature.Component,
    name: "Range Sliders",
    description: "Capture input from a range of values, including optional ticks.",
    imports: ["RangeSlider"],
    source: "packages/skeleton/src/lib/components/RangeSlider",
    aria: "https://www.w3.org/WAI/ARIA/apg/patterns/slider/",
    components: [{ sveld: sveldRangeSlider }],
    restProps: "input",
    keyboard: [
      [
        '<kbd class="kbd">Right Arrow</kbd> or <kbd class="kbd">Up Arrow</kbd>',
        "Increase the value of the slider by one step."
      ],
      [
        '<kbd class="kbd">Left Arrow</kbd> or <kbd class="kbd">Down Arrow</kbd>',
        "Decrease  the value of the slider by one step."
      ],
      [
        '<kbd class="kbd">Home</kbd>',
        "Set the slider to the first allowed value in its range."
      ],
      [
        '<kbd class="kbd">End</kbd>',
        "Set the slider to the last allowed value in its range."
      ],
      [
        '<kbd class="kbd">Page Up</kbd>',
        "Increase the slider value by a large amount."
      ],
      [
        '<kbd class="kbd">Page Down</kbd>',
        "Decrease  the slider value by a large amount."
      ]
    ]
  };
  let value = 15;
  let $$settled;
  let $$rendered;
  let previous_head = $$result.head;
  do {
    $$settled = true;
    $$result.head = previous_head;
    $$rendered = `${validate_component(DocsShell, "DocsShell").$$render($$result, { settings }, {}, {
      usage: () => {
        return ` <section class="space-y-4" data-svelte-h="svelte-13pcajw"> <p>Combines a <a class="anchor" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range" target="_blank" rel="noreferrer">native range input</a> with <a class="anchor" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range#adding_tick_marks" target="_blank" rel="noreferrer">datalist ticks</a> to create a powerful range slider element.</p></section> <section class="space-y-4"><h2 class="h2" data-svelte-h="svelte-1yfasw8">Labeled</h2> ${validate_component(DocsPreview, "DocsPreview").$$render($$result, { background: "neutral" }, {}, {
          source: () => {
            return `${validate_component(CodeBlock, "CodeBlock").$$render(
              $$result,
              {
                language: "ts",
                code: `let value = 15;
let max = 25;`
              },
              {},
              {}
            )} ${validate_component(CodeBlock, "CodeBlock").$$render(
              $$result,
              {
                language: "html",
                code: `
<RangeSlider name="range-slider" bind:value={value} max={25} step={1} ticked>
	<div class="flex justify-between items-center">
		<div class="font-bold">Label</div>
		<div class="text-xs">{value} / {max}</div>
	</div>
</RangeSlider>`
              },
              {},
              {}
            )} `;
          },
          preview: () => {
            return `<div class="w-full">${validate_component(RangeSlider, "RangeSlider").$$render(
              $$result,
              {
                name: "range-slider",
                max: 25,
                step: 1,
                ticked: true,
                value
              },
              {
                value: ($$value) => {
                  value = $$value;
                  $$settled = false;
                }
              },
              {
                default: () => {
                  return `<div class="flex justify-between items-center"><div class="font-bold" data-svelte-h="svelte-qab2ps">Label</div> <div class="text-xs">${escape(value)} / ${escape(max)}</div></div>`;
                }
              }
            )}</div>`;
          }
        })}</section> <section class="space-y-4" data-svelte-h="svelte-1us1et2"><h2 class="h2">Browser Support</h2>  <p>Please be aware that <a class="anchor" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range#browser_compatibility" target="_blank" rel="noreferrer">browser support</a> varies. Safari (macOS/iOS) does not visually display the ticks. However, the ticks are progressive enhancement feature, and Safari it will honor the <code class="code">max</code> and <code class="code">step</code> settings in relation to the value.</p> <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-center"><div class="card p-2 !bg-green-500 text-black"><h4 class="h4" data-toc-ignore>Chrome</h4> <span>Full</span></div> <div class="card p-2 !bg-green-500 text-black"><h4 class="h4" data-toc-ignore>Edge</h4> <span>Full</span></div> <div class="card p-2 !bg-yellow-500 text-black"><h4 class="h4" data-toc-ignore>Safari</h4> <span>Partial</span></div> <div class="card p-2 !bg-green-500 text-black"><h4 class="h4" data-toc-ignore>Firefox</h4> <span>Full</span></div></div></section> `;
      },
      sandbox: () => {
        return ` ${validate_component(DocsPreview, "DocsPreview").$$render($$result, {}, {}, {
          source: () => {
            return `${validate_component(CodeBlock, "CodeBlock").$$render($$result, { language: "ts", code: `let value = 15;` }, {}, {})} ${validate_component(CodeBlock, "CodeBlock").$$render(
              $$result,
              {
                language: "html",
                code: `<RangeSlider name="range-slider" bind:value={value} max={25} step={1} ticked>Label</RangeSlider>`
              },
              {},
              {}
            )} `;
          },
          preview: () => {
            return `<div class="w-full">${validate_component(RangeSlider, "RangeSlider").$$render(
              $$result,
              {
                name: "range-slider",
                max: 25,
                step: 1,
                ticked: true,
                value
              },
              {
                value: ($$value) => {
                  value = $$value;
                  $$settled = false;
                }
              },
              {}
            )}</div>`;
          }
        })} `;
      },
      default: () => {
        return ` `;
      }
    })}`;
  } while (!$$settled);
  return $$rendered;
});
export {
  Page as default
};
